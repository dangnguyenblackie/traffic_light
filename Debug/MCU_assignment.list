
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd8  08004bd8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd8  08004bd8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000094  08004c74  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08004c74  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcc  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  00030e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000346f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950a  00000000  00000000  000353a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ed1  00000000  00000000  0004e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2c5  00000000  00000000  0005f77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eaa40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  000eaa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b14 	.word	0x08004b14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004b14 	.word	0x08004b14

0800014c <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
	switch(index){
	case 0:
		return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f001 ffe2 	bl	800213c <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
	case 1:
		return HAL_GPIO_ReadPin(A1_MAN_GPIO_Port,A1_MAN_Pin);
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f001 ffdc 	bl	800213c <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
	case 2:
		return HAL_GPIO_ReadPin(A2_TUNING_GPIO_Port,A2_TUNING_Pin);
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f001 ffd6 	bl	800213c <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
	case 3:
		return HAL_GPIO_ReadPin(A3_SET_GPIO_Port, A3_SET_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f001 ffd0 	bl	800213c <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 80001a0:	2301      	movs	r3, #1
	}
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess1+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	200000bc 	.word	0x200000bc

080001d4 <subKeyProcess2>:

void subKeyProcess2(int index){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <subKeyProcess2+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2101      	movs	r1, #1
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	200000cc 	.word	0x200000cc

080001f4 <getKeyInput>:

void getKeyInput(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e071      	b.n	80002e4 <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <getKeyInput+0x100>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <getKeyInput+0x104>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ff91 	bl	800014c <iKeyInput>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0x100>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	440b      	add	r3, r1
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <getKeyInput+0x108>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4927      	ldr	r1, [pc, #156]	; (80002f4 <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x10c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4923      	ldr	r1, [pc, #140]	; (80002f8 <getKeyInput+0x104>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	440b      	add	r3, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d017      	beq.n	80002a4 <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d125      	bne.n	80002de <getKeyInput+0xea>
					subKeyProcess1(i);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f7ff ff8e 	bl	80001b4 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x110>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a2:	e01c      	b.n	80002de <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0x110>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4915      	ldr	r1, [pc, #84]	; (8000304 <getKeyInput+0x110>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x110>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc0d      	bgt.n	80002de <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x104>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0xe0>
						subKeyProcess2(i);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff80 	bl	80001d4 <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <getKeyInput+0x110>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd8a      	ble.n	8000200 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	200000b8 	.word	0x200000b8
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d901      	bls.n	800031c <is_button_pressed+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e00d      	b.n	8000338 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <is_button_pressed+0x3c>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d106      	bne.n	8000336 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <is_button_pressed+0x3c>)
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed+0x30>
		}
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000bc 	.word	0x200000bc

08000348 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d901      	bls.n	800035c <is_button_pressed_1s+0x14>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	e00d      	b.n	8000378 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <is_button_pressed_1s+0x3c>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <is_button_pressed_1s+0x3c>)
 800036c:	2100      	movs	r1, #0
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000376:	2300      	movs	r3, #0
	}
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	200000cc 	.word	0x200000cc

08000388 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch(status){
 800038c:	4b7b      	ldr	r3, [pc, #492]	; (800057c <fsm_automatic_run+0x1f4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b0c      	cmp	r3, #12
 8000392:	dc21      	bgt.n	80003d8 <fsm_automatic_run+0x50>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f340 80e5 	ble.w	8000564 <fsm_automatic_run+0x1dc>
 800039a:	3b01      	subs	r3, #1
 800039c:	2b0b      	cmp	r3, #11
 800039e:	f200 80e1 	bhi.w	8000564 <fsm_automatic_run+0x1dc>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <fsm_automatic_run+0x20>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	08000407 	.word	0x08000407
 80003ac:	08000457 	.word	0x08000457
 80003b0:	08000565 	.word	0x08000565
 80003b4:	08000565 	.word	0x08000565
 80003b8:	08000565 	.word	0x08000565
 80003bc:	08000565 	.word	0x08000565
 80003c0:	08000565 	.word	0x08000565
 80003c4:	08000565 	.word	0x08000565
 80003c8:	08000565 	.word	0x08000565
 80003cc:	08000565 	.word	0x08000565
 80003d0:	080004b7 	.word	0x080004b7
 80003d4:	08000505 	.word	0x08000505
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	f040 80c3 	bne.w	8000564 <fsm_automatic_run+0x1dc>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80003de:	2003      	movs	r0, #3
 80003e0:	f000 fb40 	bl	8000a64 <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80003e4:	4b66      	ldr	r3, [pc, #408]	; (8000580 <fsm_automatic_run+0x1f8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f8c7 	bl	800157c <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80003ee:	4b65      	ldr	r3, [pc, #404]	; (8000584 <fsm_automatic_run+0x1fc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 f8de 	bl	80015b4 <setTimer4>
			timer2_flag = 1;
 80003f8:	4b63      	ldr	r3, [pc, #396]	; (8000588 <fsm_automatic_run+0x200>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN1;
 80003fe:	4b5f      	ldr	r3, [pc, #380]	; (800057c <fsm_automatic_run+0x1f4>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

			break;
 8000404:	e0b7      	b.n	8000576 <fsm_automatic_run+0x1ee>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fa32 	bl	8000870 <setRed>
			setGreen(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 faaf 	bl	8000970 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff ff78 	bl	8000308 <is_button_pressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00d      	beq.n	800043a <fsm_automatic_run+0xb2>
				status_pedestrian = STOP_LIGHT;
 800041e:	4b5b      	ldr	r3, [pc, #364]	; (800058c <fsm_automatic_run+0x204>)
 8000420:	222d      	movs	r2, #45	; 0x2d
 8000422:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000424:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000428:	f001 f870 	bl	800150c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800042c:	4b58      	ldr	r3, [pc, #352]	; (8000590 <fsm_automatic_run+0x208>)
 800042e:	2232      	movs	r2, #50	; 0x32
 8000430:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000432:	4b58      	ldr	r3, [pc, #352]	; (8000594 <fsm_automatic_run+0x20c>)
 8000434:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000438:	601a      	str	r2, [r3, #0]
			}


			//SWITCH CASE
			if(timer3_flag){
 800043a:	4b57      	ldr	r3, [pc, #348]	; (8000598 <fsm_automatic_run+0x210>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	f000 8092 	beq.w	8000568 <fsm_automatic_run+0x1e0>
				setTimer3(yellow_time);
 8000444:	4b55      	ldr	r3, [pc, #340]	; (800059c <fsm_automatic_run+0x214>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f001 f897 	bl	800157c <setTimer3>
				status = AUTO_YELLOW1;
 800044e:	4b4b      	ldr	r3, [pc, #300]	; (800057c <fsm_automatic_run+0x1f4>)
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
			}
			break;
 8000454:	e088      	b.n	8000568 <fsm_automatic_run+0x1e0>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fa0a 	bl	8000870 <setRed>
			setYellow(0);
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fa47 	bl	80008f0 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ff50 	bl	8000308 <is_button_pressed>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00d      	beq.n	800048a <fsm_automatic_run+0x102>
				status_pedestrian =	STOP_LIGHT;
 800046e:	4b47      	ldr	r3, [pc, #284]	; (800058c <fsm_automatic_run+0x204>)
 8000470:	222d      	movs	r2, #45	; 0x2d
 8000472:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000474:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000478:	f001 f848 	bl	800150c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800047c:	4b44      	ldr	r3, [pc, #272]	; (8000590 <fsm_automatic_run+0x208>)
 800047e:	2232      	movs	r2, #50	; 0x32
 8000480:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000482:	4b44      	ldr	r3, [pc, #272]	; (8000594 <fsm_automatic_run+0x20c>)
 8000484:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000488:	601a      	str	r2, [r3, #0]
			}
			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 800048a:	4b43      	ldr	r3, [pc, #268]	; (8000598 <fsm_automatic_run+0x210>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d06c      	beq.n	800056c <fsm_automatic_run+0x1e4>
 8000492:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <fsm_automatic_run+0x218>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d068      	beq.n	800056c <fsm_automatic_run+0x1e4>
				setTimer3(red_time);
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <fsm_automatic_run+0x21c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f86c 	bl	800157c <setTimer3>
				setTimer4(green_time_2);
 80004a4:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <fsm_automatic_run+0x220>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 f883 	bl	80015b4 <setTimer4>
				status = AUTO_GREEN2;
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <fsm_automatic_run+0x1f4>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	601a      	str	r2, [r3, #0]
			}

			break;
 80004b4:	e05a      	b.n	800056c <fsm_automatic_run+0x1e4>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 f9da 	bl	8000870 <setRed>
			setGreen(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f000 fa57 	bl	8000970 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff20 	bl	8000308 <is_button_pressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00d      	beq.n	80004ea <fsm_automatic_run+0x162>
				status_pedestrian = WALK_LIGHT;
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <fsm_automatic_run+0x204>)
 80004d0:	222e      	movs	r2, #46	; 0x2e
 80004d2:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80004d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80004d8:	f001 f818 	bl	800150c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <fsm_automatic_run+0x208>)
 80004de:	2232      	movs	r2, #50	; 0x32
 80004e0:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <fsm_automatic_run+0x20c>)
 80004e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004e8:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <fsm_automatic_run+0x218>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d03e      	beq.n	8000570 <fsm_automatic_run+0x1e8>
				setTimer4(yellow_time_2);
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <fsm_automatic_run+0x224>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f85c 	bl	80015b4 <setTimer4>
				status = AUTO_YELLOW2;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <fsm_automatic_run+0x1f4>)
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
			}

			break;
 8000502:	e035      	b.n	8000570 <fsm_automatic_run+0x1e8>
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f9b3 	bl	8000870 <setRed>
			setYellow(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 f9f0 	bl	80008f0 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff fef9 	bl	8000308 <is_button_pressed>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00d      	beq.n	8000538 <fsm_automatic_run+0x1b0>
				status_pedestrian = WALK_LIGHT;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <fsm_automatic_run+0x204>)
 800051e:	222e      	movs	r2, #46	; 0x2e
 8000520:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000522:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000526:	f000 fff1 	bl	800150c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <fsm_automatic_run+0x208>)
 800052c:	2232      	movs	r2, #50	; 0x32
 800052e:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <fsm_automatic_run+0x20c>)
 8000532:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000536:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <fsm_automatic_run+0x218>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d019      	beq.n	8000574 <fsm_automatic_run+0x1ec>
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <fsm_automatic_run+0x210>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d015      	beq.n	8000574 <fsm_automatic_run+0x1ec>
				setTimer3(green_time);
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <fsm_automatic_run+0x1f8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f815 	bl	800157c <setTimer3>
				setTimer4(red_time_2);
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <fsm_automatic_run+0x1fc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f82c 	bl	80015b4 <setTimer4>
				status = AUTO_GREEN1;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <fsm_automatic_run+0x1f4>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
			}

			break;
 8000562:	e007      	b.n	8000574 <fsm_automatic_run+0x1ec>
		default:
			break;
 8000564:	bf00      	nop
 8000566:	e006      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000568:	bf00      	nop
 800056a:	e004      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 800056c:	bf00      	nop
 800056e:	e002      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000004 	.word	0x20000004
 8000580:	20000014 	.word	0x20000014
 8000584:	20000018 	.word	0x20000018
 8000588:	20000120 	.word	0x20000120
 800058c:	20000008 	.word	0x20000008
 8000590:	20000114 	.word	0x20000114
 8000594:	20000110 	.word	0x20000110
 8000598:	20000128 	.word	0x20000128
 800059c:	20000010 	.word	0x20000010
 80005a0:	20000130 	.word	0x20000130
 80005a4:	2000000c 	.word	0x2000000c
 80005a8:	20000020 	.word	0x20000020
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
//
//			break;
//		default:
//			break;
	}
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <fsm_pedestrian_run+0x9c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b2d      	cmp	r3, #45	; 0x2d
 80005c6:	d002      	beq.n	80005ce <fsm_pedestrian_run+0x12>
 80005c8:	2b2e      	cmp	r3, #46	; 0x2e
 80005ca:	d020      	beq.n	800060e <fsm_pedestrian_run+0x52>
			}

			break;
		default:

			break;
 80005cc:	e042      	b.n	8000654 <fsm_pedestrian_run+0x98>
			setPedestrian(0);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fa0e 	bl	80009f0 <setPedestrian>
			if(timer1_flag){
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <fsm_pedestrian_run+0xa0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00c      	beq.n	80005f6 <fsm_pedestrian_run+0x3a>
				status_pedestrian = -1;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <fsm_pedestrian_run+0x9c>)
 80005de:	f04f 32ff 	mov.w	r2, #4294967295
 80005e2:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 fa03 	bl	80009f0 <setPedestrian>
				buzzer_freq = 0;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <fsm_pedestrian_run+0xa4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <fsm_pedestrian_run+0xa8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2){
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <fsm_pedestrian_run+0xac>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b0b      	cmp	r3, #11
 80005fc:	d003      	beq.n	8000606 <fsm_pedestrian_run+0x4a>
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <fsm_pedestrian_run+0xac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b0c      	cmp	r3, #12
 8000604:	d123      	bne.n	800064e <fsm_pedestrian_run+0x92>
				status_pedestrian = WALK_LIGHT;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <fsm_pedestrian_run+0x9c>)
 8000608:	222e      	movs	r2, #46	; 0x2e
 800060a:	601a      	str	r2, [r3, #0]
			break;
 800060c:	e01f      	b.n	800064e <fsm_pedestrian_run+0x92>
			setPedestrian(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 f9ee 	bl	80009f0 <setPedestrian>
			if(timer1_flag){
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <fsm_pedestrian_run+0xa0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <fsm_pedestrian_run+0x7a>
				status_pedestrian = -1;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <fsm_pedestrian_run+0x9c>)
 800061e:	f04f 32ff 	mov.w	r2, #4294967295
 8000622:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f9e3 	bl	80009f0 <setPedestrian>
				buzzer_freq = 0;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <fsm_pedestrian_run+0xa4>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <fsm_pedestrian_run+0xa8>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1){
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <fsm_pedestrian_run+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d003      	beq.n	8000646 <fsm_pedestrian_run+0x8a>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_pedestrian_run+0xac>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d105      	bne.n	8000652 <fsm_pedestrian_run+0x96>
				status_pedestrian = STOP_LIGHT;
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <fsm_pedestrian_run+0x9c>)
 8000648:	222d      	movs	r2, #45	; 0x2d
 800064a:	601a      	str	r2, [r3, #0]
			break;
 800064c:	e001      	b.n	8000652 <fsm_pedestrian_run+0x96>
			break;
 800064e:	bf00      	nop
 8000650:	e000      	b.n	8000654 <fsm_pedestrian_run+0x98>
			break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000118 	.word	0x20000118
 8000660:	20000114 	.word	0x20000114
 8000664:	20000110 	.word	0x20000110
 8000668:	20000004 	.word	0x20000004

0800066c <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	switch(status){
 8000670:	4b76      	ldr	r3, [pc, #472]	; (800084c <fsm_tuning_run+0x1e0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b21      	cmp	r3, #33	; 0x21
 8000676:	d04d      	beq.n	8000714 <fsm_tuning_run+0xa8>
 8000678:	2b21      	cmp	r3, #33	; 0x21
 800067a:	f300 80dd 	bgt.w	8000838 <fsm_tuning_run+0x1cc>
 800067e:	2b1f      	cmp	r3, #31
 8000680:	d003      	beq.n	800068a <fsm_tuning_run+0x1e>
 8000682:	2b20      	cmp	r3, #32
 8000684:	f000 808f 	beq.w	80007a6 <fsm_tuning_run+0x13a>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 8000688:	e0d6      	b.n	8000838 <fsm_tuning_run+0x1cc>
			if(is_button_pressed(3)){
 800068a:	2003      	movs	r0, #3
 800068c:	f7ff fe3c 	bl	8000308 <is_button_pressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <fsm_tuning_run+0x34>
				red_time += 1;
 8000696:	4b6e      	ldr	r3, [pc, #440]	; (8000850 <fsm_tuning_run+0x1e4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a6c      	ldr	r2, [pc, #432]	; (8000850 <fsm_tuning_run+0x1e4>)
 800069e:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 80006a0:	2003      	movs	r0, #3
 80006a2:	f7ff fe51 	bl	8000348 <is_button_pressed_1s>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <fsm_tuning_run+0x4a>
				red_time -= 1;
 80006ac:	4b68      	ldr	r3, [pc, #416]	; (8000850 <fsm_tuning_run+0x1e4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a67      	ldr	r2, [pc, #412]	; (8000850 <fsm_tuning_run+0x1e4>)
 80006b4:	6013      	str	r3, [r2, #0]
			red_time_2 = red_time;
 80006b6:	4b66      	ldr	r3, [pc, #408]	; (8000850 <fsm_tuning_run+0x1e4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a66      	ldr	r2, [pc, #408]	; (8000854 <fsm_tuning_run+0x1e8>)
 80006bc:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <fsm_tuning_run+0x1ec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d005      	beq.n	80006d2 <fsm_tuning_run+0x66>
				setRed(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f8d2 	bl	8000870 <setRed>
				setRed(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f8cf 	bl	8000870 <setRed>
			if(timer3_flag){
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <fsm_tuning_run+0x1f0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <fsm_tuning_run+0x76>
				status = AUTO_INIT;
 80006da:	4b5c      	ldr	r3, [pc, #368]	; (800084c <fsm_tuning_run+0x1e0>)
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	601a      	str	r2, [r3, #0]
			break;
 80006e0:	e0ac      	b.n	800083c <fsm_tuning_run+0x1d0>
			else if(is_button_pressed(2)){
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff fe10 	bl	8000308 <is_button_pressed>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <fsm_tuning_run+0x92>
				status = TUNING_YELLOW;
 80006ee:	4b57      	ldr	r3, [pc, #348]	; (800084c <fsm_tuning_run+0x1e0>)
 80006f0:	2221      	movs	r2, #33	; 0x21
 80006f2:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 80006f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006f8:	f000 ff40 	bl	800157c <setTimer3>
			break;
 80006fc:	e09e      	b.n	800083c <fsm_tuning_run+0x1d0>
			else if(is_button_pressed(1)){
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff fe02 	bl	8000308 <is_button_pressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 8098 	beq.w	800083c <fsm_tuning_run+0x1d0>
				status = AUTO_INIT;
 800070c:	4b4f      	ldr	r3, [pc, #316]	; (800084c <fsm_tuning_run+0x1e0>)
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	601a      	str	r2, [r3, #0]
			break;
 8000712:	e093      	b.n	800083c <fsm_tuning_run+0x1d0>
			if(is_button_pressed(3)){
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff fdf7 	bl	8000308 <is_button_pressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <fsm_tuning_run+0xbe>
				yellow_time += 1;
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <fsm_tuning_run+0x1f4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a4e      	ldr	r2, [pc, #312]	; (8000860 <fsm_tuning_run+0x1f4>)
 8000728:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 800072a:	2003      	movs	r0, #3
 800072c:	f7ff fe0c 	bl	8000348 <is_button_pressed_1s>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <fsm_tuning_run+0xd4>
				yellow_time -= 1;
 8000736:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <fsm_tuning_run+0x1f4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	4a48      	ldr	r2, [pc, #288]	; (8000860 <fsm_tuning_run+0x1f4>)
 800073e:	6013      	str	r3, [r2, #0]
			yellow_time_2 = yellow_time;
 8000740:	4b47      	ldr	r3, [pc, #284]	; (8000860 <fsm_tuning_run+0x1f4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a47      	ldr	r2, [pc, #284]	; (8000864 <fsm_tuning_run+0x1f8>)
 8000746:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 8000748:	4b43      	ldr	r3, [pc, #268]	; (8000858 <fsm_tuning_run+0x1ec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <fsm_tuning_run+0xf0>
				setYellow(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f8cd 	bl	80008f0 <setYellow>
				setYellow(1);
 8000756:	2001      	movs	r0, #1
 8000758:	f000 f8ca 	bl	80008f0 <setYellow>
			if(timer3_flag){
 800075c:	4b3f      	ldr	r3, [pc, #252]	; (800085c <fsm_tuning_run+0x1f0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d008      	beq.n	8000776 <fsm_tuning_run+0x10a>
				setTimer3(green_time);
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <fsm_tuning_run+0x1fc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 ff07 	bl	800157c <setTimer3>
				status = AUTO_GREEN2;
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <fsm_tuning_run+0x1e0>)
 8000770:	220b      	movs	r2, #11
 8000772:	601a      	str	r2, [r3, #0]
			break;
 8000774:	e064      	b.n	8000840 <fsm_tuning_run+0x1d4>
			else if(is_button_pressed(2)){
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff fdc6 	bl	8000308 <is_button_pressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d007      	beq.n	8000792 <fsm_tuning_run+0x126>
				status = TUNING_GREEN;
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <fsm_tuning_run+0x1e0>)
 8000784:	2220      	movs	r2, #32
 8000786:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000788:	f242 7010 	movw	r0, #10000	; 0x2710
 800078c:	f000 fef6 	bl	800157c <setTimer3>
			break;
 8000790:	e056      	b.n	8000840 <fsm_tuning_run+0x1d4>
			else if(is_button_pressed(1)){
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fdb8 	bl	8000308 <is_button_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d050      	beq.n	8000840 <fsm_tuning_run+0x1d4>
				status = AUTO_INIT;
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <fsm_tuning_run+0x1e0>)
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	601a      	str	r2, [r3, #0]
			break;
 80007a4:	e04c      	b.n	8000840 <fsm_tuning_run+0x1d4>
			if(is_button_pressed(3)){
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff fdae 	bl	8000308 <is_button_pressed>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <fsm_tuning_run+0x150>
				green_time += 1;
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <fsm_tuning_run+0x1fc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <fsm_tuning_run+0x1fc>)
 80007ba:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 80007bc:	2003      	movs	r0, #3
 80007be:	f7ff fdc3 	bl	8000348 <is_button_pressed_1s>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d004      	beq.n	80007d2 <fsm_tuning_run+0x166>
				green_time -= 1;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <fsm_tuning_run+0x1fc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a26      	ldr	r2, [pc, #152]	; (8000868 <fsm_tuning_run+0x1fc>)
 80007d0:	6013      	str	r3, [r2, #0]
			green_time_2 = green_time;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <fsm_tuning_run+0x1fc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <fsm_tuning_run+0x200>)
 80007d8:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <fsm_tuning_run+0x1ec>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <fsm_tuning_run+0x182>
				setGreen(0);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f8c4 	bl	8000970 <setGreen>
				setGreen(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f8c1 	bl	8000970 <setGreen>
			if(timer3_flag){
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <fsm_tuning_run+0x1f0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <fsm_tuning_run+0x19c>
				setTimer3(yellow_time);
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <fsm_tuning_run+0x1f4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 febe 	bl	800157c <setTimer3>
				status = AUTO_YELLOW2;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <fsm_tuning_run+0x1e0>)
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
			break;
 8000806:	e01d      	b.n	8000844 <fsm_tuning_run+0x1d8>
			else if(is_button_pressed(2)){
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff fd7d 	bl	8000308 <is_button_pressed>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <fsm_tuning_run+0x1b8>
				status = TUNING_RED;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <fsm_tuning_run+0x1e0>)
 8000816:	221f      	movs	r2, #31
 8000818:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 800081a:	f242 7010 	movw	r0, #10000	; 0x2710
 800081e:	f000 fead 	bl	800157c <setTimer3>
			break;
 8000822:	e00f      	b.n	8000844 <fsm_tuning_run+0x1d8>
			else if(is_button_pressed(1)){
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fd6f 	bl	8000308 <is_button_pressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d009      	beq.n	8000844 <fsm_tuning_run+0x1d8>
				status = AUTO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <fsm_tuning_run+0x1e0>)
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	601a      	str	r2, [r3, #0]
			break;
 8000836:	e005      	b.n	8000844 <fsm_tuning_run+0x1d8>
			break;
 8000838:	bf00      	nop
 800083a:	e004      	b.n	8000846 <fsm_tuning_run+0x1da>
			break;
 800083c:	bf00      	nop
 800083e:	e002      	b.n	8000846 <fsm_tuning_run+0x1da>
			break;
 8000840:	bf00      	nop
 8000842:	e000      	b.n	8000846 <fsm_tuning_run+0x1da>
			break;
 8000844:	bf00      	nop
	}
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000004 	.word	0x20000004
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20000018 	.word	0x20000018
 8000858:	20000120 	.word	0x20000120
 800085c:	20000128 	.word	0x20000128
 8000860:	20000010 	.word	0x20000010
 8000864:	2000001c 	.word	0x2000001c
 8000868:	20000014 	.word	0x20000014
 800086c:	20000020 	.word	0x20000020

08000870 <setRed>:
 * Traffic light 2:
 *		Pin 1: D4 – PB5
 *		Pin 2: D5 – PB4
 */

void setRed(int index){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	switch(index){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <setRed+0x16>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00c      	beq.n	800089e <setRed+0x2e>
 8000884:	e016      	b.n	80008b4 <setRed+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <setRed+0x78>)
 800088e:	f001 fc6c 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2108      	movs	r1, #8
 8000896:	4815      	ldr	r0, [pc, #84]	; (80008ec <setRed+0x7c>)
 8000898:	f001 fc67 	bl	800216a <HAL_GPIO_WritePin>
			break;
 800089c:	e020      	b.n	80008e0 <setRed+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2120      	movs	r1, #32
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <setRed+0x7c>)
 80008a4:	f001 fc61 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <setRed+0x7c>)
 80008ae:	f001 fc5c 	bl	800216a <HAL_GPIO_WritePin>
			break;
 80008b2:	e015      	b.n	80008e0 <setRed+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <setRed+0x78>)
 80008bc:	f001 fc55 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2108      	movs	r1, #8
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <setRed+0x7c>)
 80008c6:	f001 fc50 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <setRed+0x7c>)
 80008d0:	f001 fc4b 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <setRed+0x7c>)
 80008da:	f001 fc46 	bl	800216a <HAL_GPIO_WritePin>

			break;
 80008de:	bf00      	nop
	}
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <setYellow>:

void setYellow(int index){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	switch(index){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <setYellow+0x16>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d00c      	beq.n	800091e <setYellow+0x2e>
 8000904:	e016      	b.n	8000934 <setYellow+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <setYellow+0x78>)
 800090e:	f001 fc2c 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <setYellow+0x7c>)
 8000918:	f001 fc27 	bl	800216a <HAL_GPIO_WritePin>
			break;
 800091c:	e020      	b.n	8000960 <setYellow+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	4812      	ldr	r0, [pc, #72]	; (800096c <setYellow+0x7c>)
 8000924:	f001 fc21 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2110      	movs	r1, #16
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <setYellow+0x7c>)
 800092e:	f001 fc1c 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000932:	e015      	b.n	8000960 <setYellow+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <setYellow+0x78>)
 800093c:	f001 fc15 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2108      	movs	r1, #8
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <setYellow+0x7c>)
 8000946:	f001 fc10 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <setYellow+0x7c>)
 8000950:	f001 fc0b 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2110      	movs	r1, #16
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <setYellow+0x7c>)
 800095a:	f001 fc06 	bl	800216a <HAL_GPIO_WritePin>

			break;
 800095e:	bf00      	nop
	}
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010800 	.word	0x40010800
 800096c:	40010c00 	.word	0x40010c00

08000970 <setGreen>:

void setGreen(int index){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	switch(index){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <setGreen+0x16>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d00c      	beq.n	800099e <setGreen+0x2e>
 8000984:	e016      	b.n	80009b4 <setGreen+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4816      	ldr	r0, [pc, #88]	; (80009e8 <setGreen+0x78>)
 800098e:	f001 fbec 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <setGreen+0x7c>)
 8000998:	f001 fbe7 	bl	800216a <HAL_GPIO_WritePin>
			break;
 800099c:	e020      	b.n	80009e0 <setGreen+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2120      	movs	r1, #32
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <setGreen+0x7c>)
 80009a4:	f001 fbe1 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <setGreen+0x7c>)
 80009ae:	f001 fbdc 	bl	800216a <HAL_GPIO_WritePin>
			break;
 80009b2:	e015      	b.n	80009e0 <setGreen+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <setGreen+0x78>)
 80009bc:	f001 fbd5 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2108      	movs	r1, #8
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <setGreen+0x7c>)
 80009c6:	f001 fbd0 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2120      	movs	r1, #32
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <setGreen+0x7c>)
 80009d0:	f001 fbcb 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <setGreen+0x7c>)
 80009da:	f001 fbc6 	bl	800216a <HAL_GPIO_WritePin>

			break;
 80009de:	bf00      	nop
	}
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010800 	.word	0x40010800
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <setPedestrian>:
/*
 * @param: value
 * 			0:	RED
 * 			1: 	GREEN
 */
void setPedestrian(int value){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	switch(value){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <setPedestrian+0x16>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d00d      	beq.n	8000a20 <setPedestrian+0x30>
 8000a04:	e019      	b.n	8000a3a <setPedestrian+0x4a>
		case 0:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <setPedestrian+0x6c>)
 8000a0e:	f001 fbac 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <setPedestrian+0x70>)
 8000a1a:	f001 fba6 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000a1e:	e019      	b.n	8000a54 <setPedestrian+0x64>
		case 1:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <setPedestrian+0x6c>)
 8000a28:	f001 fb9f 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <setPedestrian+0x70>)
 8000a34:	f001 fb99 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000a38:	e00c      	b.n	8000a54 <setPedestrian+0x64>
		default:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <setPedestrian+0x6c>)
 8000a42:	f001 fb92 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <setPedestrian+0x70>)
 8000a4e:	f001 fb8c 	bl	800216a <HAL_GPIO_WritePin>

			break;
 8000a52:	bf00      	nop
	}
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	40010800 	.word	0x40010800

08000a64 <clearLED>:

void clearLED(int index){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	switch(index){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <clearLED+0x16>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d00c      	beq.n	8000a92 <clearLED+0x2e>
 8000a78:	e016      	b.n	8000aa8 <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4816      	ldr	r0, [pc, #88]	; (8000adc <clearLED+0x78>)
 8000a82:	f001 fb72 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <clearLED+0x7c>)
 8000a8c:	f001 fb6d 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000a90:	e020      	b.n	8000ad4 <clearLED+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <clearLED+0x7c>)
 8000a98:	f001 fb67 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <clearLED+0x7c>)
 8000aa2:	f001 fb62 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000aa6:	e015      	b.n	8000ad4 <clearLED+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <clearLED+0x78>)
 8000ab0:	f001 fb5b 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <clearLED+0x7c>)
 8000aba:	f001 fb56 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <clearLED+0x7c>)
 8000ac4:	f001 fb51 	bl	800216a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <clearLED+0x7c>)
 8000ace:	f001 fb4c 	bl	800216a <HAL_GPIO_WritePin>


			break;
 8000ad2:	bf00      	nop
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <sendingUART>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendingUART(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <sendingUART+0x98>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d043      	beq.n	8000b78 <sendingUART+0x94>
		if(!timer3_flag){
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <sendingUART+0x9c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10f      	bne.n	8000b18 <sendingUART+0x34>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#", timer3_counter), 1000);
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <sendingUART+0xa0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4922      	ldr	r1, [pc, #136]	; (8000b88 <sendingUART+0xa4>)
 8000b00:	4822      	ldr	r0, [pc, #136]	; (8000b8c <sendingUART+0xa8>)
 8000b02:	f003 fbcd 	bl	80042a0 <siprintf>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	491f      	ldr	r1, [pc, #124]	; (8000b8c <sendingUART+0xa8>)
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <sendingUART+0xac>)
 8000b12:	f002 ff08 	bl	8003926 <HAL_UART_Transmit>
 8000b16:	e00b      	b.n	8000b30 <sendingUART+0x4c>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#"), 1000);
 8000b18:	491e      	ldr	r1, [pc, #120]	; (8000b94 <sendingUART+0xb0>)
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <sendingUART+0xa8>)
 8000b1c:	f003 fbc0 	bl	80042a0 <siprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	4918      	ldr	r1, [pc, #96]	; (8000b8c <sendingUART+0xa8>)
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <sendingUART+0xac>)
 8000b2c:	f002 fefb 	bl	8003926 <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <sendingUART+0xb4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10f      	bne.n	8000b58 <sendingUART+0x74>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#", timer4_counter), 1000);
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <sendingUART+0xb8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4918      	ldr	r1, [pc, #96]	; (8000ba0 <sendingUART+0xbc>)
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <sendingUART+0xa8>)
 8000b42:	f003 fbad 	bl	80042a0 <siprintf>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	490f      	ldr	r1, [pc, #60]	; (8000b8c <sendingUART+0xa8>)
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <sendingUART+0xac>)
 8000b52:	f002 fee8 	bl	8003926 <HAL_UART_Transmit>
 8000b56:	e00b      	b.n	8000b70 <sendingUART+0x8c>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#"), 1000);
 8000b58:	4912      	ldr	r1, [pc, #72]	; (8000ba4 <sendingUART+0xc0>)
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <sendingUART+0xa8>)
 8000b5c:	f003 fba0 	bl	80042a0 <siprintf>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	4908      	ldr	r1, [pc, #32]	; (8000b8c <sendingUART+0xa8>)
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <sendingUART+0xac>)
 8000b6c:	f002 fedb 	bl	8003926 <HAL_UART_Transmit>
		}
		setTimer2(1000);
 8000b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b74:	f000 fce6 	bl	8001544 <setTimer2>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000120 	.word	0x20000120
 8000b80:	20000128 	.word	0x20000128
 8000b84:	2000012c 	.word	0x2000012c
 8000b88:	08004b2c 	.word	0x08004b2c
 8000b8c:	200000f0 	.word	0x200000f0
 8000b90:	200001dc 	.word	0x200001dc
 8000b94:	08004b40 	.word	0x08004b40
 8000b98:	20000130 	.word	0x20000130
 8000b9c:	20000134 	.word	0x20000134
 8000ba0:	08004b54 	.word	0x08004b54
 8000ba4:	08004b68 	.word	0x08004b68

08000ba8 <Buzzer>:

void Buzzer(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	if(status_pedestrian != -1){
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <Buzzer+0x6c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d027      	beq.n	8000c06 <Buzzer+0x5e>
		if(timer5_flag){
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <Buzzer+0x70>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d023      	beq.n	8000c06 <Buzzer+0x5e>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <Buzzer+0x74>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <Buzzer+0x78>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34
			buzzer_freq += 40;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <Buzzer+0x74>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3328      	adds	r3, #40	; 0x28
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <Buzzer+0x74>)
 8000bd0:	6013      	str	r3, [r2, #0]
			buzzer_time -= 40;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <Buzzer+0x7c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3b28      	subs	r3, #40	; 0x28
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <Buzzer+0x7c>)
 8000bda:	6013      	str	r3, [r2, #0]

			if(buzzer_freq >= 1000) buzzer_freq = 1000;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <Buzzer+0x74>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be4:	db03      	blt.n	8000bee <Buzzer+0x46>
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <Buzzer+0x74>)
 8000be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bec:	601a      	str	r2, [r3, #0]
			if(buzzer_time <= 100)	buzzer_time = 100;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <Buzzer+0x7c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b64      	cmp	r3, #100	; 0x64
 8000bf4:	dc02      	bgt.n	8000bfc <Buzzer+0x54>
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <Buzzer+0x7c>)
 8000bf8:	2264      	movs	r2, #100	; 0x64
 8000bfa:	601a      	str	r2, [r3, #0]
			setTimer5(buzzer_time);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <Buzzer+0x7c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fcf3 	bl	80015ec <setTimer5>
		}
	}
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <Buzzer+0x78>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000138 	.word	0x20000138
 8000c1c:	20000114 	.word	0x20000114
 8000c20:	2000014c 	.word	0x2000014c
 8000c24:	20000110 	.word	0x20000110

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 fee2 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f844 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 f970 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c38:	f000 f882 	bl	8000d40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c3c:	f000 f8cc 	bl	8000dd8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f940 	bl	8000ec4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <main+0x74>)
 8000c46:	f001 ff13 	bl	8002a70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <main+0x78>)
 8000c4e:	f001 ffb9 	bl	8002bc4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 8000c52:	220a      	movs	r2, #10
 8000c54:	2100      	movs	r1, #0
 8000c56:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <main+0x7c>)
 8000c58:	f000 f9e8 	bl	800102c <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8000c5c:	220a      	movs	r2, #10
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <main+0x80>)
 8000c62:	f000 f9e3 	bl	800102c <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000c66:	220a      	movs	r2, #10
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4810      	ldr	r0, [pc, #64]	; (8000cac <main+0x84>)
 8000c6c:	f000 f9de 	bl	800102c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000c70:	220a      	movs	r2, #10
 8000c72:	2100      	movs	r1, #0
 8000c74:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <main+0x88>)
 8000c76:	f000 f9d9 	bl	800102c <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 8000c7a:	220a      	movs	r2, #10
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <main+0x8c>)
 8000c80:	f000 f9d4 	bl	800102c <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 8000c84:	220a      	movs	r2, #10
 8000c86:	2100      	movs	r1, #0
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <main+0x90>)
 8000c8a:	f000 f9cf 	bl	800102c <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000c8e:	f000 fc27 	bl	80014e0 <SCH_Dispatch_Tasks>
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1000);
//	  HAL_Delay(1000);

	  sendingUART();
 8000c92:	f7ff ff27 	bl	8000ae4 <sendingUART>
	  Buzzer();
 8000c96:	f7ff ff87 	bl	8000ba8 <Buzzer>
	  SCH_Dispatch_Tasks();
 8000c9a:	e7f8      	b.n	8000c8e <main+0x66>
 8000c9c:	20000194 	.word	0x20000194
 8000ca0:	2000014c 	.word	0x2000014c
 8000ca4:	08001625 	.word	0x08001625
 8000ca8:	080001f5 	.word	0x080001f5
 8000cac:	08000389 	.word	0x08000389
 8000cb0:	080005b1 	.word	0x080005b1
 8000cb4:	0800066d 	.word	0x0800066d
 8000cb8:	080005bd 	.word	0x080005bd

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fae0 	bl	8004290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	2302      	movs	r3, #2
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cf2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fa4d 	bl	800219c <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d08:	f000 f98a 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fcb8 	bl	800269c <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d32:	f000 f975 	bl	8001020 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3740      	adds	r7, #64	; 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d74:	224f      	movs	r2, #79	; 0x4f
 8000d76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d86:	f001 fe23 	bl	80029d0 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d90:	f000 f946 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000da2:	f002 f977 	bl	8003094 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dac:	f000 f938 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000dbe:	f002 fcf5 	bl	80037ac <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 f92a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000194 	.word	0x20000194

08000dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ec0 <MX_TIM3_Init+0xe8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e10:	223f      	movs	r2, #63	; 0x3f
 8000e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e30:	f001 fdce 	bl	80029d0 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f000 f8f1 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e4c:	f002 f922 	bl	8003094 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 f8e3 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e5c:	f001 fe5a 	bl	8002b14 <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e66:	f000 f8db 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e7a:	f002 fc97 	bl	80037ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f000 f8cc 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000ea0:	f002 f83a 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f000 f8b9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000eb0:	f000 fc7e 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000014c 	.word	0x2000014c
 8000ec0:	40000400 	.word	0x40000400

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART2_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000efc:	f002 fcc6 	bl	800388c <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f000 f88b 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001dc 	.word	0x200001dc
 8000f14:	40004400 	.word	0x40004400

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a33      	ldr	r2, [pc, #204]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <MX_GPIO_Init+0xe8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f62:	4828      	ldr	r0, [pc, #160]	; (8001004 <MX_GPIO_Init+0xec>)
 8000f64:	f001 f901 	bl	800216a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f6e:	4826      	ldr	r0, [pc, #152]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f70:	f001 f8fb 	bl	800216a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 8000f74:	2303      	movs	r3, #3
 8000f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f88:	f000 ff54 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	481a      	ldr	r0, [pc, #104]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000fa0:	f000 ff48 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_GPIO_Init+0xec>)
 8000fb8:	f000 ff3c 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 8000fbc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <MX_GPIO_Init+0xec>)
 8000fd6:	f000 ff2d 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 8000fda:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000ff4:	f000 ff1e 	bl	8001e34 <HAL_GPIO_Init>

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40010800 	.word	0x40010800

0800100c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001014:	f000 fa2c 	bl	8001470 <SCH_Update>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 800102c:	b4b0      	push	{r4, r5, r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <SCH_Add_Task+0x24c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b1d      	cmp	r3, #29
 800103e:	f300 81bd 	bgt.w	80013bc <SCH_Add_Task+0x390>

        if(len == 0){
 8001042:	4b8d      	ldr	r3, [pc, #564]	; (8001278 <SCH_Add_Task+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d118      	bne.n	800107c <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 800104a:	4a8c      	ldr	r2, [pc, #560]	; (800127c <SCH_Add_Task+0x250>)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4a8b      	ldr	r2, [pc, #556]	; (8001280 <SCH_Add_Task+0x254>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	4a88      	ldr	r2, [pc, #544]	; (800127c <SCH_Add_Task+0x250>)
 800105c:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a87      	ldr	r2, [pc, #540]	; (8001280 <SCH_Add_Task+0x254>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	461a      	mov	r2, r3
 800106a:	4b84      	ldr	r3, [pc, #528]	; (800127c <SCH_Add_Task+0x250>)
 800106c:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 800106e:	4b83      	ldr	r3, [pc, #524]	; (800127c <SCH_Add_Task+0x250>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 8001074:	4b83      	ldr	r3, [pc, #524]	; (8001284 <SCH_Add_Task+0x258>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e196      	b.n	80013aa <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 800107c:	4b81      	ldr	r3, [pc, #516]	; (8001284 <SCH_Add_Task+0x258>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	497e      	ldr	r1, [pc, #504]	; (800127c <SCH_Add_Task+0x250>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3304      	adds	r3, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	f0c0 80ba 	bcc.w	800120c <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 8001098:	4b7a      	ldr	r3, [pc, #488]	; (8001284 <SCH_Add_Task+0x258>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e002      	b.n	80010a6 <SCH_Add_Task+0x7a>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <SCH_Add_Task+0x25c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	da0f      	bge.n	80010d0 <SCH_Add_Task+0xa4>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4a73      	ldr	r2, [pc, #460]	; (8001280 <SCH_Add_Task+0x254>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	08d9      	lsrs	r1, r3, #3
 80010ba:	4870      	ldr	r0, [pc, #448]	; (800127c <SCH_Add_Task+0x250>)
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4403      	add	r3, r0
 80010c8:	3304      	adds	r3, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d2e7      	bcs.n	80010a0 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 80010d0:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <SCH_Add_Task+0x25c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d144      	bne.n	8001164 <SCH_Add_Task+0x138>
 80010da:	4968      	ldr	r1, [pc, #416]	; (800127c <SCH_Add_Task+0x250>)
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3304      	adds	r3, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d338      	bcc.n	8001164 <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	4961      	ldr	r1, [pc, #388]	; (800127c <SCH_Add_Task+0x250>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	495c      	ldr	r1, [pc, #368]	; (8001280 <SCH_Add_Task+0x254>)
 800110e:	fba1 1303 	umull	r1, r3, r1, r3
 8001112:	08d9      	lsrs	r1, r3, #3
 8001114:	4859      	ldr	r0, [pc, #356]	; (800127c <SCH_Add_Task+0x250>)
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4403      	add	r3, r0
 8001120:	3304      	adds	r3, #4
 8001122:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a56      	ldr	r2, [pc, #344]	; (8001280 <SCH_Add_Task+0x254>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	08d9      	lsrs	r1, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	4608      	mov	r0, r1
 8001134:	4951      	ldr	r1, [pc, #324]	; (800127c <SCH_Add_Task+0x250>)
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3308      	adds	r3, #8
 8001142:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	494c      	ldr	r1, [pc, #304]	; (800127c <SCH_Add_Task+0x250>)
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	330c      	adds	r3, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <SCH_Add_Task+0x25c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a49      	ldr	r2, [pc, #292]	; (8001284 <SCH_Add_Task+0x258>)
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e122      	b.n	80013aa <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 8001164:	4b44      	ldr	r3, [pc, #272]	; (8001278 <SCH_Add_Task+0x24c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e017      	b.n	800119c <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	4842      	ldr	r0, [pc, #264]	; (800127c <SCH_Add_Task+0x250>)
 8001172:	6939      	ldr	r1, [r7, #16]
 8001174:	460b      	mov	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4418      	add	r0, r3
 800117e:	493f      	ldr	r1, [pc, #252]	; (800127c <SCH_Add_Task+0x250>)
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	4604      	mov	r4, r0
 800118c:	461d      	mov	r5, r3
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	3b01      	subs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dce3      	bgt.n	800116c <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <SCH_Add_Task+0x250>)
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	4a31      	ldr	r2, [pc, #196]	; (8001280 <SCH_Add_Task+0x254>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	08d9      	lsrs	r1, r3, #3
 80011c0:	482e      	ldr	r0, [pc, #184]	; (800127c <SCH_Add_Task+0x250>)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4403      	add	r3, r0
 80011ce:	3304      	adds	r3, #4
 80011d0:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <SCH_Add_Task+0x254>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	4927      	ldr	r1, [pc, #156]	; (800127c <SCH_Add_Task+0x250>)
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3308      	adds	r3, #8
 80011ee:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 80011f0:	4922      	ldr	r1, [pc, #136]	; (800127c <SCH_Add_Task+0x250>)
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	330c      	adds	r3, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 8001204:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <SCH_Add_Task+0x258>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e0ce      	b.n	80013aa <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <SCH_Add_Task+0x258>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e002      	b.n	800121a <SCH_Add_Task+0x1ee>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3b01      	subs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <SCH_Add_Task+0x260>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	dd0f      	ble.n	8001244 <SCH_Add_Task+0x218>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <SCH_Add_Task+0x254>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	08d9      	lsrs	r1, r3, #3
 800122e:	4813      	ldr	r0, [pc, #76]	; (800127c <SCH_Add_Task+0x250>)
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4403      	add	r3, r0
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4299      	cmp	r1, r3
 8001242:	d3e7      	bcc.n	8001214 <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <SCH_Add_Task+0x260>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	429a      	cmp	r2, r3
 800124c:	d156      	bne.n	80012fc <SCH_Add_Task+0x2d0>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SCH_Add_Task+0x254>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	08d9      	lsrs	r1, r3, #3
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <SCH_Add_Task+0x250>)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4403      	add	r3, r0
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4299      	cmp	r1, r3
 800126c:	d246      	bcs.n	80012fc <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 800126e:	4b02      	ldr	r3, [pc, #8]	; (8001278 <SCH_Add_Task+0x24c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	e024      	b.n	80012c0 <SCH_Add_Task+0x294>
 8001276:	bf00      	nop
 8001278:	20000484 	.word	0x20000484
 800127c:	2000022c 	.word	0x2000022c
 8001280:	cccccccd 	.word	0xcccccccd
 8001284:	20000228 	.word	0x20000228
 8001288:	20000220 	.word	0x20000220
 800128c:	20000224 	.word	0x20000224
                        sTask[j] = sTask[j-1];
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	484c      	ldr	r0, [pc, #304]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4418      	add	r0, r3
 80012a2:	4949      	ldr	r1, [pc, #292]	; (80013c8 <SCH_Add_Task+0x39c>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	4604      	mov	r4, r0
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	3b01      	subs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b42      	ldr	r3, [pc, #264]	; (80013cc <SCH_Add_Task+0x3a0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dce2      	bgt.n	8001290 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 80012ca:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <SCH_Add_Task+0x39c>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <SCH_Add_Task+0x3a4>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <SCH_Add_Task+0x39c>)
 80012dc:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <SCH_Add_Task+0x3a4>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <SCH_Add_Task+0x39c>)
 80012ec:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 80012ee:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <SCH_Add_Task+0x39c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <SCH_Add_Task+0x3a8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e056      	b.n	80013aa <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <SCH_Add_Task+0x3ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	e017      	b.n	8001334 <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	482f      	ldr	r0, [pc, #188]	; (80013c8 <SCH_Add_Task+0x39c>)
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4418      	add	r0, r3
 8001316:	492c      	ldr	r1, [pc, #176]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	4604      	mov	r4, r0
 8001324:	461d      	mov	r5, r3
 8001326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132a:	682b      	ldr	r3, [r5, #0]
 800132c:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3b01      	subs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	429a      	cmp	r2, r3
 800133c:	dce2      	bgt.n	8001304 <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 8001344:	4920      	ldr	r1, [pc, #128]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <SCH_Add_Task+0x3a4>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	08d9      	lsrs	r1, r3, #3
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4403      	add	r3, r0
 800136e:	3304      	adds	r3, #4
 8001370:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <SCH_Add_Task+0x3a4>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	4618      	mov	r0, r3
 800137e:	4912      	ldr	r1, [pc, #72]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3308      	adds	r3, #8
 800138e:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <SCH_Add_Task+0x39c>)
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	330c      	adds	r3, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <SCH_Add_Task+0x3a8>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <SCH_Add_Task+0x3ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <SCH_Add_Task+0x3b0>)
 80013b0:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <SCH_Add_Task+0x3ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <SCH_Add_Task+0x3ac>)
 80013ba:	6013      	str	r3, [r2, #0]

	}

}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bcb0      	pop	{r4, r5, r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000022c 	.word	0x2000022c
 80013cc:	20000224 	.word	0x20000224
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	20000228 	.word	0x20000228
 80013d8:	20000484 	.word	0x20000484
 80013dc:	20000220 	.word	0x20000220

080013e0 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <SCH_Delete_Then_Add_Task+0x84>)
 80013e8:	463c      	mov	r4, r7
 80013ea:	461d      	mov	r5, r3
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e017      	b.n	800142a <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	4819      	ldr	r0, [pc, #100]	; (8001464 <SCH_Delete_Then_Add_Task+0x84>)
 8001400:	6979      	ldr	r1, [r7, #20]
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4418      	add	r0, r3
 800140c:	4915      	ldr	r1, [pc, #84]	; (8001464 <SCH_Delete_Then_Add_Task+0x84>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	4604      	mov	r4, r0
 800141a:	461d      	mov	r5, r3
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <SCH_Delete_Then_Add_Task+0x88>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	429a      	cmp	r2, r3
 8001434:	dbe1      	blt.n	80013fa <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <SCH_Delete_Then_Add_Task+0x88>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SCH_Delete_Then_Add_Task+0x88>)
 800143e:	6013      	str	r3, [r2, #0]
		tail -= 1;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <SCH_Delete_Then_Add_Task+0x8c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <SCH_Delete_Then_Add_Task+0x8c>)
 8001448:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 800144a:	6838      	ldr	r0, [r7, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fde9 	bl	800102c <SCH_Add_Task>

}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	bf00      	nop
 8001464:	2000022c 	.word	0x2000022c
 8001468:	20000484 	.word	0x20000484
 800146c:	20000220 	.word	0x20000220

08001470 <SCH_Update>:


void SCH_Update(void) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 800147a:	e015      	b.n	80014a8 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 800147c:	4916      	ldr	r1, [pc, #88]	; (80014d8 <SCH_Update+0x68>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	330c      	adds	r3, #12
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c59      	adds	r1, r3, #1
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <SCH_Update+0x68>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4403      	add	r3, r0
 800149e:	330c      	adds	r3, #12
 80014a0:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <SCH_Update+0x68>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <SCH_Update+0x6c>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	4293      	cmp	r3, r2
 80014c0:	d9dc      	bls.n	800147c <SCH_Update+0xc>
	}

	counter+=1;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <SCH_Update+0x6c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <SCH_Update+0x6c>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000022c 	.word	0x2000022c
 80014dc:	200000ec 	.word	0x200000ec

080014e0 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 80014e4:	e009      	b.n	80014fa <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <SCH_Dispatch_Tasks+0x28>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <SCH_Dispatch_Tasks+0x28>)
 80014ee:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SCH_Dispatch_Tasks+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 80014f6:	f7ff ff73 	bl	80013e0 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <SCH_Dispatch_Tasks+0x28>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f1      	bne.n	80014e6 <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000022c 	.word	0x2000022c

0800150c <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int time){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	timer1_counter = time/10;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <setTimer1+0x2c>)
 8001518:	fb82 1203 	smull	r1, r2, r2, r3
 800151c:	1092      	asrs	r2, r2, #2
 800151e:	17db      	asrs	r3, r3, #31
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <setTimer1+0x30>)
 8001524:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <setTimer1+0x34>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	66666667 	.word	0x66666667
 800153c:	2000011c 	.word	0x2000011c
 8001540:	20000118 	.word	0x20000118

08001544 <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int time){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	timer2_counter = time/10;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <setTimer2+0x2c>)
 8001550:	fb82 1203 	smull	r1, r2, r2, r3
 8001554:	1092      	asrs	r2, r2, #2
 8001556:	17db      	asrs	r3, r3, #31
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <setTimer2+0x30>)
 800155c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <setTimer2+0x34>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	66666667 	.word	0x66666667
 8001574:	20000124 	.word	0x20000124
 8001578:	20000120 	.word	0x20000120

0800157c <setTimer3>:
void clearTimer2(){
	timer2_counter = 0;
	timer2_flag = 0;
}

void setTimer3(int time){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	timer3_counter = time/10;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <setTimer3+0x2c>)
 8001588:	fb82 1203 	smull	r1, r2, r2, r3
 800158c:	1092      	asrs	r2, r2, #2
 800158e:	17db      	asrs	r3, r3, #31
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <setTimer3+0x30>)
 8001594:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <setTimer3+0x34>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	66666667 	.word	0x66666667
 80015ac:	2000012c 	.word	0x2000012c
 80015b0:	20000128 	.word	0x20000128

080015b4 <setTimer4>:
void clearTimer3(){
	timer3_counter = 0;
	timer3_flag = 0;
}

void setTimer4(int time){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	timer4_counter = time/10;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <setTimer4+0x2c>)
 80015c0:	fb82 1203 	smull	r1, r2, r2, r3
 80015c4:	1092      	asrs	r2, r2, #2
 80015c6:	17db      	asrs	r3, r3, #31
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <setTimer4+0x30>)
 80015cc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <setTimer4+0x34>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	66666667 	.word	0x66666667
 80015e4:	20000134 	.word	0x20000134
 80015e8:	20000130 	.word	0x20000130

080015ec <setTimer5>:
void clearTimer4(){
	timer4_counter = 0;
	timer4_flag = 0;
}

void setTimer5(int time){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	timer5_counter = time/10;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <setTimer5+0x2c>)
 80015f8:	fb82 1203 	smull	r1, r2, r2, r3
 80015fc:	1092      	asrs	r2, r2, #2
 80015fe:	17db      	asrs	r3, r3, #31
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <setTimer5+0x30>)
 8001604:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <setTimer5+0x34>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	66666667 	.word	0x66666667
 800161c:	2000013c 	.word	0x2000013c
 8001620:	20000138 	.word	0x20000138

08001624 <TimerRun>:
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 0;
}

void TimerRun(){
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <TimerRun+0x90>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd05      	ble.n	800163c <TimerRun+0x18>
		timer1_counter -= 1;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <TimerRun+0x90>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <TimerRun+0x90>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e002      	b.n	8001642 <TimerRun+0x1e>
	}
	else{
		timer1_flag = 1;
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <TimerRun+0x94>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <TimerRun+0x98>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd05      	ble.n	8001656 <TimerRun+0x32>
		timer2_counter -= 1;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <TimerRun+0x98>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <TimerRun+0x98>)
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e002      	b.n	800165c <TimerRun+0x38>
	}
	else{
		timer2_flag = 1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <TimerRun+0x9c>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <TimerRun+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd05      	ble.n	8001670 <TimerRun+0x4c>
		timer3_counter -= 1;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <TimerRun+0xa0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <TimerRun+0xa0>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e002      	b.n	8001676 <TimerRun+0x52>
	}
	else{
		timer3_flag = 1;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <TimerRun+0xa4>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <TimerRun+0xa8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dd05      	ble.n	800168a <TimerRun+0x66>
		timer4_counter -= 1;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <TimerRun+0xa8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	4a11      	ldr	r2, [pc, #68]	; (80016cc <TimerRun+0xa8>)
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e002      	b.n	8001690 <TimerRun+0x6c>
	}
	else{
		timer4_flag = 1;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <TimerRun+0xac>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <TimerRun+0xb0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd05      	ble.n	80016a4 <TimerRun+0x80>
		timer5_counter -= 1;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <TimerRun+0xb0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <TimerRun+0xb0>)
 80016a0:	6013      	str	r3, [r2, #0]
	}
	else{
		timer5_flag = 1;
	}
}
 80016a2:	e002      	b.n	80016aa <TimerRun+0x86>
		timer5_flag = 1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <TimerRun+0xb4>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000011c 	.word	0x2000011c
 80016b8:	20000118 	.word	0x20000118
 80016bc:	20000124 	.word	0x20000124
 80016c0:	20000120 	.word	0x20000120
 80016c4:	2000012c 	.word	0x2000012c
 80016c8:	20000128 	.word	0x20000128
 80016cc:	20000134 	.word	0x20000134
 80016d0:	20000130 	.word	0x20000130
 80016d4:	2000013c 	.word	0x2000013c
 80016d8:	20000138 	.word	0x20000138

080016dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_MspInit+0x5c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_MspInit+0x5c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x5c>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x5c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_MspInit+0x60>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_MspInit+0x60>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d114      	bne.n	800177c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f000 fa79 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f000 fa92 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800177a:	e010      	b.n	800179e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x6c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10b      	bne.n	800179e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_TIM_Base_MspInit+0x68>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40000400 	.word	0x40000400

080017b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_TIM_MspPostInit+0x58>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d117      	bne.n	8001800 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x5c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_TIM_MspPostInit+0x5c>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_TIM_MspPostInit+0x5c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_TIM_MspPostInit+0x60>)
 80017fc:	f000 fb1a 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40000400 	.word	0x40000400
 800180c:	40021000 	.word	0x40021000
 8001810:	40010800 	.word	0x40010800

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <HAL_UART_MspInit+0x98>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d137      	bne.n	80018a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 800183a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183e:	61d3      	str	r3, [r2, #28]
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001864:	2304      	movs	r3, #4
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	480f      	ldr	r0, [pc, #60]	; (80018b4 <HAL_UART_MspInit+0xa0>)
 8001878:	f000 fadc 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800187c:	2308      	movs	r3, #8
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_UART_MspInit+0xa0>)
 8001890:	f000 fad0 	bl	8001e34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2026      	movs	r0, #38	; 0x26
 800189a:	f000 f9e4 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189e:	2026      	movs	r0, #38	; 0x26
 80018a0:	f000 f9fd 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f8bf 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM2_IRQHandler+0x10>)
 800190e:	f001 f9fb 	bl	8002d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000194 	.word	0x20000194

0800191c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <USART2_IRQHandler+0x10>)
 8001922:	f002 f893 	bl	8003a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001dc 	.word	0x200001dc

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f002 fc6c 	bl	800423c <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20005000 	.word	0x20005000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000140 	.word	0x20000140
 8001998:	200004a0 	.word	0x200004a0

0800199c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <Reset_Handler>:
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopFillZerobss+0x1a>)
 80019ae:	2300      	movs	r3, #0
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:
 80019b2:	58d4      	ldr	r4, [r2, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:
 80019b8:	18c4      	adds	r4, r0, r3
 80019ba:	428c      	cmp	r4, r1
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopFillZerobss+0x1e>)
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopFillZerobss+0x22>)
 80019c2:	2300      	movs	r3, #0
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:
 80019ca:	42a2      	cmp	r2, r4
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>
 80019ce:	f7ff ffe5 	bl	800199c <SystemInit>
 80019d2:	f002 fc39 	bl	8004248 <__libc_init_array>
 80019d6:	f7ff f927 	bl	8000c28 <main>
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000094 	.word	0x20000094
 80019e4:	08004be0 	.word	0x08004be0
 80019e8:	20000094 	.word	0x20000094
 80019ec:	2000049c 	.word	0x2000049c

080019f0 <ADC1_2_IRQHandler>:
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f923 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fe64 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f93b 	bl	8001cba <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 f903 	bl	8001c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000024 	.word	0x20000024
 8001a78:	2000002c 	.word	0x2000002c
 8001a7c:	20000028 	.word	0x20000028

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	2000002c 	.word	0x2000002c
 8001aa0:	20000488 	.word	0x20000488

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000488 	.word	0x20000488

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <__NVIC_EnableIRQ+0x34>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f7ff ff90 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff2d 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff42 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff90 	bl	8001ba8 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5f 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff35 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffa2 	bl	8001c0c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2204      	movs	r2, #4
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e020      	b.n	8001d3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 020e 	bic.w	r2, r2, #14
 8001d08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d005      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e051      	b.n	8001e0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020e 	bic.w	r2, r2, #14
 8001d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_DMA_Abort_IT+0xd0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d029      	beq.n	8001de8 <HAL_DMA_Abort_IT+0xa0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <HAL_DMA_Abort_IT+0xd4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d022      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x9c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_DMA_Abort_IT+0xd8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01a      	beq.n	8001dde <HAL_DMA_Abort_IT+0x96>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_DMA_Abort_IT+0xdc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d012      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x90>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_DMA_Abort_IT+0xe0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00a      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x8a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_DMA_Abort_IT+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d102      	bne.n	8001dcc <HAL_DMA_Abort_IT+0x84>
 8001dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dca:	e00e      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd0:	e00b      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd6:	e008      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ddc:	e005      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de2:	e002      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001de4:	2310      	movs	r3, #16
 8001de6:	e000      	b.n	8001dea <HAL_DMA_Abort_IT+0xa2>
 8001de8:	2301      	movs	r3, #1
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_DMA_Abort_IT+0xe8>)
 8001dec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
    } 
  }
  return status;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40020008 	.word	0x40020008
 8001e1c:	4002001c 	.word	0x4002001c
 8001e20:	40020030 	.word	0x40020030
 8001e24:	40020044 	.word	0x40020044
 8001e28:	40020058 	.word	0x40020058
 8001e2c:	4002006c 	.word	0x4002006c
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b08b      	sub	sp, #44	; 0x2c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e46:	e169      	b.n	800211c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8158 	bne.w	8002116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a9a      	ldr	r2, [pc, #616]	; (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d05e      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e70:	4a98      	ldr	r2, [pc, #608]	; (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d875      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e76:	4a98      	ldr	r2, [pc, #608]	; (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d058      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e7c:	4a96      	ldr	r2, [pc, #600]	; (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d86f      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e82:	4a96      	ldr	r2, [pc, #600]	; (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d052      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e88:	4a94      	ldr	r2, [pc, #592]	; (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d869      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e8e:	4a94      	ldr	r2, [pc, #592]	; (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04c      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e94:	4a92      	ldr	r2, [pc, #584]	; (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d863      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a92      	ldr	r2, [pc, #584]	; (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d046      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a90      	ldr	r2, [pc, #576]	; (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d85d      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d82a      	bhi.n	8001f00 <HAL_GPIO_Init+0xcc>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d859      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <HAL_GPIO_Init+0x80>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f1b 	.word	0x08001f1b
 8001ec0:	08001f5d 	.word	0x08001f5d
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f63 	.word	0x08001f63
 8001ecc:	08001f63 	.word	0x08001f63
 8001ed0:	08001f63 	.word	0x08001f63
 8001ed4:	08001f63 	.word	0x08001f63
 8001ed8:	08001f63 	.word	0x08001f63
 8001edc:	08001f63 	.word	0x08001f63
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f63 	.word	0x08001f63
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f63 	.word	0x08001f63
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f63 	.word	0x08001f63
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f25 	.word	0x08001f25
 8001f00:	4a79      	ldr	r2, [pc, #484]	; (80020e8 <HAL_GPIO_Init+0x2b4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f06:	e02c      	b.n	8001f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e029      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	3304      	adds	r3, #4
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e024      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e01f      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e01a      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f36:	2304      	movs	r3, #4
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e013      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f44:	2308      	movs	r3, #8
 8001f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	611a      	str	r2, [r3, #16]
          break;
 8001f4e:	e009      	b.n	8001f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	615a      	str	r2, [r3, #20]
          break;
 8001f5a:	e003      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          break;
 8001f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	; 0xff
 8001f68:	d801      	bhi.n	8001f6e <HAL_GPIO_Init+0x13a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_Init+0x13e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	; 0xff
 8001f78:	d802      	bhi.n	8001f80 <HAL_GPIO_Init+0x14c>
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x152>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3b08      	subs	r3, #8
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80b1 	beq.w	8002116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <HAL_GPIO_Init+0x2bc>)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <HAL_GPIO_Init+0x2c0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1ec>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1e8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3e      	ldr	r2, [pc, #248]	; (80020fc <HAL_GPIO_Init+0x2c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1e4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3d      	ldr	r2, [pc, #244]	; (8002100 <HAL_GPIO_Init+0x2cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1e0>
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002014:	2304      	movs	r3, #4
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002020:	2300      	movs	r3, #0
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002032:	492f      	ldr	r1, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x2bc>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	492c      	ldr	r1, [pc, #176]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4928      	ldr	r1, [pc, #160]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4922      	ldr	r1, [pc, #136]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	491e      	ldr	r1, [pc, #120]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4918      	ldr	r1, [pc, #96]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4914      	ldr	r1, [pc, #80]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d021      	beq.n	8002108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
 80020d0:	e021      	b.n	8002116 <HAL_GPIO_Init+0x2e2>
 80020d2:	bf00      	nop
 80020d4:	10320000 	.word	0x10320000
 80020d8:	10310000 	.word	0x10310000
 80020dc:	10220000 	.word	0x10220000
 80020e0:	10210000 	.word	0x10210000
 80020e4:	10120000 	.word	0x10120000
 80020e8:	10110000 	.word	0x10110000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40011000 	.word	0x40011000
 8002100:	40011400 	.word	0x40011400
 8002104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_GPIO_Init+0x304>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	43db      	mvns	r3, r3
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <HAL_GPIO_Init+0x304>)
 8002112:	4013      	ands	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f ae8e 	bne.w	8001e48 <HAL_GPIO_Init+0x14>
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	372c      	adds	r7, #44	; 0x2c
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e001      	b.n	800215e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
 8002176:	4613      	mov	r3, r2
 8002178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002186:	e003      	b.n	8002190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e26c      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c8:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e246      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7f      	ldr	r2, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7a      	ldr	r2, [pc, #488]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b78      	ldr	r3, [pc, #480]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6e      	ldr	r2, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fc14 	bl	8001aa4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fc10 	bl	8001aa4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1fa      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc00 	bl	8001aa4 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fbfc 	bl	8001aa4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1e6      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d6:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1ba      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4939      	ldr	r1, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fbb5 	bl	8001aa4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fbb1 	bl	8001aa4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e19b      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4927      	ldr	r1, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fb94 	bl	8001aa4 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fb90 	bl	8001aa4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e17a      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03a      	beq.n	8002420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fb74 	bl	8001aa4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fb70 	bl	8001aa4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e15a      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 fad8 	bl	8002994 <RCC_Delay>
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fb5a 	bl	8001aa4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fb56 	bl	8001aa4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d908      	bls.n	8002414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e140      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420000 	.word	0x42420000
 8002410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b9e      	ldr	r3, [pc, #632]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e9      	bne.n	80023f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a6 	beq.w	800257a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b97      	ldr	r3, [pc, #604]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b94      	ldr	r3, [pc, #592]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a93      	ldr	r2, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b91      	ldr	r3, [pc, #580]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b8b      	ldr	r3, [pc, #556]	; (8002694 <HAL_RCC_OscConfig+0x4f8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a8a      	ldr	r2, [pc, #552]	; (8002694 <HAL_RCC_OscConfig+0x4f8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb17 	bl	8001aa4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff fb13 	bl	8001aa4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0fd      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x4f8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x312>
 80024a0:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e02d      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a75      	ldr	r2, [pc, #468]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a72      	ldr	r2, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x356>
 80024d8:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a6c      	ldr	r2, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a69      	ldr	r2, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a66      	ldr	r2, [pc, #408]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fac7 	bl	8001aa4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fac3 	bl	8001aa4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0ab      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fab1 	bl	8001aa4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff faad 	bl	8001aa4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e095      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a47      	ldr	r2, [pc, #284]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8081 	beq.w	8002686 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d061      	beq.n	8002654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d146      	bne.n	8002626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_OscConfig+0x4fc>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fa81 	bl	8001aa4 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff fa7d 	bl	8001aa4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e067      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	492d      	ldr	r1, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a19      	ldr	r1, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	430b      	orrs	r3, r1
 80025f2:	4927      	ldr	r1, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x4fc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fa51 	bl	8001aa4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fa4d 	bl	8001aa4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e037      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x46a>
 8002624:	e02f      	b.n	8002686 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_RCC_OscConfig+0x4fc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fa3a 	bl	8001aa4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa36 	bl	8001aa4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e020      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x498>
 8002652:	e018      	b.n	8002686 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e013      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	42420060 	.word	0x42420060

0800269c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d0      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4965      	ldr	r1, [pc, #404]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0b8      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800271a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	494d      	ldr	r1, [pc, #308]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d040      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e07f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e073      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4936      	ldr	r1, [pc, #216]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7ff f98a 	bl	8001aa4 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7ff f986 	bl	8001aa4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e053      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d210      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e032      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4916      	ldr	r1, [pc, #88]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282a:	f000 f821 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	490a      	ldr	r1, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	fa22 f303 	lsr.w	r3, r2, r3
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1cc>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1d0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f8e8 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08004b8c 	.word	0x08004b8c
 8002868:	20000024 	.word	0x20000024
 800286c:	20000028 	.word	0x20000028

08002870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b490      	push	{r4, r7}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002878:	1d3c      	adds	r4, r7, #4
 800287a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002880:	f240 2301 	movw	r3, #513	; 0x201
 8002884:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x40>
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ae:	e02d      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b2:	623b      	str	r3, [r7, #32]
      break;
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028c2:	4413      	add	r3, r2
 80028c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0c5b      	lsrs	r3, r3, #17
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028e2:	4413      	add	r3, r2
 80028e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ee:	fb02 f203 	mul.w	r2, r2, r3
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e004      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	623b      	str	r3, [r7, #32]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	6a3b      	ldr	r3, [r7, #32]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc90      	pop	{r4, r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	08004b7c 	.word	0x08004b7c
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	003d0900 	.word	0x003d0900

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_RCC_GetHCLKFreq+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000024 	.word	0x20000024

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002948:	f7ff fff2 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08004b9c 	.word	0x08004b9c

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002970:	f7ff ffde 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08004b9c 	.word	0x08004b9c

08002994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCC_Delay+0x34>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <RCC_Delay+0x38>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b0:	bf00      	nop
  }
  while (Delay --);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <RCC_Delay+0x1c>
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000024 	.word	0x20000024
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fea2 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 fc28 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e03a      	b.n	8002afe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_TIM_Base_Start_IT+0x98>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d009      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_TIM_Base_Start_IT+0x9c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d010      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aea:	e007      	b.n	8002afc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800

08002b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e041      	b.n	8002baa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f839 	bl	8002bb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 fb86 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_TIM_PWM_Start+0x24>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e022      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d109      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x3e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e015      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x58>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e008      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e05e      	b.n	8002cf4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x82>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x92>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c54:	e00b      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start+0xa2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c64:	e003      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fd74 	bl	8003764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_TIM_PWM_Start+0x138>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_PWM_Start+0x138>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_TIM_PWM_Start+0x13c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <HAL_TIM_PWM_Start+0x140>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d010      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	e007      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800

08002d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa6f 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa62 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa71 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0204 	mvn.w	r2, #4
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa45 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa38 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa47 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0208 	mvn.w	r2, #8
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa1b 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa0e 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa1d 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2208      	movs	r2, #8
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9f1 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9e4 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9f3 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f8c0 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fce1 	bl	800387a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9b7 	bl	8003252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0220 	mvn.w	r2, #32
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcac 	bl	8003868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0ac      	b.n	800308c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	f200 809f 	bhi.w	8003080 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08003081 	.word	0x08003081
 8002f50:	08003081 	.word	0x08003081
 8002f54:	08003081 	.word	0x08003081
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	08003081 	.word	0x08003081
 8002f60:	08003081 	.word	0x08003081
 8002f64:	08003081 	.word	0x08003081
 8002f68:	08002fff 	.word	0x08002fff
 8002f6c:	08003081 	.word	0x08003081
 8002f70:	08003081 	.word	0x08003081
 8002f74:	08003081 	.word	0x08003081
 8002f78:	0800303f 	.word	0x0800303f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f9d0 	bl	8003328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
      break;
 8002fba:	e062      	b.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fa16 	bl	80033f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6999      	ldr	r1, [r3, #24]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]
      break;
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa5f 	bl	80034c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0208 	orr.w	r2, r2, #8
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0204 	bic.w	r2, r2, #4
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	61da      	str	r2, [r3, #28]
      break;
 800303c:	e021      	b.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 faa9 	bl	800359c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	61da      	str	r2, [r3, #28]
      break;
 800307e:	e000      	b.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003080:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x18>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0b3      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x180>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e4:	d03e      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0xd0>
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	f200 8087 	bhi.w	80031fc <HAL_TIM_ConfigClockSource+0x168>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f2:	f000 8085 	beq.w	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d87f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 80030fc:	2b70      	cmp	r3, #112	; 0x70
 80030fe:	d01a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xa2>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d87b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 8003104:	2b60      	cmp	r3, #96	; 0x60
 8003106:	d050      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x116>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d877      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 800310c:	2b50      	cmp	r3, #80	; 0x50
 800310e:	d03c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xf6>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d873      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d058      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x136>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d86f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d064      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x156>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d86b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d060      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x156>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d867      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05c      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x156>
 8003130:	2b10      	cmp	r3, #16
 8003132:	d05a      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003134:	e062      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f000 faee 	bl	8003726 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	609a      	str	r2, [r3, #8]
      break;
 8003162:	e04e      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f000 fad7 	bl	8003726 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003186:	609a      	str	r2, [r3, #8]
      break;
 8003188:	e03b      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	f000 fa4e 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2150      	movs	r1, #80	; 0x50
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 faa5 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e02b      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 fa6c 	bl	8003694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2160      	movs	r1, #96	; 0x60
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fa95 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e01b      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 fa2e 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fa85 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e00b      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 fa7c 	bl	80036f2 <TIM_ITRx_SetConfig>
        break;
 80031fa:	e002      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003200:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a29      	ldr	r2, [pc, #164]	; (800331c <TIM_Base_SetConfig+0xb8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <TIM_Base_SetConfig+0xbc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <TIM_Base_SetConfig+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <TIM_Base_SetConfig+0xb8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d007      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <TIM_Base_SetConfig+0xbc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <TIM_Base_SetConfig+0xc0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <TIM_Base_SetConfig+0xb8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <TIM_OC1_SetConfig+0xc8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10c      	bne.n	800339e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0308 	bic.w	r3, r3, #8
 800338a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <TIM_OC1_SetConfig+0xc8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d111      	bne.n	80033ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00

080033f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f023 0210 	bic.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0320 	bic.w	r3, r3, #32
 800343e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <TIM_OC2_SetConfig+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10d      	bne.n	8003470 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <TIM_OC2_SetConfig+0xd0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d113      	bne.n	80034a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800347e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40012c00 	.word	0x40012c00

080034c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <TIM_OC3_SetConfig+0xd0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10d      	bne.n	8003542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <TIM_OC3_SetConfig+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d113      	bne.n	8003572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	621a      	str	r2, [r3, #32]
}
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00

0800359c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	031b      	lsls	r3, r3, #12
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <TIM_OC4_SetConfig+0x98>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d109      	bne.n	8003610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00

08003638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 030a 	bic.w	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 0210 	bic.w	r2, r3, #16
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	031b      	lsls	r3, r3, #12
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	f043 0307 	orr.w	r3, r3, #7
 8003714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003740:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	609a      	str	r2, [r3, #8]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2201      	movs	r2, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e046      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d009      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800

08003868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e03f      	b.n	800391e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd ffae 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	; 0x24
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fc25 	bl	8004120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08a      	sub	sp, #40	; 0x28
 800392a:	af02      	add	r7, sp, #8
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	d17c      	bne.n	8003a40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Transmit+0x2c>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e075      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UART_Transmit+0x3e>
 8003960:	2302      	movs	r3, #2
 8003962:	e06e      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397a:	f7fe f893 	bl	8001aa4 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x82>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039b8:	e02a      	b.n	8003a10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa11 	bl	8003dec <UART_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e036      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e007      	b.n	8003a02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1cf      	bne.n	80039ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2140      	movs	r1, #64	; 0x40
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f9e1 	bl	8003dec <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e006      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_UART_IRQHandler+0x52>
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa99 	bl	8003fce <UART_Receive_IT>
      return;
 8003a9c:	e17b      	b.n	8003d96 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80b1 	beq.w	8003c08 <HAL_UART_IRQHandler+0x1bc>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_UART_IRQHandler+0x70>
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a6 	beq.w	8003c08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_UART_IRQHandler+0x90>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_UART_IRQHandler+0xb0>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0202 	orr.w	r2, r3, #2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_UART_IRQHandler+0xd0>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00f      	beq.n	8003b46 <HAL_UART_IRQHandler+0xfa>
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_UART_IRQHandler+0xee>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 811e 	beq.w	8003d8c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_UART_IRQHandler+0x11e>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa32 	bl	8003fce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_UART_IRQHandler+0x146>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d031      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f974 	bl	8003e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d023      	beq.n	8003bee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	4a76      	ldr	r2, [pc, #472]	; (8003d9c <HAL_UART_IRQHandler+0x350>)
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe f8bc 	bl	8001d48 <HAL_DMA_Abort_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e00e      	b.n	8003c04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8ec 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00a      	b.n	8003c04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8e8 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8e4 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c02:	e0c3      	b.n	8003d8c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	bf00      	nop
    return;
 8003c06:	e0c1      	b.n	8003d8c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 80a1 	bne.w	8003d54 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 809b 	beq.w	8003d54 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8095 	beq.w	8003d54 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04e      	beq.n	8003cec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c58:	8a3b      	ldrh	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8098 	beq.w	8003d90 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c64:	8a3a      	ldrh	r2, [r7, #16]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	f080 8092 	bcs.w	8003d90 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8a3a      	ldrh	r2, [r7, #16]
 8003c70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d02b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0210 	bic.w	r2, r2, #16
 8003cc8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd ffff 	bl	8001cd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f876 	bl	8003dd6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cea:	e051      	b.n	8003d90 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d047      	beq.n	8003d94 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d04:	8a7b      	ldrh	r3, [r7, #18]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d044      	beq.n	8003d94 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d18:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0210 	bic.w	r2, r2, #16
 8003d46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d48:	8a7b      	ldrh	r3, [r7, #18]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f842 	bl	8003dd6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d52:	e01f      	b.n	8003d94 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_UART_IRQHandler+0x324>
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8c9 	bl	8003f00 <UART_Transmit_IT>
    return;
 8003d6e:	e012      	b.n	8003d96 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <HAL_UART_IRQHandler+0x34a>
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f90a 	bl	8003f9e <UART_EndTransmit_IT>
    return;
 8003d8a:	e004      	b.n	8003d96 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d8c:	bf00      	nop
 8003d8e:	e002      	b.n	8003d96 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d94:	bf00      	nop
  }
}
 8003d96:	3728      	adds	r7, #40	; 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08003ed9 	.word	0x08003ed9

08003da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfc:	e02c      	b.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d028      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0c:	f7fd fe4a 	bl	8001aa4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d21d      	bcs.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e00f      	b.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d0c3      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0210 	bic.w	r2, r2, #16
 8003ebe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff66 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b21      	cmp	r3, #33	; 0x21
 8003f12:	d13e      	bne.n	8003f92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d114      	bne.n	8003f48 <UART_Transmit_IT+0x48>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d110      	bne.n	8003f48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]
 8003f46:	e008      	b.n	8003f5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	1c59      	adds	r1, r3, #1
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6211      	str	r1, [r2, #32]
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff feee 	bl	8003da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b22      	cmp	r3, #34	; 0x22
 8003fe0:	f040 8099 	bne.w	8004116 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d117      	bne.n	800401e <UART_Receive_IT+0x50>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d113      	bne.n	800401e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400c:	b29a      	uxth	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	1c9a      	adds	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
 800401c:	e026      	b.n	800406c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d007      	beq.n	8004042 <UART_Receive_IT+0x74>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <UART_Receive_IT+0x82>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e008      	b.n	8004062 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800405c:	b2da      	uxtb	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4619      	mov	r1, r3
 800407a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800407c:	2b00      	cmp	r3, #0
 800407e:	d148      	bne.n	8004112 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0220 	bic.w	r2, r2, #32
 800408e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d123      	bne.n	8004108 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0210 	bic.w	r2, r2, #16
 80040d4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d10a      	bne.n	80040fa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fe68 	bl	8003dd6 <HAL_UARTEx_RxEventCallback>
 8004106:	e002      	b.n	800410e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe52 	bl	8003db2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e002      	b.n	8004118 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800415a:	f023 030c 	bic.w	r3, r3, #12
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	430b      	orrs	r3, r1
 8004166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <UART_SetConfig+0x114>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d103      	bne.n	8004190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fbf0 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	e002      	b.n	8004196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fbd8 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 8004194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009a      	lsls	r2, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <UART_SetConfig+0x118>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	0119      	lsls	r1, r3, #4
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	009a      	lsls	r2, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041cc:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <UART_SetConfig+0x118>)
 80041ce:	fba3 0302 	umull	r0, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2064      	movs	r0, #100	; 0x64
 80041d6:	fb00 f303 	mul.w	r3, r0, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <UART_SetConfig+0x118>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ec:	4419      	add	r1, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb2 f2f3 	udiv	r2, r2, r3
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <UART_SetConfig+0x118>)
 8004206:	fba3 0302 	umull	r0, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2064      	movs	r0, #100	; 0x64
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	3332      	adds	r3, #50	; 0x32
 8004218:	4a07      	ldr	r2, [pc, #28]	; (8004238 <UART_SetConfig+0x118>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	440a      	add	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40013800 	.word	0x40013800
 8004238:	51eb851f 	.word	0x51eb851f

0800423c <__errno>:
 800423c:	4b01      	ldr	r3, [pc, #4]	; (8004244 <__errno+0x8>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000030 	.word	0x20000030

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	2600      	movs	r6, #0
 800424c:	4d0c      	ldr	r5, [pc, #48]	; (8004280 <__libc_init_array+0x38>)
 800424e:	4c0d      	ldr	r4, [pc, #52]	; (8004284 <__libc_init_array+0x3c>)
 8004250:	1b64      	subs	r4, r4, r5
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	f000 fc5c 	bl	8004b14 <_init>
 800425c:	2600      	movs	r6, #0
 800425e:	4d0a      	ldr	r5, [pc, #40]	; (8004288 <__libc_init_array+0x40>)
 8004260:	4c0a      	ldr	r4, [pc, #40]	; (800428c <__libc_init_array+0x44>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	08004bd8 	.word	0x08004bd8
 8004284:	08004bd8 	.word	0x08004bd8
 8004288:	08004bd8 	.word	0x08004bd8
 800428c:	08004bdc 	.word	0x08004bdc

08004290 <memset>:
 8004290:	4603      	mov	r3, r0
 8004292:	4402      	add	r2, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <siprintf>:
 80042a0:	b40e      	push	{r1, r2, r3}
 80042a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042a6:	b500      	push	{lr}
 80042a8:	b09c      	sub	sp, #112	; 0x70
 80042aa:	ab1d      	add	r3, sp, #116	; 0x74
 80042ac:	9002      	str	r0, [sp, #8]
 80042ae:	9006      	str	r0, [sp, #24]
 80042b0:	9107      	str	r1, [sp, #28]
 80042b2:	9104      	str	r1, [sp, #16]
 80042b4:	4808      	ldr	r0, [pc, #32]	; (80042d8 <siprintf+0x38>)
 80042b6:	4909      	ldr	r1, [pc, #36]	; (80042dc <siprintf+0x3c>)
 80042b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042bc:	9105      	str	r1, [sp, #20]
 80042be:	6800      	ldr	r0, [r0, #0]
 80042c0:	a902      	add	r1, sp, #8
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	f000 f868 	bl	8004398 <_svfiprintf_r>
 80042c8:	2200      	movs	r2, #0
 80042ca:	9b02      	ldr	r3, [sp, #8]
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	b01c      	add	sp, #112	; 0x70
 80042d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042d4:	b003      	add	sp, #12
 80042d6:	4770      	bx	lr
 80042d8:	20000030 	.word	0x20000030
 80042dc:	ffff0208 	.word	0xffff0208

080042e0 <__ssputs_r>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	688e      	ldr	r6, [r1, #8]
 80042e6:	4682      	mov	sl, r0
 80042e8:	429e      	cmp	r6, r3
 80042ea:	460c      	mov	r4, r1
 80042ec:	4690      	mov	r8, r2
 80042ee:	461f      	mov	r7, r3
 80042f0:	d838      	bhi.n	8004364 <__ssputs_r+0x84>
 80042f2:	898a      	ldrh	r2, [r1, #12]
 80042f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042f8:	d032      	beq.n	8004360 <__ssputs_r+0x80>
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	6909      	ldr	r1, [r1, #16]
 80042fe:	3301      	adds	r3, #1
 8004300:	eba5 0901 	sub.w	r9, r5, r1
 8004304:	6965      	ldr	r5, [r4, #20]
 8004306:	444b      	add	r3, r9
 8004308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800430c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004310:	106d      	asrs	r5, r5, #1
 8004312:	429d      	cmp	r5, r3
 8004314:	bf38      	it	cc
 8004316:	461d      	movcc	r5, r3
 8004318:	0553      	lsls	r3, r2, #21
 800431a:	d531      	bpl.n	8004380 <__ssputs_r+0xa0>
 800431c:	4629      	mov	r1, r5
 800431e:	f000 fb53 	bl	80049c8 <_malloc_r>
 8004322:	4606      	mov	r6, r0
 8004324:	b950      	cbnz	r0, 800433c <__ssputs_r+0x5c>
 8004326:	230c      	movs	r3, #12
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433c:	464a      	mov	r2, r9
 800433e:	6921      	ldr	r1, [r4, #16]
 8004340:	f000 face 	bl	80048e0 <memcpy>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	6126      	str	r6, [r4, #16]
 8004352:	444e      	add	r6, r9
 8004354:	6026      	str	r6, [r4, #0]
 8004356:	463e      	mov	r6, r7
 8004358:	6165      	str	r5, [r4, #20]
 800435a:	eba5 0509 	sub.w	r5, r5, r9
 800435e:	60a5      	str	r5, [r4, #8]
 8004360:	42be      	cmp	r6, r7
 8004362:	d900      	bls.n	8004366 <__ssputs_r+0x86>
 8004364:	463e      	mov	r6, r7
 8004366:	4632      	mov	r2, r6
 8004368:	4641      	mov	r1, r8
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	f000 fac6 	bl	80048fc <memmove>
 8004370:	68a3      	ldr	r3, [r4, #8]
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	1b9b      	subs	r3, r3, r6
 8004376:	4432      	add	r2, r6
 8004378:	2000      	movs	r0, #0
 800437a:	60a3      	str	r3, [r4, #8]
 800437c:	6022      	str	r2, [r4, #0]
 800437e:	e7db      	b.n	8004338 <__ssputs_r+0x58>
 8004380:	462a      	mov	r2, r5
 8004382:	f000 fb7b 	bl	8004a7c <_realloc_r>
 8004386:	4606      	mov	r6, r0
 8004388:	2800      	cmp	r0, #0
 800438a:	d1e1      	bne.n	8004350 <__ssputs_r+0x70>
 800438c:	4650      	mov	r0, sl
 800438e:	6921      	ldr	r1, [r4, #16]
 8004390:	f000 face 	bl	8004930 <_free_r>
 8004394:	e7c7      	b.n	8004326 <__ssputs_r+0x46>
	...

08004398 <_svfiprintf_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	4698      	mov	r8, r3
 800439e:	898b      	ldrh	r3, [r1, #12]
 80043a0:	4607      	mov	r7, r0
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	460d      	mov	r5, r1
 80043a6:	4614      	mov	r4, r2
 80043a8:	b09d      	sub	sp, #116	; 0x74
 80043aa:	d50e      	bpl.n	80043ca <_svfiprintf_r+0x32>
 80043ac:	690b      	ldr	r3, [r1, #16]
 80043ae:	b963      	cbnz	r3, 80043ca <_svfiprintf_r+0x32>
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	f000 fb09 	bl	80049c8 <_malloc_r>
 80043b6:	6028      	str	r0, [r5, #0]
 80043b8:	6128      	str	r0, [r5, #16]
 80043ba:	b920      	cbnz	r0, 80043c6 <_svfiprintf_r+0x2e>
 80043bc:	230c      	movs	r3, #12
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	e0d1      	b.n	800456a <_svfiprintf_r+0x1d2>
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	616b      	str	r3, [r5, #20]
 80043ca:	2300      	movs	r3, #0
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	2320      	movs	r3, #32
 80043d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d4:	2330      	movs	r3, #48	; 0x30
 80043d6:	f04f 0901 	mov.w	r9, #1
 80043da:	f8cd 800c 	str.w	r8, [sp, #12]
 80043de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004584 <_svfiprintf_r+0x1ec>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e6:	4623      	mov	r3, r4
 80043e8:	469a      	mov	sl, r3
 80043ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ee:	b10a      	cbz	r2, 80043f4 <_svfiprintf_r+0x5c>
 80043f0:	2a25      	cmp	r2, #37	; 0x25
 80043f2:	d1f9      	bne.n	80043e8 <_svfiprintf_r+0x50>
 80043f4:	ebba 0b04 	subs.w	fp, sl, r4
 80043f8:	d00b      	beq.n	8004412 <_svfiprintf_r+0x7a>
 80043fa:	465b      	mov	r3, fp
 80043fc:	4622      	mov	r2, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ff6d 	bl	80042e0 <__ssputs_r>
 8004406:	3001      	adds	r0, #1
 8004408:	f000 80aa 	beq.w	8004560 <_svfiprintf_r+0x1c8>
 800440c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800440e:	445a      	add	r2, fp
 8004410:	9209      	str	r2, [sp, #36]	; 0x24
 8004412:	f89a 3000 	ldrb.w	r3, [sl]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a2 	beq.w	8004560 <_svfiprintf_r+0x1c8>
 800441c:	2300      	movs	r3, #0
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004426:	f10a 0a01 	add.w	sl, sl, #1
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	9307      	str	r3, [sp, #28]
 800442e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004432:	931a      	str	r3, [sp, #104]	; 0x68
 8004434:	4654      	mov	r4, sl
 8004436:	2205      	movs	r2, #5
 8004438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443c:	4851      	ldr	r0, [pc, #324]	; (8004584 <_svfiprintf_r+0x1ec>)
 800443e:	f000 fa41 	bl	80048c4 <memchr>
 8004442:	9a04      	ldr	r2, [sp, #16]
 8004444:	b9d8      	cbnz	r0, 800447e <_svfiprintf_r+0xe6>
 8004446:	06d0      	lsls	r0, r2, #27
 8004448:	bf44      	itt	mi
 800444a:	2320      	movmi	r3, #32
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004450:	0711      	lsls	r1, r2, #28
 8004452:	bf44      	itt	mi
 8004454:	232b      	movmi	r3, #43	; 0x2b
 8004456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445a:	f89a 3000 	ldrb.w	r3, [sl]
 800445e:	2b2a      	cmp	r3, #42	; 0x2a
 8004460:	d015      	beq.n	800448e <_svfiprintf_r+0xf6>
 8004462:	4654      	mov	r4, sl
 8004464:	2000      	movs	r0, #0
 8004466:	f04f 0c0a 	mov.w	ip, #10
 800446a:	9a07      	ldr	r2, [sp, #28]
 800446c:	4621      	mov	r1, r4
 800446e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004472:	3b30      	subs	r3, #48	; 0x30
 8004474:	2b09      	cmp	r3, #9
 8004476:	d94e      	bls.n	8004516 <_svfiprintf_r+0x17e>
 8004478:	b1b0      	cbz	r0, 80044a8 <_svfiprintf_r+0x110>
 800447a:	9207      	str	r2, [sp, #28]
 800447c:	e014      	b.n	80044a8 <_svfiprintf_r+0x110>
 800447e:	eba0 0308 	sub.w	r3, r0, r8
 8004482:	fa09 f303 	lsl.w	r3, r9, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	46a2      	mov	sl, r4
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	e7d2      	b.n	8004434 <_svfiprintf_r+0x9c>
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	9103      	str	r1, [sp, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfbb      	ittet	lt
 800449a:	425b      	neglt	r3, r3
 800449c:	f042 0202 	orrlt.w	r2, r2, #2
 80044a0:	9307      	strge	r3, [sp, #28]
 80044a2:	9307      	strlt	r3, [sp, #28]
 80044a4:	bfb8      	it	lt
 80044a6:	9204      	strlt	r2, [sp, #16]
 80044a8:	7823      	ldrb	r3, [r4, #0]
 80044aa:	2b2e      	cmp	r3, #46	; 0x2e
 80044ac:	d10c      	bne.n	80044c8 <_svfiprintf_r+0x130>
 80044ae:	7863      	ldrb	r3, [r4, #1]
 80044b0:	2b2a      	cmp	r3, #42	; 0x2a
 80044b2:	d135      	bne.n	8004520 <_svfiprintf_r+0x188>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	3402      	adds	r4, #2
 80044b8:	1d1a      	adds	r2, r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	9203      	str	r2, [sp, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004594 <_svfiprintf_r+0x1fc>
 80044cc:	2203      	movs	r2, #3
 80044ce:	4650      	mov	r0, sl
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	f000 f9f7 	bl	80048c4 <memchr>
 80044d6:	b140      	cbz	r0, 80044ea <_svfiprintf_r+0x152>
 80044d8:	2340      	movs	r3, #64	; 0x40
 80044da:	eba0 000a 	sub.w	r0, r0, sl
 80044de:	fa03 f000 	lsl.w	r0, r3, r0
 80044e2:	9b04      	ldr	r3, [sp, #16]
 80044e4:	3401      	adds	r4, #1
 80044e6:	4303      	orrs	r3, r0
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ee:	2206      	movs	r2, #6
 80044f0:	4825      	ldr	r0, [pc, #148]	; (8004588 <_svfiprintf_r+0x1f0>)
 80044f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044f6:	f000 f9e5 	bl	80048c4 <memchr>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d038      	beq.n	8004570 <_svfiprintf_r+0x1d8>
 80044fe:	4b23      	ldr	r3, [pc, #140]	; (800458c <_svfiprintf_r+0x1f4>)
 8004500:	bb1b      	cbnz	r3, 800454a <_svfiprintf_r+0x1b2>
 8004502:	9b03      	ldr	r3, [sp, #12]
 8004504:	3307      	adds	r3, #7
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	3308      	adds	r3, #8
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004510:	4433      	add	r3, r6
 8004512:	9309      	str	r3, [sp, #36]	; 0x24
 8004514:	e767      	b.n	80043e6 <_svfiprintf_r+0x4e>
 8004516:	460c      	mov	r4, r1
 8004518:	2001      	movs	r0, #1
 800451a:	fb0c 3202 	mla	r2, ip, r2, r3
 800451e:	e7a5      	b.n	800446c <_svfiprintf_r+0xd4>
 8004520:	2300      	movs	r3, #0
 8004522:	f04f 0c0a 	mov.w	ip, #10
 8004526:	4619      	mov	r1, r3
 8004528:	3401      	adds	r4, #1
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	4620      	mov	r0, r4
 800452e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004532:	3a30      	subs	r2, #48	; 0x30
 8004534:	2a09      	cmp	r2, #9
 8004536:	d903      	bls.n	8004540 <_svfiprintf_r+0x1a8>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0c5      	beq.n	80044c8 <_svfiprintf_r+0x130>
 800453c:	9105      	str	r1, [sp, #20]
 800453e:	e7c3      	b.n	80044c8 <_svfiprintf_r+0x130>
 8004540:	4604      	mov	r4, r0
 8004542:	2301      	movs	r3, #1
 8004544:	fb0c 2101 	mla	r1, ip, r1, r2
 8004548:	e7f0      	b.n	800452c <_svfiprintf_r+0x194>
 800454a:	ab03      	add	r3, sp, #12
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	462a      	mov	r2, r5
 8004550:	4638      	mov	r0, r7
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <_svfiprintf_r+0x1f8>)
 8004554:	a904      	add	r1, sp, #16
 8004556:	f3af 8000 	nop.w
 800455a:	1c42      	adds	r2, r0, #1
 800455c:	4606      	mov	r6, r0
 800455e:	d1d6      	bne.n	800450e <_svfiprintf_r+0x176>
 8004560:	89ab      	ldrh	r3, [r5, #12]
 8004562:	065b      	lsls	r3, r3, #25
 8004564:	f53f af2c 	bmi.w	80043c0 <_svfiprintf_r+0x28>
 8004568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456a:	b01d      	add	sp, #116	; 0x74
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	ab03      	add	r3, sp, #12
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	462a      	mov	r2, r5
 8004576:	4638      	mov	r0, r7
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <_svfiprintf_r+0x1f8>)
 800457a:	a904      	add	r1, sp, #16
 800457c:	f000 f87c 	bl	8004678 <_printf_i>
 8004580:	e7eb      	b.n	800455a <_svfiprintf_r+0x1c2>
 8004582:	bf00      	nop
 8004584:	08004ba4 	.word	0x08004ba4
 8004588:	08004bae 	.word	0x08004bae
 800458c:	00000000 	.word	0x00000000
 8004590:	080042e1 	.word	0x080042e1
 8004594:	08004baa 	.word	0x08004baa

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4616      	mov	r6, r2
 800459e:	4699      	mov	r9, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4607      	mov	r7, r0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	bfb8      	it	lt
 80045aa:	4613      	movlt	r3, r2
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b2:	460c      	mov	r4, r1
 80045b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b8:	b10a      	cbz	r2, 80045be <_printf_common+0x26>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	0699      	lsls	r1, r3, #26
 80045c2:	bf42      	ittt	mi
 80045c4:	6833      	ldrmi	r3, [r6, #0]
 80045c6:	3302      	addmi	r3, #2
 80045c8:	6033      	strmi	r3, [r6, #0]
 80045ca:	6825      	ldr	r5, [r4, #0]
 80045cc:	f015 0506 	ands.w	r5, r5, #6
 80045d0:	d106      	bne.n	80045e0 <_printf_common+0x48>
 80045d2:	f104 0a19 	add.w	sl, r4, #25
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	6832      	ldr	r2, [r6, #0]
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dc28      	bgt.n	8004632 <_printf_common+0x9a>
 80045e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	0692      	lsls	r2, r2, #26
 80045ee:	d42d      	bmi.n	800464c <_printf_common+0xb4>
 80045f0:	4649      	mov	r1, r9
 80045f2:	4638      	mov	r0, r7
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d020      	beq.n	8004640 <_printf_common+0xa8>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	68e5      	ldr	r5, [r4, #12]
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf18      	it	ne
 800460a:	2500      	movne	r5, #0
 800460c:	6832      	ldr	r2, [r6, #0]
 800460e:	f04f 0600 	mov.w	r6, #0
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	bf08      	it	eq
 8004616:	1aad      	subeq	r5, r5, r2
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	bf08      	it	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	4293      	cmp	r3, r2
 8004622:	bfc4      	itt	gt
 8004624:	1a9b      	subgt	r3, r3, r2
 8004626:	18ed      	addgt	r5, r5, r3
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xcc>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xac>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4649      	mov	r1, r9
 8004638:	4638      	mov	r0, r7
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xb0>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c4      	b.n	80045d6 <_printf_common+0x3e>
 800464c:	2030      	movs	r0, #48	; 0x30
 800464e:	18e1      	adds	r1, r4, r3
 8004650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465a:	4422      	add	r2, r4
 800465c:	3302      	adds	r3, #2
 800465e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004662:	e7c5      	b.n	80045f0 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa8>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x92>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	460c      	mov	r4, r1
 800467e:	7e27      	ldrb	r7, [r4, #24]
 8004680:	4691      	mov	r9, r2
 8004682:	2f78      	cmp	r7, #120	; 0x78
 8004684:	4680      	mov	r8, r0
 8004686:	469a      	mov	sl, r3
 8004688:	990c      	ldr	r1, [sp, #48]	; 0x30
 800468a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	; 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d9 	beq.w	800484c <_printf_i+0x1d4>
 800469a:	2f58      	cmp	r7, #88	; 0x58
 800469c:	f000 80a4 	beq.w	80047e8 <_printf_i+0x170>
 80046a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a001      	add	r0, pc, #4	; (adr r0, 80046b8 <_printf_i+0x40>)
 80046b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004833 	.word	0x08004833
 80046e8:	08004755 	.word	0x08004755
 80046ec:	08004815 	.word	0x08004815
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004855 	.word	0x08004855
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	08004755 	.word	0x08004755
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	0800481d 	.word	0x0800481d
 8004710:	680b      	ldr	r3, [r1, #0]
 8004712:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	600a      	str	r2, [r1, #0]
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e0a4      	b.n	800486e <_printf_i+0x1f6>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	6808      	ldr	r0, [r1, #0]
 8004728:	062e      	lsls	r6, r5, #24
 800472a:	f100 0304 	add.w	r3, r0, #4
 800472e:	d50a      	bpl.n	8004746 <_printf_i+0xce>
 8004730:	6805      	ldr	r5, [r0, #0]
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	2d00      	cmp	r5, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xc8>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	426d      	negs	r5, r5
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	230a      	movs	r3, #10
 8004742:	485e      	ldr	r0, [pc, #376]	; (80048bc <_printf_i+0x244>)
 8004744:	e019      	b.n	800477a <_printf_i+0x102>
 8004746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800474a:	6805      	ldr	r5, [r0, #0]
 800474c:	600b      	str	r3, [r1, #0]
 800474e:	bf18      	it	ne
 8004750:	b22d      	sxthne	r5, r5
 8004752:	e7ef      	b.n	8004734 <_printf_i+0xbc>
 8004754:	680b      	ldr	r3, [r1, #0]
 8004756:	6825      	ldr	r5, [r4, #0]
 8004758:	1d18      	adds	r0, r3, #4
 800475a:	6008      	str	r0, [r1, #0]
 800475c:	0628      	lsls	r0, r5, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xec>
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xf2>
 8004764:	0669      	lsls	r1, r5, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe8>
 8004768:	881d      	ldrh	r5, [r3, #0]
 800476a:	2f6f      	cmp	r7, #111	; 0x6f
 800476c:	bf0c      	ite	eq
 800476e:	2308      	moveq	r3, #8
 8004770:	230a      	movne	r3, #10
 8004772:	4852      	ldr	r0, [pc, #328]	; (80048bc <_printf_i+0x244>)
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6866      	ldr	r6, [r4, #4]
 800477c:	2e00      	cmp	r6, #0
 800477e:	bfa8      	it	ge
 8004780:	6821      	ldrge	r1, [r4, #0]
 8004782:	60a6      	str	r6, [r4, #8]
 8004784:	bfa4      	itt	ge
 8004786:	f021 0104 	bicge.w	r1, r1, #4
 800478a:	6021      	strge	r1, [r4, #0]
 800478c:	b90d      	cbnz	r5, 8004792 <_printf_i+0x11a>
 800478e:	2e00      	cmp	r6, #0
 8004790:	d04d      	beq.n	800482e <_printf_i+0x1b6>
 8004792:	4616      	mov	r6, r2
 8004794:	fbb5 f1f3 	udiv	r1, r5, r3
 8004798:	fb03 5711 	mls	r7, r3, r1, r5
 800479c:	5dc7      	ldrb	r7, [r0, r7]
 800479e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047a2:	462f      	mov	r7, r5
 80047a4:	42bb      	cmp	r3, r7
 80047a6:	460d      	mov	r5, r1
 80047a8:	d9f4      	bls.n	8004794 <_printf_i+0x11c>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d10b      	bne.n	80047c6 <_printf_i+0x14e>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	07df      	lsls	r7, r3, #31
 80047b2:	d508      	bpl.n	80047c6 <_printf_i+0x14e>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	6861      	ldr	r1, [r4, #4]
 80047b8:	4299      	cmp	r1, r3
 80047ba:	bfde      	ittt	le
 80047bc:	2330      	movle	r3, #48	; 0x30
 80047be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047c6:	1b92      	subs	r2, r2, r6
 80047c8:	6122      	str	r2, [r4, #16]
 80047ca:	464b      	mov	r3, r9
 80047cc:	4621      	mov	r1, r4
 80047ce:	4640      	mov	r0, r8
 80047d0:	f8cd a000 	str.w	sl, [sp]
 80047d4:	aa03      	add	r2, sp, #12
 80047d6:	f7ff fedf 	bl	8004598 <_printf_common>
 80047da:	3001      	adds	r0, #1
 80047dc:	d14c      	bne.n	8004878 <_printf_i+0x200>
 80047de:	f04f 30ff 	mov.w	r0, #4294967295
 80047e2:	b004      	add	sp, #16
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	4834      	ldr	r0, [pc, #208]	; (80048bc <_printf_i+0x244>)
 80047ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ee:	680e      	ldr	r6, [r1, #0]
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80047f6:	061f      	lsls	r7, r3, #24
 80047f8:	600e      	str	r6, [r1, #0]
 80047fa:	d514      	bpl.n	8004826 <_printf_i+0x1ae>
 80047fc:	07d9      	lsls	r1, r3, #31
 80047fe:	bf44      	itt	mi
 8004800:	f043 0320 	orrmi.w	r3, r3, #32
 8004804:	6023      	strmi	r3, [r4, #0]
 8004806:	b91d      	cbnz	r5, 8004810 <_printf_i+0x198>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	2310      	movs	r3, #16
 8004812:	e7af      	b.n	8004774 <_printf_i+0xfc>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	2378      	movs	r3, #120	; 0x78
 800481e:	4828      	ldr	r0, [pc, #160]	; (80048c0 <_printf_i+0x248>)
 8004820:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004824:	e7e3      	b.n	80047ee <_printf_i+0x176>
 8004826:	065e      	lsls	r6, r3, #25
 8004828:	bf48      	it	mi
 800482a:	b2ad      	uxthmi	r5, r5
 800482c:	e7e6      	b.n	80047fc <_printf_i+0x184>
 800482e:	4616      	mov	r6, r2
 8004830:	e7bb      	b.n	80047aa <_printf_i+0x132>
 8004832:	680b      	ldr	r3, [r1, #0]
 8004834:	6826      	ldr	r6, [r4, #0]
 8004836:	1d1d      	adds	r5, r3, #4
 8004838:	6960      	ldr	r0, [r4, #20]
 800483a:	600d      	str	r5, [r1, #0]
 800483c:	0635      	lsls	r5, r6, #24
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	d501      	bpl.n	8004846 <_printf_i+0x1ce>
 8004842:	6018      	str	r0, [r3, #0]
 8004844:	e002      	b.n	800484c <_printf_i+0x1d4>
 8004846:	0671      	lsls	r1, r6, #25
 8004848:	d5fb      	bpl.n	8004842 <_printf_i+0x1ca>
 800484a:	8018      	strh	r0, [r3, #0]
 800484c:	2300      	movs	r3, #0
 800484e:	4616      	mov	r6, r2
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	e7ba      	b.n	80047ca <_printf_i+0x152>
 8004854:	680b      	ldr	r3, [r1, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	600a      	str	r2, [r1, #0]
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	2100      	movs	r1, #0
 800485e:	4630      	mov	r0, r6
 8004860:	6862      	ldr	r2, [r4, #4]
 8004862:	f000 f82f 	bl	80048c4 <memchr>
 8004866:	b108      	cbz	r0, 800486c <_printf_i+0x1f4>
 8004868:	1b80      	subs	r0, r0, r6
 800486a:	6060      	str	r0, [r4, #4]
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	2300      	movs	r3, #0
 8004872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004876:	e7a8      	b.n	80047ca <_printf_i+0x152>
 8004878:	4632      	mov	r2, r6
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	47d0      	blx	sl
 8004882:	3001      	adds	r0, #1
 8004884:	d0ab      	beq.n	80047de <_printf_i+0x166>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	079b      	lsls	r3, r3, #30
 800488a:	d413      	bmi.n	80048b4 <_printf_i+0x23c>
 800488c:	68e0      	ldr	r0, [r4, #12]
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	4298      	cmp	r0, r3
 8004892:	bfb8      	it	lt
 8004894:	4618      	movlt	r0, r3
 8004896:	e7a4      	b.n	80047e2 <_printf_i+0x16a>
 8004898:	2301      	movs	r3, #1
 800489a:	4632      	mov	r2, r6
 800489c:	4649      	mov	r1, r9
 800489e:	4640      	mov	r0, r8
 80048a0:	47d0      	blx	sl
 80048a2:	3001      	adds	r0, #1
 80048a4:	d09b      	beq.n	80047de <_printf_i+0x166>
 80048a6:	3501      	adds	r5, #1
 80048a8:	68e3      	ldr	r3, [r4, #12]
 80048aa:	9903      	ldr	r1, [sp, #12]
 80048ac:	1a5b      	subs	r3, r3, r1
 80048ae:	42ab      	cmp	r3, r5
 80048b0:	dcf2      	bgt.n	8004898 <_printf_i+0x220>
 80048b2:	e7eb      	b.n	800488c <_printf_i+0x214>
 80048b4:	2500      	movs	r5, #0
 80048b6:	f104 0619 	add.w	r6, r4, #25
 80048ba:	e7f5      	b.n	80048a8 <_printf_i+0x230>
 80048bc:	08004bb5 	.word	0x08004bb5
 80048c0:	08004bc6 	.word	0x08004bc6

080048c4 <memchr>:
 80048c4:	4603      	mov	r3, r0
 80048c6:	b510      	push	{r4, lr}
 80048c8:	b2c9      	uxtb	r1, r1
 80048ca:	4402      	add	r2, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	d101      	bne.n	80048d6 <memchr+0x12>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e003      	b.n	80048de <memchr+0x1a>
 80048d6:	7804      	ldrb	r4, [r0, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	428c      	cmp	r4, r1
 80048dc:	d1f6      	bne.n	80048cc <memchr+0x8>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <memcpy>:
 80048e0:	440a      	add	r2, r1
 80048e2:	4291      	cmp	r1, r2
 80048e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048e8:	d100      	bne.n	80048ec <memcpy+0xc>
 80048ea:	4770      	bx	lr
 80048ec:	b510      	push	{r4, lr}
 80048ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048f2:	4291      	cmp	r1, r2
 80048f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048f8:	d1f9      	bne.n	80048ee <memcpy+0xe>
 80048fa:	bd10      	pop	{r4, pc}

080048fc <memmove>:
 80048fc:	4288      	cmp	r0, r1
 80048fe:	b510      	push	{r4, lr}
 8004900:	eb01 0402 	add.w	r4, r1, r2
 8004904:	d902      	bls.n	800490c <memmove+0x10>
 8004906:	4284      	cmp	r4, r0
 8004908:	4623      	mov	r3, r4
 800490a:	d807      	bhi.n	800491c <memmove+0x20>
 800490c:	1e43      	subs	r3, r0, #1
 800490e:	42a1      	cmp	r1, r4
 8004910:	d008      	beq.n	8004924 <memmove+0x28>
 8004912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800491a:	e7f8      	b.n	800490e <memmove+0x12>
 800491c:	4601      	mov	r1, r0
 800491e:	4402      	add	r2, r0
 8004920:	428a      	cmp	r2, r1
 8004922:	d100      	bne.n	8004926 <memmove+0x2a>
 8004924:	bd10      	pop	{r4, pc}
 8004926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800492a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800492e:	e7f7      	b.n	8004920 <memmove+0x24>

08004930 <_free_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	2900      	cmp	r1, #0
 8004936:	d043      	beq.n	80049c0 <_free_r+0x90>
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	18e4      	addlt	r4, r4, r3
 8004944:	f000 f8d0 	bl	8004ae8 <__malloc_lock>
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <_free_r+0x94>)
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	4610      	mov	r0, r2
 800494e:	b933      	cbnz	r3, 800495e <_free_r+0x2e>
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	6014      	str	r4, [r2, #0]
 8004954:	4628      	mov	r0, r5
 8004956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800495a:	f000 b8cb 	b.w	8004af4 <__malloc_unlock>
 800495e:	42a3      	cmp	r3, r4
 8004960:	d90a      	bls.n	8004978 <_free_r+0x48>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	1862      	adds	r2, r4, r1
 8004966:	4293      	cmp	r3, r2
 8004968:	bf01      	itttt	eq
 800496a:	681a      	ldreq	r2, [r3, #0]
 800496c:	685b      	ldreq	r3, [r3, #4]
 800496e:	1852      	addeq	r2, r2, r1
 8004970:	6022      	streq	r2, [r4, #0]
 8004972:	6063      	str	r3, [r4, #4]
 8004974:	6004      	str	r4, [r0, #0]
 8004976:	e7ed      	b.n	8004954 <_free_r+0x24>
 8004978:	461a      	mov	r2, r3
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	b10b      	cbz	r3, 8004982 <_free_r+0x52>
 800497e:	42a3      	cmp	r3, r4
 8004980:	d9fa      	bls.n	8004978 <_free_r+0x48>
 8004982:	6811      	ldr	r1, [r2, #0]
 8004984:	1850      	adds	r0, r2, r1
 8004986:	42a0      	cmp	r0, r4
 8004988:	d10b      	bne.n	80049a2 <_free_r+0x72>
 800498a:	6820      	ldr	r0, [r4, #0]
 800498c:	4401      	add	r1, r0
 800498e:	1850      	adds	r0, r2, r1
 8004990:	4283      	cmp	r3, r0
 8004992:	6011      	str	r1, [r2, #0]
 8004994:	d1de      	bne.n	8004954 <_free_r+0x24>
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4401      	add	r1, r0
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e7d8      	b.n	8004954 <_free_r+0x24>
 80049a2:	d902      	bls.n	80049aa <_free_r+0x7a>
 80049a4:	230c      	movs	r3, #12
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	e7d4      	b.n	8004954 <_free_r+0x24>
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	1821      	adds	r1, r4, r0
 80049ae:	428b      	cmp	r3, r1
 80049b0:	bf01      	itttt	eq
 80049b2:	6819      	ldreq	r1, [r3, #0]
 80049b4:	685b      	ldreq	r3, [r3, #4]
 80049b6:	1809      	addeq	r1, r1, r0
 80049b8:	6021      	streq	r1, [r4, #0]
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	6054      	str	r4, [r2, #4]
 80049be:	e7c9      	b.n	8004954 <_free_r+0x24>
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	20000144 	.word	0x20000144

080049c8 <_malloc_r>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	1ccd      	adds	r5, r1, #3
 80049cc:	f025 0503 	bic.w	r5, r5, #3
 80049d0:	3508      	adds	r5, #8
 80049d2:	2d0c      	cmp	r5, #12
 80049d4:	bf38      	it	cc
 80049d6:	250c      	movcc	r5, #12
 80049d8:	2d00      	cmp	r5, #0
 80049da:	4606      	mov	r6, r0
 80049dc:	db01      	blt.n	80049e2 <_malloc_r+0x1a>
 80049de:	42a9      	cmp	r1, r5
 80049e0:	d903      	bls.n	80049ea <_malloc_r+0x22>
 80049e2:	230c      	movs	r3, #12
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	2000      	movs	r0, #0
 80049e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ea:	f000 f87d 	bl	8004ae8 <__malloc_lock>
 80049ee:	4921      	ldr	r1, [pc, #132]	; (8004a74 <_malloc_r+0xac>)
 80049f0:	680a      	ldr	r2, [r1, #0]
 80049f2:	4614      	mov	r4, r2
 80049f4:	b99c      	cbnz	r4, 8004a1e <_malloc_r+0x56>
 80049f6:	4f20      	ldr	r7, [pc, #128]	; (8004a78 <_malloc_r+0xb0>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	b923      	cbnz	r3, 8004a06 <_malloc_r+0x3e>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 f862 	bl	8004ac8 <_sbrk_r>
 8004a04:	6038      	str	r0, [r7, #0]
 8004a06:	4629      	mov	r1, r5
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 f85d 	bl	8004ac8 <_sbrk_r>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d123      	bne.n	8004a5a <_malloc_r+0x92>
 8004a12:	230c      	movs	r3, #12
 8004a14:	4630      	mov	r0, r6
 8004a16:	6033      	str	r3, [r6, #0]
 8004a18:	f000 f86c 	bl	8004af4 <__malloc_unlock>
 8004a1c:	e7e3      	b.n	80049e6 <_malloc_r+0x1e>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	1b5b      	subs	r3, r3, r5
 8004a22:	d417      	bmi.n	8004a54 <_malloc_r+0x8c>
 8004a24:	2b0b      	cmp	r3, #11
 8004a26:	d903      	bls.n	8004a30 <_malloc_r+0x68>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	441c      	add	r4, r3
 8004a2c:	6025      	str	r5, [r4, #0]
 8004a2e:	e004      	b.n	8004a3a <_malloc_r+0x72>
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	42a2      	cmp	r2, r4
 8004a34:	bf0c      	ite	eq
 8004a36:	600b      	streq	r3, [r1, #0]
 8004a38:	6053      	strne	r3, [r2, #4]
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f85a 	bl	8004af4 <__malloc_unlock>
 8004a40:	f104 000b 	add.w	r0, r4, #11
 8004a44:	1d23      	adds	r3, r4, #4
 8004a46:	f020 0007 	bic.w	r0, r0, #7
 8004a4a:	1ac2      	subs	r2, r0, r3
 8004a4c:	d0cc      	beq.n	80049e8 <_malloc_r+0x20>
 8004a4e:	1a1b      	subs	r3, r3, r0
 8004a50:	50a3      	str	r3, [r4, r2]
 8004a52:	e7c9      	b.n	80049e8 <_malloc_r+0x20>
 8004a54:	4622      	mov	r2, r4
 8004a56:	6864      	ldr	r4, [r4, #4]
 8004a58:	e7cc      	b.n	80049f4 <_malloc_r+0x2c>
 8004a5a:	1cc4      	adds	r4, r0, #3
 8004a5c:	f024 0403 	bic.w	r4, r4, #3
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d0e3      	beq.n	8004a2c <_malloc_r+0x64>
 8004a64:	1a21      	subs	r1, r4, r0
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 f82e 	bl	8004ac8 <_sbrk_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d1dd      	bne.n	8004a2c <_malloc_r+0x64>
 8004a70:	e7cf      	b.n	8004a12 <_malloc_r+0x4a>
 8004a72:	bf00      	nop
 8004a74:	20000144 	.word	0x20000144
 8004a78:	20000148 	.word	0x20000148

08004a7c <_realloc_r>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	4607      	mov	r7, r0
 8004a80:	4614      	mov	r4, r2
 8004a82:	460e      	mov	r6, r1
 8004a84:	b921      	cbnz	r1, 8004a90 <_realloc_r+0x14>
 8004a86:	4611      	mov	r1, r2
 8004a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a8c:	f7ff bf9c 	b.w	80049c8 <_malloc_r>
 8004a90:	b922      	cbnz	r2, 8004a9c <_realloc_r+0x20>
 8004a92:	f7ff ff4d 	bl	8004930 <_free_r>
 8004a96:	4625      	mov	r5, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	f000 f830 	bl	8004b00 <_malloc_usable_size_r>
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d20f      	bcs.n	8004ac4 <_realloc_r+0x48>
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f7ff ff8e 	bl	80049c8 <_malloc_r>
 8004aac:	4605      	mov	r5, r0
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0f2      	beq.n	8004a98 <_realloc_r+0x1c>
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	f7ff ff13 	bl	80048e0 <memcpy>
 8004aba:	4631      	mov	r1, r6
 8004abc:	4638      	mov	r0, r7
 8004abe:	f7ff ff37 	bl	8004930 <_free_r>
 8004ac2:	e7e9      	b.n	8004a98 <_realloc_r+0x1c>
 8004ac4:	4635      	mov	r5, r6
 8004ac6:	e7e7      	b.n	8004a98 <_realloc_r+0x1c>

08004ac8 <_sbrk_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	2300      	movs	r3, #0
 8004acc:	4d05      	ldr	r5, [pc, #20]	; (8004ae4 <_sbrk_r+0x1c>)
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	f7fc ff2c 	bl	8001930 <_sbrk>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_sbrk_r+0x1a>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_sbrk_r+0x1a>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	2000048c 	.word	0x2000048c

08004ae8 <__malloc_lock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__malloc_lock+0x8>)
 8004aea:	f000 b811 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000494 	.word	0x20000494

08004af4 <__malloc_unlock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__malloc_unlock+0x8>)
 8004af6:	f000 b80c 	b.w	8004b12 <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000494 	.word	0x20000494

08004b00 <_malloc_usable_size_r>:
 8004b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b04:	1f18      	subs	r0, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfbc      	itt	lt
 8004b0a:	580b      	ldrlt	r3, [r1, r0]
 8004b0c:	18c0      	addlt	r0, r0, r3
 8004b0e:	4770      	bx	lr

08004b10 <__retarget_lock_acquire_recursive>:
 8004b10:	4770      	bx	lr

08004b12 <__retarget_lock_release_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
