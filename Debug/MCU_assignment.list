
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080054e8  080054e8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e8  080054e8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080054f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000094  08005584  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08005584  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166fb  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0003a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198de  00000000  00000000  0003b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba4  00000000  00000000  00054a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b401  00000000  00000000  00066612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1a13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000f1a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080053fc 	.word	0x080053fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080053fc 	.word	0x080053fc

0800014c <iKeyInput>:
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f002 fc56 	bl	8002a24 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f002 fc50 	bl	8002a24 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f002 fc4a 	bl	8002a24 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f002 fc44 	bl	8002a24 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
 80001a0:	2301      	movs	r3, #1
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess1+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	200000bc 	.word	0x200000bc

080001d4 <subKeyProcess2>:
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <subKeyProcess2+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2101      	movs	r1, #1
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	200000cc 	.word	0x200000cc

080001f4 <getKeyInput>:
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e071      	b.n	80002e4 <getKeyInput+0xf0>
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <getKeyInput+0x100>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <getKeyInput+0x104>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ff91 	bl	800014c <iKeyInput>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0x100>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	440b      	add	r3, r1
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xea>
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <getKeyInput+0x108>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4927      	ldr	r1, [pc, #156]	; (80002f4 <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xea>
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x10c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4923      	ldr	r1, [pc, #140]	; (80002f8 <getKeyInput+0x104>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	440b      	add	r3, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d017      	beq.n	80002a4 <getKeyInput+0xb0>
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d125      	bne.n	80002de <getKeyInput+0xea>
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f7ff ff8e 	bl	80001b4 <subKeyProcess1>
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x110>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a2:	e01c      	b.n	80002de <getKeyInput+0xea>
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0x110>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4915      	ldr	r1, [pc, #84]	; (8000304 <getKeyInput+0x110>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x110>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc0d      	bgt.n	80002de <getKeyInput+0xea>
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x104>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0xe0>
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff80 	bl	80001d4 <subKeyProcess2>
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <getKeyInput+0x110>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd8a      	ble.n	8000200 <getKeyInput+0xc>
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	200000b8 	.word	0x200000b8
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <is_button_pressed>:
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d901      	bls.n	800031c <is_button_pressed+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e00d      	b.n	8000338 <is_button_pressed+0x30>
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <is_button_pressed+0x3c>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d106      	bne.n	8000336 <is_button_pressed+0x2e>
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <is_button_pressed+0x3c>)
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed+0x30>
 8000336:	2300      	movs	r3, #0
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000bc 	.word	0x200000bc

08000348 <is_button_pressed_1s>:
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d901      	bls.n	800035c <is_button_pressed_1s+0x14>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	e00d      	b.n	8000378 <is_button_pressed_1s+0x30>
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <is_button_pressed_1s+0x3c>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <is_button_pressed_1s+0x2e>
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <is_button_pressed_1s+0x3c>)
 800036c:	2100      	movs	r1, #0
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <is_button_pressed_1s+0x30>
 8000376:	2300      	movs	r3, #0
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	200000cc 	.word	0x200000cc

08000388 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch(status){
 800038c:	4ba5      	ldr	r3, [pc, #660]	; (8000624 <fsm_automatic_run+0x29c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b0c      	cmp	r3, #12
 8000392:	dc21      	bgt.n	80003d8 <fsm_automatic_run+0x50>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f340 81c5 	ble.w	8000724 <fsm_automatic_run+0x39c>
 800039a:	3b01      	subs	r3, #1
 800039c:	2b0b      	cmp	r3, #11
 800039e:	f200 81c1 	bhi.w	8000724 <fsm_automatic_run+0x39c>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <fsm_automatic_run+0x20>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	08000407 	.word	0x08000407
 80003ac:	080004b3 	.word	0x080004b3
 80003b0:	08000725 	.word	0x08000725
 80003b4:	08000725 	.word	0x08000725
 80003b8:	08000725 	.word	0x08000725
 80003bc:	08000725 	.word	0x08000725
 80003c0:	08000725 	.word	0x08000725
 80003c4:	08000725 	.word	0x08000725
 80003c8:	08000725 	.word	0x08000725
 80003cc:	08000725 	.word	0x08000725
 80003d0:	08000571 	.word	0x08000571
 80003d4:	08000661 	.word	0x08000661
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	f040 81a3 	bne.w	8000724 <fsm_automatic_run+0x39c>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80003de:	2003      	movs	r0, #3
 80003e0:	f000 fe8e 	bl	8001100 <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80003e4:	4b90      	ldr	r3, [pc, #576]	; (8000628 <fsm_automatic_run+0x2a0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fc87 	bl	8001cfc <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80003ee:	4b8f      	ldr	r3, [pc, #572]	; (800062c <fsm_automatic_run+0x2a4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fc9e 	bl	8001d34 <setTimer4>
			setTimer2(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f001 fc63 	bl	8001cc4 <setTimer2>
			status = AUTO_GREEN1;
 80003fe:	4b89      	ldr	r3, [pc, #548]	; (8000624 <fsm_automatic_run+0x29c>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

			break;
 8000404:	e197      	b.n	8000736 <fsm_automatic_run+0x3ae>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fd80 	bl	8000f0c <setRed>
			setGreen(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fdfd 	bl	800100c <setGreen>

				// display value by UART
			sendingUART_RUN();
 8000412:	f001 f8b3 	bl	800157c <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff ff76 	bl	8000308 <is_button_pressed>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00d      	beq.n	800043e <fsm_automatic_run+0xb6>
				status_pedestrian = STOP_LIGHT;
 8000422:	4b83      	ldr	r3, [pc, #524]	; (8000630 <fsm_automatic_run+0x2a8>)
 8000424:	222d      	movs	r2, #45	; 0x2d
 8000426:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000428:	f644 6020 	movw	r0, #20000	; 0x4e20
 800042c:	f001 fc2e 	bl	8001c8c <setTimer1>

				buzzer_freq = BUZZER_FREQ_START;
 8000430:	4b80      	ldr	r3, [pc, #512]	; (8000634 <fsm_automatic_run+0x2ac>)
 8000432:	2232      	movs	r2, #50	; 0x32
 8000434:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000436:	4b80      	ldr	r3, [pc, #512]	; (8000638 <fsm_automatic_run+0x2b0>)
 8000438:	f240 5214 	movw	r2, #1300	; 0x514
 800043c:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag){
 800043e:	4b7f      	ldr	r3, [pc, #508]	; (800063c <fsm_automatic_run+0x2b4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d007      	beq.n	8000456 <fsm_automatic_run+0xce>
				setTimer3(yellow_time);
 8000446:	4b7e      	ldr	r3, [pc, #504]	; (8000640 <fsm_automatic_run+0x2b8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fc56 	bl	8001cfc <setTimer3>
				status = AUTO_YELLOW1;
 8000450:	4b74      	ldr	r3, [pc, #464]	; (8000624 <fsm_automatic_run+0x29c>)
 8000452:	2202      	movs	r2, #2
 8000454:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff56 	bl	8000308 <is_button_pressed>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d009      	beq.n	8000476 <fsm_automatic_run+0xee>
				status = MAN_GREEN1;
 8000462:	4b70      	ldr	r3, [pc, #448]	; (8000624 <fsm_automatic_run+0x29c>)
 8000464:	2215      	movs	r2, #21
 8000466:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000468:	f242 7010 	movw	r0, #10000	; 0x2710
 800046c:	f001 fcd2 	bl	8001e14 <setTimer8>
				setTimer2(10);
 8000470:	200a      	movs	r0, #10
 8000472:	f001 fc27 	bl	8001cc4 <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff46 	bl	8000308 <is_button_pressed>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	f000 8152 	beq.w	8000728 <fsm_automatic_run+0x3a0>
				status = TUNING_RED;
 8000484:	4b67      	ldr	r3, [pc, #412]	; (8000624 <fsm_automatic_run+0x29c>)
 8000486:	221f      	movs	r2, #31
 8000488:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 800048a:	4b6e      	ldr	r3, [pc, #440]	; (8000644 <fsm_automatic_run+0x2bc>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a6e      	ldr	r2, [pc, #440]	; (8000648 <fsm_automatic_run+0x2c0>)
 8000490:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000492:	4b6b      	ldr	r3, [pc, #428]	; (8000640 <fsm_automatic_run+0x2b8>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a6d      	ldr	r2, [pc, #436]	; (800064c <fsm_automatic_run+0x2c4>)
 8000498:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 800049a:	4b63      	ldr	r3, [pc, #396]	; (8000628 <fsm_automatic_run+0x2a0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a6c      	ldr	r2, [pc, #432]	; (8000650 <fsm_automatic_run+0x2c8>)
 80004a0:	6013      	str	r3, [r2, #0]


				setTimer8(TUNING_TIME);
 80004a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80004a6:	f001 fcb5 	bl	8001e14 <setTimer8>
				setTimer9(10);
 80004aa:	200a      	movs	r0, #10
 80004ac:	f001 fcce 	bl	8001e4c <setTimer9>
			}


			break;
 80004b0:	e13a      	b.n	8000728 <fsm_automatic_run+0x3a0>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fd2a 	bl	8000f0c <setRed>
			setYellow(0);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fd67 	bl	8000f8c <setYellow>

				// display value by UART
			sendingUART_RUN();
 80004be:	f001 f85d 	bl	800157c <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff20 	bl	8000308 <is_button_pressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00d      	beq.n	80004ea <fsm_automatic_run+0x162>
				status_pedestrian =	STOP_LIGHT;
 80004ce:	4b58      	ldr	r3, [pc, #352]	; (8000630 <fsm_automatic_run+0x2a8>)
 80004d0:	222d      	movs	r2, #45	; 0x2d
 80004d2:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80004d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80004d8:	f001 fbd8 	bl	8001c8c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80004dc:	4b55      	ldr	r3, [pc, #340]	; (8000634 <fsm_automatic_run+0x2ac>)
 80004de:	2232      	movs	r2, #50	; 0x32
 80004e0:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80004e2:	4b55      	ldr	r3, [pc, #340]	; (8000638 <fsm_automatic_run+0x2b0>)
 80004e4:	f240 5214 	movw	r2, #1300	; 0x514
 80004e8:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 80004ea:	4b54      	ldr	r3, [pc, #336]	; (800063c <fsm_automatic_run+0x2b4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d010      	beq.n	8000514 <fsm_automatic_run+0x18c>
 80004f2:	4b58      	ldr	r3, [pc, #352]	; (8000654 <fsm_automatic_run+0x2cc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d00c      	beq.n	8000514 <fsm_automatic_run+0x18c>
				setTimer3(red_time);
 80004fa:	4b52      	ldr	r3, [pc, #328]	; (8000644 <fsm_automatic_run+0x2bc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fbfc 	bl	8001cfc <setTimer3>
				setTimer4(green_time_2);
 8000504:	4b54      	ldr	r3, [pc, #336]	; (8000658 <fsm_automatic_run+0x2d0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fc13 	bl	8001d34 <setTimer4>
				status = AUTO_GREEN2;
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <fsm_automatic_run+0x29c>)
 8000510:	220b      	movs	r2, #11
 8000512:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff fef7 	bl	8000308 <is_button_pressed>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d009      	beq.n	8000534 <fsm_automatic_run+0x1ac>
				status = MAN_YELLOW1;
 8000520:	4b40      	ldr	r3, [pc, #256]	; (8000624 <fsm_automatic_run+0x29c>)
 8000522:	2216      	movs	r2, #22
 8000524:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000526:	f242 7010 	movw	r0, #10000	; 0x2710
 800052a:	f001 fc73 	bl	8001e14 <setTimer8>
				setTimer2(10);
 800052e:	200a      	movs	r0, #10
 8000530:	f001 fbc8 	bl	8001cc4 <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000534:	2002      	movs	r0, #2
 8000536:	f7ff fee7 	bl	8000308 <is_button_pressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f000 80f5 	beq.w	800072c <fsm_automatic_run+0x3a4>
				status = TUNING_RED;
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <fsm_automatic_run+0x29c>)
 8000544:	221f      	movs	r2, #31
 8000546:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 8000548:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <fsm_automatic_run+0x2bc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3e      	ldr	r2, [pc, #248]	; (8000648 <fsm_automatic_run+0x2c0>)
 800054e:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000550:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <fsm_automatic_run+0x2b8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a3d      	ldr	r2, [pc, #244]	; (800064c <fsm_automatic_run+0x2c4>)
 8000556:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <fsm_automatic_run+0x2a0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a3c      	ldr	r2, [pc, #240]	; (8000650 <fsm_automatic_run+0x2c8>)
 800055e:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 8000560:	f242 7010 	movw	r0, #10000	; 0x2710
 8000564:	f001 fc56 	bl	8001e14 <setTimer8>
				setTimer9(10);
 8000568:	200a      	movs	r0, #10
 800056a:	f001 fc6f 	bl	8001e4c <setTimer9>
			}


			break;
 800056e:	e0dd      	b.n	800072c <fsm_automatic_run+0x3a4>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fccb 	bl	8000f0c <setRed>
			setGreen(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fd48 	bl	800100c <setGreen>

				// display value by UART
			sendingUART_RUN();
 800057c:	f000 fffe 	bl	800157c <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fec1 	bl	8000308 <is_button_pressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d011      	beq.n	80005b0 <fsm_automatic_run+0x228>
				setTimer5(BUZZER_CYCLE);
 800058c:	f240 5014 	movw	r0, #1300	; 0x514
 8000590:	f001 fbec 	bl	8001d6c <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <fsm_automatic_run+0x2a8>)
 8000596:	222e      	movs	r2, #46	; 0x2e
 8000598:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 800059a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800059e:	f001 fb75 	bl	8001c8c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80005a2:	4b24      	ldr	r3, [pc, #144]	; (8000634 <fsm_automatic_run+0x2ac>)
 80005a4:	2232      	movs	r2, #50	; 0x32
 80005a6:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <fsm_automatic_run+0x2b0>)
 80005aa:	f240 5214 	movw	r2, #1300	; 0x514
 80005ae:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <fsm_automatic_run+0x2cc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <fsm_automatic_run+0x240>
				setTimer4(yellow_time_2);
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <fsm_automatic_run+0x2d4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fbb9 	bl	8001d34 <setTimer4>
				status = AUTO_YELLOW2;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <fsm_automatic_run+0x29c>)
 80005c4:	220c      	movs	r2, #12
 80005c6:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fe9d 	bl	8000308 <is_button_pressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <fsm_automatic_run+0x260>
				status = MAN_GREEN2;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <fsm_automatic_run+0x29c>)
 80005d6:	2217      	movs	r2, #23
 80005d8:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 80005da:	f242 7010 	movw	r0, #10000	; 0x2710
 80005de:	f001 fc19 	bl	8001e14 <setTimer8>
				setTimer2(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f001 fb6e 	bl	8001cc4 <setTimer2>
			}

			if (is_button_pressed(2)) {
 80005e8:	2002      	movs	r0, #2
 80005ea:	f7ff fe8d 	bl	8000308 <is_button_pressed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f000 809d 	beq.w	8000730 <fsm_automatic_run+0x3a8>
				status = TUNING_RED;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <fsm_automatic_run+0x29c>)
 80005f8:	221f      	movs	r2, #31
 80005fa:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <fsm_automatic_run+0x2bc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a11      	ldr	r2, [pc, #68]	; (8000648 <fsm_automatic_run+0x2c0>)
 8000602:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <fsm_automatic_run+0x2b8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <fsm_automatic_run+0x2c4>)
 800060a:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <fsm_automatic_run+0x2a0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <fsm_automatic_run+0x2c8>)
 8000612:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 8000614:	f242 7010 	movw	r0, #10000	; 0x2710
 8000618:	f001 fbfc 	bl	8001e14 <setTimer8>
				setTimer9(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f001 fc15 	bl	8001e4c <setTimer9>
			}



			break;
 8000622:	e085      	b.n	8000730 <fsm_automatic_run+0x3a8>
 8000624:	20000004 	.word	0x20000004
 8000628:	20000014 	.word	0x20000014
 800062c:	20000018 	.word	0x20000018
 8000630:	20000008 	.word	0x20000008
 8000634:	20000120 	.word	0x20000120
 8000638:	2000011c 	.word	0x2000011c
 800063c:	20000134 	.word	0x20000134
 8000640:	20000010 	.word	0x20000010
 8000644:	2000000c 	.word	0x2000000c
 8000648:	200000f8 	.word	0x200000f8
 800064c:	200000f0 	.word	0x200000f0
 8000650:	200000f4 	.word	0x200000f4
 8000654:	2000013c 	.word	0x2000013c
 8000658:	20000020 	.word	0x20000020
 800065c:	2000001c 	.word	0x2000001c
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fc53 	bl	8000f0c <setRed>
			setYellow(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fc90 	bl	8000f8c <setYellow>

				// display value by UART
			sendingUART_RUN();
 800066c:	f000 ff86 	bl	800157c <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe49 	bl	8000308 <is_button_pressed>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d011      	beq.n	80006a0 <fsm_automatic_run+0x318>
				setTimer5(BUZZER_CYCLE);
 800067c:	f240 5014 	movw	r0, #1300	; 0x514
 8000680:	f001 fb74 	bl	8001d6c <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <fsm_automatic_run+0x3b4>)
 8000686:	222e      	movs	r2, #46	; 0x2e
 8000688:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 800068a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800068e:	f001 fafd 	bl	8001c8c <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <fsm_automatic_run+0x3b8>)
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <fsm_automatic_run+0x3bc>)
 800069a:	f240 5214 	movw	r2, #1300	; 0x514
 800069e:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <fsm_automatic_run+0x3c0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d010      	beq.n	80006ca <fsm_automatic_run+0x342>
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <fsm_automatic_run+0x3c4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00c      	beq.n	80006ca <fsm_automatic_run+0x342>
				setTimer3(green_time);
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <fsm_automatic_run+0x3c8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fb21 	bl	8001cfc <setTimer3>
				setTimer4(red_time_2);
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <fsm_automatic_run+0x3cc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fb38 	bl	8001d34 <setTimer4>
				status = AUTO_GREEN1;
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <fsm_automatic_run+0x3d0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff fe1c 	bl	8000308 <is_button_pressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d009      	beq.n	80006ea <fsm_automatic_run+0x362>
				status = MAN_YELLOW2;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <fsm_automatic_run+0x3d0>)
 80006d8:	2218      	movs	r2, #24
 80006da:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 80006dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80006e0:	f001 fb98 	bl	8001e14 <setTimer8>
				setTimer2(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f001 faed 	bl	8001cc4 <setTimer2>
			}

			if (is_button_pressed(2)) {
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff fe0c 	bl	8000308 <is_button_pressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01e      	beq.n	8000734 <fsm_automatic_run+0x3ac>
				status = TUNING_RED;
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <fsm_automatic_run+0x3d0>)
 80006f8:	221f      	movs	r2, #31
 80006fa:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <fsm_automatic_run+0x3d4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <fsm_automatic_run+0x3d8>)
 8000702:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <fsm_automatic_run+0x3dc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <fsm_automatic_run+0x3e0>)
 800070a:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <fsm_automatic_run+0x3c8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <fsm_automatic_run+0x3e4>)
 8000712:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 8000714:	f242 7010 	movw	r0, #10000	; 0x2710
 8000718:	f001 fb7c 	bl	8001e14 <setTimer8>
				setTimer9(10);
 800071c:	200a      	movs	r0, #10
 800071e:	f001 fb95 	bl	8001e4c <setTimer9>
			}

			break;
 8000722:	e007      	b.n	8000734 <fsm_automatic_run+0x3ac>


		default:
			break;
 8000724:	bf00      	nop
 8000726:	e006      	b.n	8000736 <fsm_automatic_run+0x3ae>
			break;
 8000728:	bf00      	nop
 800072a:	e004      	b.n	8000736 <fsm_automatic_run+0x3ae>
			break;
 800072c:	bf00      	nop
 800072e:	e002      	b.n	8000736 <fsm_automatic_run+0x3ae>
			break;
 8000730:	bf00      	nop
 8000732:	e000      	b.n	8000736 <fsm_automatic_run+0x3ae>
			break;
 8000734:	bf00      	nop
	}
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008
 8000740:	20000120 	.word	0x20000120
 8000744:	2000011c 	.word	0x2000011c
 8000748:	2000013c 	.word	0x2000013c
 800074c:	20000134 	.word	0x20000134
 8000750:	20000014 	.word	0x20000014
 8000754:	20000018 	.word	0x20000018
 8000758:	20000004 	.word	0x20000004
 800075c:	2000000c 	.word	0x2000000c
 8000760:	200000f8 	.word	0x200000f8
 8000764:	20000010 	.word	0x20000010
 8000768:	200000f0 	.word	0x200000f0
 800076c:	200000f4 	.word	0x200000f4

08000770 <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	switch(status){
 8000774:	4b8c      	ldr	r3, [pc, #560]	; (80009a8 <fsm_manual_run+0x238>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3b15      	subs	r3, #21
 800077a:	2b03      	cmp	r3, #3
 800077c:	f200 8185 	bhi.w	8000a8a <fsm_manual_run+0x31a>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <fsm_manual_run+0x18>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	08000799 	.word	0x08000799
 800078c:	08000849 	.word	0x08000849
 8000790:	080008f9 	.word	0x080008f9
 8000794:	080009dd 	.word	0x080009dd
	case MAN_GREEN1:
		// TODO:
			// RED2 on, GREEN1 on
		setRed(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fbb7 	bl	8000f0c <setRed>
		setGreen(0);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fc34 	bl	800100c <setGreen>

			// display value by UART
		sendingUART_RUN();
 80007a4:	f000 feea 	bl	800157c <sendingUART_RUN>


			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff fdad 	bl	8000308 <is_button_pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00d      	beq.n	80007d0 <fsm_manual_run+0x60>
			status_pedestrian = STOP_LIGHT;
 80007b4:	4b7d      	ldr	r3, [pc, #500]	; (80009ac <fsm_manual_run+0x23c>)
 80007b6:	222d      	movs	r2, #45	; 0x2d
 80007b8:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80007ba:	f644 6020 	movw	r0, #20000	; 0x4e20
 80007be:	f001 fa65 	bl	8001c8c <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80007c2:	4b7b      	ldr	r3, [pc, #492]	; (80009b0 <fsm_manual_run+0x240>)
 80007c4:	2232      	movs	r2, #50	; 0x32
 80007c6:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80007c8:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <fsm_manual_run+0x244>)
 80007ca:	f240 5214 	movw	r2, #1300	; 0x514
 80007ce:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fd99 	bl	8000308 <is_button_pressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <fsm_manual_run+0x7a>
			setTimer8(MANUAL_TIME);
 80007dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80007e0:	f001 fb18 	bl	8001e14 <setTimer8>
			status = MAN_YELLOW1;
 80007e4:	4b70      	ldr	r3, [pc, #448]	; (80009a8 <fsm_manual_run+0x238>)
 80007e6:	2216      	movs	r2, #22
 80007e8:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 80007ea:	4b73      	ldr	r3, [pc, #460]	; (80009b8 <fsm_manual_run+0x248>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00c      	beq.n	800080c <fsm_manual_run+0x9c>
			status = AUTO_YELLOW1;
 80007f2:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <fsm_manual_run+0x238>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
			setTimer8(yellow_time);
 80007f8:	4b70      	ldr	r3, [pc, #448]	; (80009bc <fsm_manual_run+0x24c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fb09 	bl	8001e14 <setTimer8>
			setTimer4(yellow_time);
 8000802:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <fsm_manual_run+0x24c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fa94 	bl	8001d34 <setTimer4>
		}

		if (is_button_pressed(2)) {
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff fd7b 	bl	8000308 <is_button_pressed>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 813a 	beq.w	8000a8e <fsm_manual_run+0x31e>
			status = TUNING_RED;
 800081a:	4b63      	ldr	r3, [pc, #396]	; (80009a8 <fsm_manual_run+0x238>)
 800081c:	221f      	movs	r2, #31
 800081e:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 8000820:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <fsm_manual_run+0x250>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a67      	ldr	r2, [pc, #412]	; (80009c4 <fsm_manual_run+0x254>)
 8000826:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000828:	4b64      	ldr	r3, [pc, #400]	; (80009bc <fsm_manual_run+0x24c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a66      	ldr	r2, [pc, #408]	; (80009c8 <fsm_manual_run+0x258>)
 800082e:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000830:	4b66      	ldr	r3, [pc, #408]	; (80009cc <fsm_manual_run+0x25c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a66      	ldr	r2, [pc, #408]	; (80009d0 <fsm_manual_run+0x260>)
 8000836:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000838:	f242 7010 	movw	r0, #10000	; 0x2710
 800083c:	f001 faea 	bl	8001e14 <setTimer8>
			setTimer9(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f001 fb03 	bl	8001e4c <setTimer9>
		}

		break;
 8000846:	e122      	b.n	8000a8e <fsm_manual_run+0x31e>
	case MAN_YELLOW1:
		// TODO:
			// RED2 still on, YELLOW1 on
		setRed(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 fb5f 	bl	8000f0c <setRed>
		setYellow(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fb9c 	bl	8000f8c <setYellow>

			// display value by UART
		sendingUART_RUN();
 8000854:	f000 fe92 	bl	800157c <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fd55 	bl	8000308 <is_button_pressed>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00d      	beq.n	8000880 <fsm_manual_run+0x110>
			status_pedestrian =	STOP_LIGHT;
 8000864:	4b51      	ldr	r3, [pc, #324]	; (80009ac <fsm_manual_run+0x23c>)
 8000866:	222d      	movs	r2, #45	; 0x2d
 8000868:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 800086a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800086e:	f001 fa0d 	bl	8001c8c <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <fsm_manual_run+0x240>)
 8000874:	2232      	movs	r2, #50	; 0x32
 8000876:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000878:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <fsm_manual_run+0x244>)
 800087a:	f240 5214 	movw	r2, #1300	; 0x514
 800087e:	601a      	str	r2, [r3, #0]
		}
		//SWITCH CASE
		if(is_button_pressed(1)){
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff fd41 	bl	8000308 <is_button_pressed>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d006      	beq.n	800089a <fsm_manual_run+0x12a>
			setTimer8(MANUAL_TIME);
 800088c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000890:	f001 fac0 	bl	8001e14 <setTimer8>
			status = MAN_GREEN2;
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <fsm_manual_run+0x238>)
 8000896:	2217      	movs	r2, #23
 8000898:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <fsm_manual_run+0x248>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00c      	beq.n	80008bc <fsm_manual_run+0x14c>
			status = AUTO_GREEN2;
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <fsm_manual_run+0x238>)
 80008a4:	220b      	movs	r2, #11
 80008a6:	601a      	str	r2, [r3, #0]
			setTimer8(red_time);
 80008a8:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <fsm_manual_run+0x250>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fab1 	bl	8001e14 <setTimer8>
			setTimer4(green_time_2);
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <fsm_manual_run+0x264>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fa3c 	bl	8001d34 <setTimer4>
		}

		if (is_button_pressed(2)) {
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fd23 	bl	8000308 <is_button_pressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 80e4 	beq.w	8000a92 <fsm_manual_run+0x322>
			status = TUNING_RED;
 80008ca:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <fsm_manual_run+0x238>)
 80008cc:	221f      	movs	r2, #31
 80008ce:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 80008d0:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <fsm_manual_run+0x250>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <fsm_manual_run+0x254>)
 80008d6:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <fsm_manual_run+0x24c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a3a      	ldr	r2, [pc, #232]	; (80009c8 <fsm_manual_run+0x258>)
 80008de:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 80008e0:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <fsm_manual_run+0x25c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <fsm_manual_run+0x260>)
 80008e6:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 80008e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ec:	f001 fa92 	bl	8001e14 <setTimer8>
			setTimer9(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f001 faab 	bl	8001e4c <setTimer9>
		}

		break;
 80008f6:	e0cc      	b.n	8000a92 <fsm_manual_run+0x322>
	case MAN_GREEN2:
		// TODO:
			// RED2 off, GREEN2 on, RED1 on
		setRed(0);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fb07 	bl	8000f0c <setRed>
		setGreen(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fb84 	bl	800100c <setGreen>

			// display value by UART
		sendingUART_RUN();
 8000904:	f000 fe3a 	bl	800157c <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fcfd 	bl	8000308 <is_button_pressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00d      	beq.n	8000930 <fsm_manual_run+0x1c0>
			status_pedestrian = WALK_LIGHT;
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <fsm_manual_run+0x23c>)
 8000916:	222e      	movs	r2, #46	; 0x2e
 8000918:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 800091a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800091e:	f001 f9b5 	bl	8001c8c <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <fsm_manual_run+0x240>)
 8000924:	2232      	movs	r2, #50	; 0x32
 8000926:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <fsm_manual_run+0x244>)
 800092a:	f240 5214 	movw	r2, #1300	; 0x514
 800092e:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fce9 	bl	8000308 <is_button_pressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <fsm_manual_run+0x1da>
			setTimer8(MANUAL_TIME);
 800093c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000940:	f001 fa68 	bl	8001e14 <setTimer8>
			status = MAN_YELLOW2;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <fsm_manual_run+0x238>)
 8000946:	2218      	movs	r2, #24
 8000948:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <fsm_manual_run+0x248>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00c      	beq.n	800096c <fsm_manual_run+0x1fc>
			status = AUTO_YELLOW2;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <fsm_manual_run+0x238>)
 8000954:	220c      	movs	r2, #12
 8000956:	601a      	str	r2, [r3, #0]
			setTimer8(yellow_time_2);
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <fsm_manual_run+0x268>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa59 	bl	8001e14 <setTimer8>
			setTimer3(yellow_time_2);
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <fsm_manual_run+0x268>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f9c8 	bl	8001cfc <setTimer3>
		}

		if (is_button_pressed(2)) {
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fccb 	bl	8000308 <is_button_pressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 808e 	beq.w	8000a96 <fsm_manual_run+0x326>
			status = TUNING_RED;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <fsm_manual_run+0x238>)
 800097c:	221f      	movs	r2, #31
 800097e:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <fsm_manual_run+0x250>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <fsm_manual_run+0x254>)
 8000986:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <fsm_manual_run+0x24c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <fsm_manual_run+0x258>)
 800098e:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <fsm_manual_run+0x25c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <fsm_manual_run+0x260>)
 8000996:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000998:	f242 7010 	movw	r0, #10000	; 0x2710
 800099c:	f001 fa3a 	bl	8001e14 <setTimer8>
			setTimer9(10);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f001 fa53 	bl	8001e4c <setTimer9>
		}

		break;
 80009a6:	e076      	b.n	8000a96 <fsm_manual_run+0x326>
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000120 	.word	0x20000120
 80009b4:	2000011c 	.word	0x2000011c
 80009b8:	2000015c 	.word	0x2000015c
 80009bc:	20000010 	.word	0x20000010
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	200000f8 	.word	0x200000f8
 80009c8:	200000f0 	.word	0x200000f0
 80009cc:	20000014 	.word	0x20000014
 80009d0:	200000f4 	.word	0x200000f4
 80009d4:	20000020 	.word	0x20000020
 80009d8:	2000001c 	.word	0x2000001c
	case MAN_YELLOW2:
		// TODO:
			// RED1 still on, YELLOW2 on
		setRed(0);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fa95 	bl	8000f0c <setRed>
		setYellow(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 fad2 	bl	8000f8c <setYellow>

			// display value by UART
		sendingUART_RUN();
 80009e8:	f000 fdc8 	bl	800157c <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fc8b 	bl	8000308 <is_button_pressed>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00d      	beq.n	8000a14 <fsm_manual_run+0x2a4>
			status_pedestrian = WALK_LIGHT;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <fsm_manual_run+0x330>)
 80009fa:	222e      	movs	r2, #46	; 0x2e
 80009fc:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80009fe:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000a02:	f001 f943 	bl	8001c8c <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <fsm_manual_run+0x334>)
 8000a08:	2232      	movs	r2, #50	; 0x32
 8000a0a:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <fsm_manual_run+0x338>)
 8000a0e:	f240 5214 	movw	r2, #1300	; 0x514
 8000a12:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fc77 	bl	8000308 <is_button_pressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <fsm_manual_run+0x2be>
			setTimer8(MANUAL_TIME);
 8000a20:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a24:	f001 f9f6 	bl	8001e14 <setTimer8>
			status = MAN_GREEN1;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <fsm_manual_run+0x33c>)
 8000a2a:	2215      	movs	r2, #21
 8000a2c:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <fsm_manual_run+0x340>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00c      	beq.n	8000a50 <fsm_manual_run+0x2e0>
			setTimer8(green_time);
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <fsm_manual_run+0x344>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f9ea 	bl	8001e14 <setTimer8>
			setTimer4(red_time_2);
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <fsm_manual_run+0x348>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f975 	bl	8001d34 <setTimer4>
			status = AUTO_GREEN1;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <fsm_manual_run+0x33c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
		}

		if (is_button_pressed(2)) {
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fc59 	bl	8000308 <is_button_pressed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d01e      	beq.n	8000a9a <fsm_manual_run+0x32a>
			status = TUNING_RED;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <fsm_manual_run+0x33c>)
 8000a5e:	221f      	movs	r2, #31
 8000a60:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <fsm_manual_run+0x34c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <fsm_manual_run+0x350>)
 8000a68:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <fsm_manual_run+0x354>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <fsm_manual_run+0x358>)
 8000a70:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <fsm_manual_run+0x344>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <fsm_manual_run+0x35c>)
 8000a78:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000a7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a7e:	f001 f9c9 	bl	8001e14 <setTimer8>
			setTimer9(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f001 f9e2 	bl	8001e4c <setTimer9>
		}

		break;
 8000a88:	e007      	b.n	8000a9a <fsm_manual_run+0x32a>

	default:
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e006      	b.n	8000a9c <fsm_manual_run+0x32c>
		break;
 8000a8e:	bf00      	nop
 8000a90:	e004      	b.n	8000a9c <fsm_manual_run+0x32c>
		break;
 8000a92:	bf00      	nop
 8000a94:	e002      	b.n	8000a9c <fsm_manual_run+0x32c>
		break;
 8000a96:	bf00      	nop
 8000a98:	e000      	b.n	8000a9c <fsm_manual_run+0x32c>
		break;
 8000a9a:	bf00      	nop
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000120 	.word	0x20000120
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	2000015c 	.word	0x2000015c
 8000ab4:	20000014 	.word	0x20000014
 8000ab8:	20000018 	.word	0x20000018
 8000abc:	2000000c 	.word	0x2000000c
 8000ac0:	200000f8 	.word	0x200000f8
 8000ac4:	20000010 	.word	0x20000010
 8000ac8:	200000f0 	.word	0x200000f0
 8000acc:	200000f4 	.word	0x200000f4

08000ad0 <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <fsm_pedestrian_run+0xc0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b2d      	cmp	r3, #45	; 0x2d
 8000ada:	d002      	beq.n	8000ae2 <fsm_pedestrian_run+0x12>
 8000adc:	2b2e      	cmp	r3, #46	; 0x2e
 8000ade:	d028      	beq.n	8000b32 <fsm_pedestrian_run+0x62>
			}

			break;
		default:

			break;
 8000ae0:	e054      	b.n	8000b8c <fsm_pedestrian_run+0xbc>
			setPedestrian(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fad2 	bl	800108c <setPedestrian>
			if(timer1_flag){
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <fsm_pedestrian_run+0xc4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d010      	beq.n	8000b12 <fsm_pedestrian_run+0x42>
				status_pedestrian = -1;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <fsm_pedestrian_run+0xc0>)
 8000af2:	f04f 32ff 	mov.w	r2, #4294967295
 8000af6:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fac7 	bl	800108c <setPedestrian>
				buzzer_freq = 0;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <fsm_pedestrian_run+0xc8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <fsm_pedestrian_run+0xcc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <fsm_pedestrian_run+0xd0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2){
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <fsm_pedestrian_run+0xd4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b0b      	cmp	r3, #11
 8000b18:	d003      	beq.n	8000b22 <fsm_pedestrian_run+0x52>
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <fsm_pedestrian_run+0xd4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b0c      	cmp	r3, #12
 8000b20:	d131      	bne.n	8000b86 <fsm_pedestrian_run+0xb6>
				status_pedestrian = WALK_LIGHT;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <fsm_pedestrian_run+0xc0>)
 8000b24:	222e      	movs	r2, #46	; 0x2e
 8000b26:	601a      	str	r2, [r3, #0]
				setTimer5(BUZZER_CYCLE);
 8000b28:	f240 5014 	movw	r0, #1300	; 0x514
 8000b2c:	f001 f91e 	bl	8001d6c <setTimer5>
			break;
 8000b30:	e029      	b.n	8000b86 <fsm_pedestrian_run+0xb6>
			setPedestrian(1);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 faaa 	bl	800108c <setPedestrian>
			Buzzer();
 8000b38:	f000 fdcc 	bl	80016d4 <Buzzer>
			if(timer1_flag){
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <fsm_pedestrian_run+0xc4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d010      	beq.n	8000b66 <fsm_pedestrian_run+0x96>
				status_pedestrian = -1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <fsm_pedestrian_run+0xc0>)
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4a:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 fa9d 	bl	800108c <setPedestrian>
				buzzer_freq = 0;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <fsm_pedestrian_run+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <fsm_pedestrian_run+0xcc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <fsm_pedestrian_run+0xd0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1){
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <fsm_pedestrian_run+0xd4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <fsm_pedestrian_run+0xa6>
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <fsm_pedestrian_run+0xd4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d109      	bne.n	8000b8a <fsm_pedestrian_run+0xba>
				status_pedestrian = STOP_LIGHT;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <fsm_pedestrian_run+0xc0>)
 8000b78:	222d      	movs	r2, #45	; 0x2d
 8000b7a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <fsm_pedestrian_run+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000b84:	e001      	b.n	8000b8a <fsm_pedestrian_run+0xba>
			break;
 8000b86:	bf00      	nop
 8000b88:	e000      	b.n	8000b8c <fsm_pedestrian_run+0xbc>
			break;
 8000b8a:	bf00      	nop
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000124 	.word	0x20000124
 8000b98:	20000120 	.word	0x20000120
 8000b9c:	2000011c 	.word	0x2000011c
 8000ba0:	20000178 	.word	0x20000178
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	switch(status){
 8000bac:	4baa      	ldr	r3, [pc, #680]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b21      	cmp	r3, #33	; 0x21
 8000bb2:	f000 8082 	beq.w	8000cba <fsm_tuning_run+0x112>
 8000bb6:	2b21      	cmp	r3, #33	; 0x21
 8000bb8:	f300 818a 	bgt.w	8000ed0 <fsm_tuning_run+0x328>
 8000bbc:	2b1f      	cmp	r3, #31
 8000bbe:	d003      	beq.n	8000bc8 <fsm_tuning_run+0x20>
 8000bc0:	2b20      	cmp	r3, #32
 8000bc2:	f000 80f3 	beq.w	8000dac <fsm_tuning_run+0x204>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 8000bc6:	e183      	b.n	8000ed0 <fsm_tuning_run+0x328>
			if(is_button_pressed(3)){
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f7ff fb9d 	bl	8000308 <is_button_pressed>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00b      	beq.n	8000bec <fsm_tuning_run+0x44>
				temp_red += 1000;
 8000bd4:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bdc:	4a9f      	ldr	r2, [pc, #636]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000bde:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000be0:	f000 fd3c 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000be4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000be8:	f001 f914 	bl	8001e14 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff fbab 	bl	8000348 <is_button_pressed_1s>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00b      	beq.n	8000c10 <fsm_tuning_run+0x68>
				temp_red -= 1000;
 8000bf8:	4b98      	ldr	r3, [pc, #608]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c00:	4a96      	ldr	r2, [pc, #600]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000c02:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000c04:	f000 fd2a 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000c08:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c0c:	f001 f902 	bl	8001e14 <setTimer8>
			if(timer9_flag){
 8000c10:	4b93      	ldr	r3, [pc, #588]	; (8000e60 <fsm_tuning_run+0x2b8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00d      	beq.n	8000c34 <fsm_tuning_run+0x8c>
				setRed(0);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f977 	bl	8000f0c <setRed>
				setRed(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 f974 	bl	8000f0c <setRed>
				setTimer9(2000);
 8000c24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c28:	f001 f910 	bl	8001e4c <setTimer9>
				setTimer7(1000);
 8000c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c30:	f001 f8d4 	bl	8001ddc <setTimer7>
			if(timer7_flag){
 8000c34:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <fsm_tuning_run+0x2bc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <fsm_tuning_run+0x9a>
				setRed(2);	// Turn off
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 f965 	bl	8000f0c <setRed>
			if(timer8_flag){
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <fsm_tuning_run+0x2c0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <fsm_tuning_run+0xaa>
				status = AUTO_INIT;
 8000c4a:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	601a      	str	r2, [r3, #0]
			break;
 8000c50:	e140      	b.n	8000ed4 <fsm_tuning_run+0x32c>
			else if(is_button_pressed(2)){
 8000c52:	2002      	movs	r0, #2
 8000c54:	f7ff fb58 	bl	8000308 <is_button_pressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00a      	beq.n	8000c74 <fsm_tuning_run+0xcc>
				status = TUNING_YELLOW;
 8000c5e:	4b7e      	ldr	r3, [pc, #504]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000c60:	2221      	movs	r2, #33	; 0x21
 8000c62:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000c64:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c68:	f001 f8d4 	bl	8001e14 <setTimer8>
				setTimer9(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f001 f8ed 	bl	8001e4c <setTimer9>
			break;
 8000c72:	e12f      	b.n	8000ed4 <fsm_tuning_run+0x32c>
			else if(is_button_pressed(1)){
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fb47 	bl	8000308 <is_button_pressed>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 8129 	beq.w	8000ed4 <fsm_tuning_run+0x32c>
				red_time = temp_red;
 8000c82:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a79      	ldr	r2, [pc, #484]	; (8000e6c <fsm_tuning_run+0x2c4>)
 8000c88:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000c8a:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a78      	ldr	r2, [pc, #480]	; (8000e70 <fsm_tuning_run+0x2c8>)
 8000c90:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000c92:	4b78      	ldr	r3, [pc, #480]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a78      	ldr	r2, [pc, #480]	; (8000e78 <fsm_tuning_run+0x2d0>)
 8000c98:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000c9a:	4b76      	ldr	r3, [pc, #472]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a77      	ldr	r2, [pc, #476]	; (8000e7c <fsm_tuning_run+0x2d4>)
 8000ca0:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000ca2:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a77      	ldr	r2, [pc, #476]	; (8000e84 <fsm_tuning_run+0x2dc>)
 8000ca8:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000caa:	4b75      	ldr	r3, [pc, #468]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a76      	ldr	r2, [pc, #472]	; (8000e88 <fsm_tuning_run+0x2e0>)
 8000cb0:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000cb2:	4b69      	ldr	r3, [pc, #420]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	601a      	str	r2, [r3, #0]
			break;
 8000cb8:	e10c      	b.n	8000ed4 <fsm_tuning_run+0x32c>
			if(is_button_pressed(3)){
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f7ff fb24 	bl	8000308 <is_button_pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <fsm_tuning_run+0x136>
				temp_yellow += 1000;
 8000cc6:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cce:	4a69      	ldr	r2, [pc, #420]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000cd0:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000cd2:	f000 fcc3 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000cd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cda:	f001 f89b 	bl	8001e14 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff fb32 	bl	8000348 <is_button_pressed_1s>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <fsm_tuning_run+0x15a>
				temp_yellow -= 1000;
 8000cea:	4b62      	ldr	r3, [pc, #392]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000cf2:	4a60      	ldr	r2, [pc, #384]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000cf4:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000cf6:	f000 fcb1 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000cfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cfe:	f001 f889 	bl	8001e14 <setTimer8>
			if(timer9_flag){
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <fsm_tuning_run+0x2b8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00d      	beq.n	8000d26 <fsm_tuning_run+0x17e>
				setYellow(0);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f93e 	bl	8000f8c <setYellow>
				setYellow(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 f93b 	bl	8000f8c <setYellow>
				setTimer9(2000);
 8000d16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1a:	f001 f897 	bl	8001e4c <setTimer9>
				setTimer7(1000);
 8000d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d22:	f001 f85b 	bl	8001ddc <setTimer7>
			if(timer7_flag){
 8000d26:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <fsm_tuning_run+0x2bc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <fsm_tuning_run+0x18c>
				setRed(2);	// Turn off
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f8ec 	bl	8000f0c <setRed>
			if(timer8_flag){
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <fsm_tuning_run+0x2c0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <fsm_tuning_run+0x19c>
				status = AUTO_INIT;
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	601a      	str	r2, [r3, #0]
			break;
 8000d42:	e0c9      	b.n	8000ed8 <fsm_tuning_run+0x330>
			else if(is_button_pressed(2)){
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fadf 	bl	8000308 <is_button_pressed>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <fsm_tuning_run+0x1be>
				status = TUNING_GREEN;
 8000d50:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000d52:	2220      	movs	r2, #32
 8000d54:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000d56:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d5a:	f001 f85b 	bl	8001e14 <setTimer8>
				setTimer9(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f001 f874 	bl	8001e4c <setTimer9>
			break;
 8000d64:	e0b8      	b.n	8000ed8 <fsm_tuning_run+0x330>
			else if(is_button_pressed(1)){
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff face 	bl	8000308 <is_button_pressed>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b2 	beq.w	8000ed8 <fsm_tuning_run+0x330>
				red_time = temp_red;
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <fsm_tuning_run+0x2c4>)
 8000d7a:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <fsm_tuning_run+0x2b4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a3b      	ldr	r2, [pc, #236]	; (8000e70 <fsm_tuning_run+0x2c8>)
 8000d82:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <fsm_tuning_run+0x2d0>)
 8000d8a:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <fsm_tuning_run+0x2cc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <fsm_tuning_run+0x2d4>)
 8000d92:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <fsm_tuning_run+0x2dc>)
 8000d9a:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <fsm_tuning_run+0x2e0>)
 8000da2:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	601a      	str	r2, [r3, #0]
			break;
 8000daa:	e095      	b.n	8000ed8 <fsm_tuning_run+0x330>
			if(is_button_pressed(3)){
 8000dac:	2003      	movs	r0, #3
 8000dae:	f7ff faab 	bl	8000308 <is_button_pressed>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <fsm_tuning_run+0x228>
				temp_green += 1000;
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000dc2:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000dc4:	f000 fc4a 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000dc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dcc:	f001 f822 	bl	8001e14 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f7ff fab9 	bl	8000348 <is_button_pressed_1s>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <fsm_tuning_run+0x24c>
				temp_green -= 1000;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <fsm_tuning_run+0x2d8>)
 8000de6:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000de8:	f000 fc38 	bl	800165c <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000dec:	f242 7010 	movw	r0, #10000	; 0x2710
 8000df0:	f001 f810 	bl	8001e14 <setTimer8>
			if(timer9_flag){
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <fsm_tuning_run+0x2b8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00d      	beq.n	8000e18 <fsm_tuning_run+0x270>
				setGreen(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f905 	bl	800100c <setGreen>
				setGreen(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 f902 	bl	800100c <setGreen>
				setTimer9(2000);
 8000e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e0c:	f001 f81e 	bl	8001e4c <setTimer9>
				setTimer7(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f000 ffe2 	bl	8001ddc <setTimer7>
			if(timer7_flag){
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <fsm_tuning_run+0x2bc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <fsm_tuning_run+0x27e>
				setRed(2);	// Turn off
 8000e20:	2002      	movs	r0, #2
 8000e22:	f000 f873 	bl	8000f0c <setRed>
			if(timer8_flag){
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <fsm_tuning_run+0x2c0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <fsm_tuning_run+0x28e>
				status = AUTO_INIT;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	601a      	str	r2, [r3, #0]
			break;
 8000e34:	e052      	b.n	8000edc <fsm_tuning_run+0x334>
			else if(is_button_pressed(2)){
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fa66 	bl	8000308 <is_button_pressed>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d024      	beq.n	8000e8c <fsm_tuning_run+0x2e4>
				status = TUNING_RED;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <fsm_tuning_run+0x2b0>)
 8000e44:	221f      	movs	r2, #31
 8000e46:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000e48:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e4c:	f000 ffe2 	bl	8001e14 <setTimer8>
				setTimer9(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f000 fffb 	bl	8001e4c <setTimer9>
			break;
 8000e56:	e041      	b.n	8000edc <fsm_tuning_run+0x334>
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	200000f8 	.word	0x200000f8
 8000e60:	20000164 	.word	0x20000164
 8000e64:	20000154 	.word	0x20000154
 8000e68:	2000015c 	.word	0x2000015c
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000018 	.word	0x20000018
 8000e74:	200000f0 	.word	0x200000f0
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	2000001c 	.word	0x2000001c
 8000e80:	200000f4 	.word	0x200000f4
 8000e84:	20000014 	.word	0x20000014
 8000e88:	20000020 	.word	0x20000020
			else if(is_button_pressed(1)){
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fa3b 	bl	8000308 <is_button_pressed>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d021      	beq.n	8000edc <fsm_tuning_run+0x334>
				red_time = temp_red;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <fsm_tuning_run+0x33c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <fsm_tuning_run+0x340>)
 8000e9e:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <fsm_tuning_run+0x33c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <fsm_tuning_run+0x344>)
 8000ea6:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <fsm_tuning_run+0x348>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <fsm_tuning_run+0x34c>)
 8000eae:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <fsm_tuning_run+0x348>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <fsm_tuning_run+0x350>)
 8000eb6:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <fsm_tuning_run+0x354>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <fsm_tuning_run+0x358>)
 8000ebe:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <fsm_tuning_run+0x354>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <fsm_tuning_run+0x35c>)
 8000ec6:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <fsm_tuning_run+0x360>)
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	601a      	str	r2, [r3, #0]
			break;
 8000ece:	e005      	b.n	8000edc <fsm_tuning_run+0x334>
			break;
 8000ed0:	bf00      	nop
 8000ed2:	e004      	b.n	8000ede <fsm_tuning_run+0x336>
			break;
 8000ed4:	bf00      	nop
 8000ed6:	e002      	b.n	8000ede <fsm_tuning_run+0x336>
			break;
 8000ed8:	bf00      	nop
 8000eda:	e000      	b.n	8000ede <fsm_tuning_run+0x336>
			break;
 8000edc:	bf00      	nop
	}
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000f8 	.word	0x200000f8
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000018 	.word	0x20000018
 8000ef0:	200000f0 	.word	0x200000f0
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	2000001c 	.word	0x2000001c
 8000efc:	200000f4 	.word	0x200000f4
 8000f00:	20000014 	.word	0x20000014
 8000f04:	20000020 	.word	0x20000020
 8000f08:	20000004 	.word	0x20000004

08000f0c <setRed>:
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <setRed+0x16>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d00c      	beq.n	8000f3a <setRed+0x2e>
 8000f20:	e016      	b.n	8000f50 <setRed+0x44>
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <setRed+0x78>)
 8000f2a:	f001 fd92 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2108      	movs	r1, #8
 8000f32:	4815      	ldr	r0, [pc, #84]	; (8000f88 <setRed+0x7c>)
 8000f34:	f001 fd8d 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f38:	e020      	b.n	8000f7c <setRed+0x70>
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <setRed+0x7c>)
 8000f40:	f001 fd87 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <setRed+0x7c>)
 8000f4a:	f001 fd82 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f4e:	e015      	b.n	8000f7c <setRed+0x70>
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <setRed+0x78>)
 8000f58:	f001 fd7b 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <setRed+0x7c>)
 8000f62:	f001 fd76 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <setRed+0x7c>)
 8000f6c:	f001 fd71 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <setRed+0x7c>)
 8000f76:	f001 fd6c 	bl	8002a52 <HAL_GPIO_WritePin>
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <setYellow>:
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <setYellow+0x16>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d00c      	beq.n	8000fba <setYellow+0x2e>
 8000fa0:	e016      	b.n	8000fd0 <setYellow+0x44>
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <setYellow+0x78>)
 8000faa:	f001 fd52 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <setYellow+0x7c>)
 8000fb4:	f001 fd4d 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fb8:	e020      	b.n	8000ffc <setYellow+0x70>
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	4812      	ldr	r0, [pc, #72]	; (8001008 <setYellow+0x7c>)
 8000fc0:	f001 fd47 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <setYellow+0x7c>)
 8000fca:	f001 fd42 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fce:	e015      	b.n	8000ffc <setYellow+0x70>
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <setYellow+0x78>)
 8000fd8:	f001 fd3b 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2108      	movs	r1, #8
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <setYellow+0x7c>)
 8000fe2:	f001 fd36 	bl	8002a52 <HAL_GPIO_WritePin>
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <setYellow+0x7c>)
 8000fec:	f001 fd31 	bl	8002a52 <HAL_GPIO_WritePin>
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <setYellow+0x7c>)
 8000ff6:	f001 fd2c 	bl	8002a52 <HAL_GPIO_WritePin>
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <setGreen>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <setGreen+0x16>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00c      	beq.n	800103a <setGreen+0x2e>
 8001020:	e016      	b.n	8001050 <setGreen+0x44>
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <setGreen+0x78>)
 800102a:	f001 fd12 	bl	8002a52 <HAL_GPIO_WritePin>
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <setGreen+0x7c>)
 8001034:	f001 fd0d 	bl	8002a52 <HAL_GPIO_WritePin>
 8001038:	e020      	b.n	800107c <setGreen+0x70>
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <setGreen+0x7c>)
 8001040:	f001 fd07 	bl	8002a52 <HAL_GPIO_WritePin>
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <setGreen+0x7c>)
 800104a:	f001 fd02 	bl	8002a52 <HAL_GPIO_WritePin>
 800104e:	e015      	b.n	800107c <setGreen+0x70>
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <setGreen+0x78>)
 8001058:	f001 fcfb 	bl	8002a52 <HAL_GPIO_WritePin>
 800105c:	2200      	movs	r2, #0
 800105e:	2108      	movs	r1, #8
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <setGreen+0x7c>)
 8001062:	f001 fcf6 	bl	8002a52 <HAL_GPIO_WritePin>
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <setGreen+0x7c>)
 800106c:	f001 fcf1 	bl	8002a52 <HAL_GPIO_WritePin>
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <setGreen+0x7c>)
 8001076:	f001 fcec 	bl	8002a52 <HAL_GPIO_WritePin>
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00

0800108c <setPedestrian>:
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <setPedestrian+0x16>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d00d      	beq.n	80010bc <setPedestrian+0x30>
 80010a0:	e019      	b.n	80010d6 <setPedestrian+0x4a>
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <setPedestrian+0x6c>)
 80010aa:	f001 fcd2 	bl	8002a52 <HAL_GPIO_WritePin>
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <setPedestrian+0x70>)
 80010b6:	f001 fccc 	bl	8002a52 <HAL_GPIO_WritePin>
 80010ba:	e019      	b.n	80010f0 <setPedestrian+0x64>
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <setPedestrian+0x6c>)
 80010c4:	f001 fcc5 	bl	8002a52 <HAL_GPIO_WritePin>
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <setPedestrian+0x70>)
 80010d0:	f001 fcbf 	bl	8002a52 <HAL_GPIO_WritePin>
 80010d4:	e00c      	b.n	80010f0 <setPedestrian+0x64>
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <setPedestrian+0x6c>)
 80010de:	f001 fcb8 	bl	8002a52 <HAL_GPIO_WritePin>
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <setPedestrian+0x70>)
 80010ea:	f001 fcb2 	bl	8002a52 <HAL_GPIO_WritePin>
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40010800 	.word	0x40010800

08001100 <clearLED>:
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <clearLED+0x16>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00c      	beq.n	800112e <clearLED+0x2e>
 8001114:	e016      	b.n	8001144 <clearLED+0x44>
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111c:	4816      	ldr	r0, [pc, #88]	; (8001178 <clearLED+0x78>)
 800111e:	f001 fc98 	bl	8002a52 <HAL_GPIO_WritePin>
 8001122:	2200      	movs	r2, #0
 8001124:	2108      	movs	r1, #8
 8001126:	4815      	ldr	r0, [pc, #84]	; (800117c <clearLED+0x7c>)
 8001128:	f001 fc93 	bl	8002a52 <HAL_GPIO_WritePin>
 800112c:	e020      	b.n	8001170 <clearLED+0x70>
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <clearLED+0x7c>)
 8001134:	f001 fc8d 	bl	8002a52 <HAL_GPIO_WritePin>
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	480f      	ldr	r0, [pc, #60]	; (800117c <clearLED+0x7c>)
 800113e:	f001 fc88 	bl	8002a52 <HAL_GPIO_WritePin>
 8001142:	e015      	b.n	8001170 <clearLED+0x70>
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <clearLED+0x78>)
 800114c:	f001 fc81 	bl	8002a52 <HAL_GPIO_WritePin>
 8001150:	2200      	movs	r2, #0
 8001152:	2108      	movs	r1, #8
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <clearLED+0x7c>)
 8001156:	f001 fc7c 	bl	8002a52 <HAL_GPIO_WritePin>
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <clearLED+0x7c>)
 8001160:	f001 fc77 	bl	8002a52 <HAL_GPIO_WritePin>
 8001164:	2200      	movs	r2, #0
 8001166:	2110      	movs	r1, #16
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <clearLED+0x7c>)
 800116a:	f001 fc72 	bl	8002a52 <HAL_GPIO_WritePin>
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f001 f8aa 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f840 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 f96c 	bl	8001468 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001190:	f000 f87e 	bl	8001290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001194:	f000 f8c8 	bl	8001328 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001198:	f000 f93c 	bl	8001414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <main+0x6c>)
 800119e:	f002 f8db 	bl	8003358 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011a2:	2100      	movs	r1, #0
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <main+0x70>)
 80011a6:	f002 f981 	bl	80034ac <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 80011aa:	220a      	movs	r2, #10
 80011ac:	2100      	movs	r1, #0
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <main+0x74>)
 80011b0:	f000 fafc 	bl	80017ac <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 80011b4:	220a      	movs	r2, #10
 80011b6:	2100      	movs	r1, #0
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <main+0x78>)
 80011ba:	f000 faf7 	bl	80017ac <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 80011be:	220a      	movs	r2, #10
 80011c0:	2100      	movs	r1, #0
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <main+0x7c>)
 80011c4:	f000 faf2 	bl	80017ac <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 80011c8:	220a      	movs	r2, #10
 80011ca:	2100      	movs	r1, #0
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <main+0x80>)
 80011ce:	f000 faed 	bl	80017ac <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 80011d2:	220a      	movs	r2, #10
 80011d4:	2100      	movs	r1, #0
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <main+0x84>)
 80011d8:	f000 fae8 	bl	80017ac <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 80011dc:	220a      	movs	r2, #10
 80011de:	2100      	movs	r1, #0
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <main+0x88>)
 80011e2:	f000 fae3 	bl	80017ac <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 80011e6:	f000 fd3b 	bl	8001c60 <SCH_Dispatch_Tasks>
 80011ea:	e7fc      	b.n	80011e6 <main+0x66>
 80011ec:	200001c0 	.word	0x200001c0
 80011f0:	20000178 	.word	0x20000178
 80011f4:	08001e85 	.word	0x08001e85
 80011f8:	080001f5 	.word	0x080001f5
 80011fc:	08000389 	.word	0x08000389
 8001200:	08000771 	.word	0x08000771
 8001204:	08000ba9 	.word	0x08000ba9
 8001208:	08000ad1 	.word	0x08000ad1

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b090      	sub	sp, #64	; 0x40
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2228      	movs	r2, #40	; 0x28
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fcac 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	2310      	movs	r3, #16
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800123e:	2300      	movs	r3, #0
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fc19 	bl	8002a84 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001258:	f000 f98a 	bl	8001570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2302      	movs	r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe84 	bl	8002f84 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001282:	f000 f975 	bl	8001570 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_TIM2_Init+0x94>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_TIM2_Init+0x94>)
 80012b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM2_Init+0x94>)
 80012c4:	224f      	movs	r2, #79	; 0x4f
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_TIM2_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_TIM2_Init+0x94>)
 80012d6:	f001 ffef 	bl	80032b8 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012e0:	f000 f946 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_TIM2_Init+0x94>)
 80012f2:	f002 fb43 	bl	800397c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 f938 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_TIM2_Init+0x94>)
 800130e:	f002 fec1 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001318:	f000 f92a 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001c0 	.word	0x200001c0

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_TIM3_Init+0xe4>)
 800135a:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_TIM3_Init+0xe8>)
 800135c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_TIM3_Init+0xe4>)
 8001360:	223f      	movs	r2, #63	; 0x3f
 8001362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_TIM3_Init+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_TIM3_Init+0xe4>)
 800136c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM3_Init+0xe4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_TIM3_Init+0xe4>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800137e:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_TIM3_Init+0xe4>)
 8001380:	f001 ff9a 	bl	80032b8 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800138a:	f000 f8f1 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_TIM3_Init+0xe4>)
 800139c:	f002 faee 	bl	800397c <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013a6:	f000 f8e3 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM3_Init+0xe4>)
 80013ac:	f002 f826 	bl	80033fc <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013b6:	f000 f8db 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4619      	mov	r1, r3
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <MX_TIM3_Init+0xe4>)
 80013ca:	f002 fe63 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013d4:	f000 f8cc 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	; 0x60
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM3_Init+0xe4>)
 80013f0:	f002 fa06 	bl	8003800 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013fa:	f000 f8b9 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM3_Init+0xe4>)
 8001400:	f000 fe4a 	bl	8002098 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000178 	.word	0x20000178
 8001410:	40000400 	.word	0x40000400

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f002 fe92 	bl	8004174 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f88b 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000208 	.word	0x20000208
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <MX_GPIO_Init+0xe8>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a33      	ldr	r2, [pc, #204]	; (8001550 <MX_GPIO_Init+0xe8>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <MX_GPIO_Init+0xe8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <MX_GPIO_Init+0xe8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <MX_GPIO_Init+0xe8>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80014b2:	4828      	ldr	r0, [pc, #160]	; (8001554 <MX_GPIO_Init+0xec>)
 80014b4:	f001 facd 	bl	8002a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014be:	4826      	ldr	r0, [pc, #152]	; (8001558 <MX_GPIO_Init+0xf0>)
 80014c0:	f001 fac7 	bl	8002a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 80014c4:	2303      	movs	r3, #3
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	4820      	ldr	r0, [pc, #128]	; (8001558 <MX_GPIO_Init+0xf0>)
 80014d8:	f001 f920 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	481a      	ldr	r0, [pc, #104]	; (8001558 <MX_GPIO_Init+0xf0>)
 80014f0:	f001 f914 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4619      	mov	r1, r3
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_GPIO_Init+0xec>)
 8001508:	f001 f908 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 800150c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001510:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2302      	movs	r3, #2
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <MX_GPIO_Init+0xec>)
 8001526:	f001 f8f9 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 800152a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800152e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_GPIO_Init+0xf0>)
 8001544:	f001 f8ea 	bl	800271c <HAL_GPIO_Init>

}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40010800 	.word	0x40010800

0800155c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001564:	f000 fb44 	bl	8001bf0 <SCH_Update>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <sendingUART_RUN>:
 *      Author: PC
 */

#include "perihersal.h"

void sendingUART_RUN(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <sendingUART_RUN+0xb0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d04f      	beq.n	8001628 <sendingUART_RUN+0xac>
		if(!timer3_flag){
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <sendingUART_RUN+0xb4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d115      	bne.n	80015bc <sendingUART_RUN+0x40>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#\r\n", timer3_counter/100), 1000);
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <sendingUART_RUN+0xb8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <sendingUART_RUN+0xbc>)
 8001596:	fb82 1203 	smull	r1, r2, r2, r3
 800159a:	1152      	asrs	r2, r2, #5
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4926      	ldr	r1, [pc, #152]	; (800163c <sendingUART_RUN+0xc0>)
 80015a4:	4826      	ldr	r0, [pc, #152]	; (8001640 <sendingUART_RUN+0xc4>)
 80015a6:	f003 faef 	bl	8004b88 <siprintf>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	4923      	ldr	r1, [pc, #140]	; (8001640 <sendingUART_RUN+0xc4>)
 80015b4:	4823      	ldr	r0, [pc, #140]	; (8001644 <sendingUART_RUN+0xc8>)
 80015b6:	f002 fe2a 	bl	800420e <HAL_UART_Transmit>
 80015ba:	e00b      	b.n	80015d4 <sendingUART_RUN+0x58>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#\r\n"), 1000);
 80015bc:	4922      	ldr	r1, [pc, #136]	; (8001648 <sendingUART_RUN+0xcc>)
 80015be:	4820      	ldr	r0, [pc, #128]	; (8001640 <sendingUART_RUN+0xc4>)
 80015c0:	f003 fae2 	bl	8004b88 <siprintf>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	491c      	ldr	r1, [pc, #112]	; (8001640 <sendingUART_RUN+0xc4>)
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <sendingUART_RUN+0xc8>)
 80015d0:	f002 fe1d 	bl	800420e <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <sendingUART_RUN+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d115      	bne.n	8001608 <sendingUART_RUN+0x8c>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#\r\n", timer4_counter/100), 1000);
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <sendingUART_RUN+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <sendingUART_RUN+0xbc>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1152      	asrs	r2, r2, #5
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4919      	ldr	r1, [pc, #100]	; (8001654 <sendingUART_RUN+0xd8>)
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <sendingUART_RUN+0xc4>)
 80015f2:	f003 fac9 	bl	8004b88 <siprintf>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	4910      	ldr	r1, [pc, #64]	; (8001640 <sendingUART_RUN+0xc4>)
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <sendingUART_RUN+0xc8>)
 8001602:	f002 fe04 	bl	800420e <HAL_UART_Transmit>
 8001606:	e00b      	b.n	8001620 <sendingUART_RUN+0xa4>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#\r\n"), 1000);
 8001608:	4913      	ldr	r1, [pc, #76]	; (8001658 <sendingUART_RUN+0xdc>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <sendingUART_RUN+0xc4>)
 800160c:	f003 fabc 	bl	8004b88 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001618:	4909      	ldr	r1, [pc, #36]	; (8001640 <sendingUART_RUN+0xc4>)
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <sendingUART_RUN+0xc8>)
 800161c:	f002 fdf7 	bl	800420e <HAL_UART_Transmit>
		}
		setTimer2(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001624:	f000 fb4e 	bl	8001cc4 <setTimer2>
	}
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000012c 	.word	0x2000012c
 8001630:	20000134 	.word	0x20000134
 8001634:	20000138 	.word	0x20000138
 8001638:	51eb851f 	.word	0x51eb851f
 800163c:	08005414 	.word	0x08005414
 8001640:	200000fc 	.word	0x200000fc
 8001644:	20000208 	.word	0x20000208
 8001648:	08005428 	.word	0x08005428
 800164c:	2000013c 	.word	0x2000013c
 8001650:	20000140 	.word	0x20000140
 8001654:	08005440 	.word	0x08005440
 8001658:	08005454 	.word	0x08005454

0800165c <sendingUART_SETTING>:

void sendingUART_SETTING(){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af02      	add	r7, sp, #8
		HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!RED:%d:YELLOW:%d:GREEN:%d#\r\n", temp_red/1000, temp_yellow/1000, temp_green/1000), 1000);
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <sendingUART_SETTING+0x5c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <sendingUART_SETTING+0x60>)
 8001668:	fb82 1203 	smull	r1, r2, r2, r3
 800166c:	1192      	asrs	r2, r2, #6
 800166e:	17db      	asrs	r3, r3, #31
 8001670:	1ad1      	subs	r1, r2, r3
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <sendingUART_SETTING+0x64>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <sendingUART_SETTING+0x60>)
 8001678:	fb82 0203 	smull	r0, r2, r2, r3
 800167c:	1192      	asrs	r2, r2, #6
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad0      	subs	r0, r2, r3
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <sendingUART_SETTING+0x68>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <sendingUART_SETTING+0x60>)
 8001688:	fb82 c203 	smull	ip, r2, r2, r3
 800168c:	1192      	asrs	r2, r2, #6
 800168e:	17db      	asrs	r3, r3, #31
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	460a      	mov	r2, r1
 8001698:	490b      	ldr	r1, [pc, #44]	; (80016c8 <sendingUART_SETTING+0x6c>)
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <sendingUART_SETTING+0x70>)
 800169c:	f003 fa74 	bl	8004b88 <siprintf>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <sendingUART_SETTING+0x70>)
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <sendingUART_SETTING+0x74>)
 80016ac:	f002 fdaf 	bl	800420e <HAL_UART_Transmit>
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000f8 	.word	0x200000f8
 80016bc:	10624dd3 	.word	0x10624dd3
 80016c0:	200000f0 	.word	0x200000f0
 80016c4:	200000f4 	.word	0x200000f4
 80016c8:	0800546c 	.word	0x0800546c
 80016cc:	200000fc 	.word	0x200000fc
 80016d0:	20000208 	.word	0x20000208

080016d4 <Buzzer>:

void Buzzer(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	if(timer5_flag){
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <Buzzer+0xbc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d04c      	beq.n	800177a <Buzzer+0xa6>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <Buzzer+0xc0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <Buzzer+0xc4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(buzzer_time/2);
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <Buzzer+0xc8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0fda      	lsrs	r2, r3, #31
 80016f0:	4413      	add	r3, r2
 80016f2:	105b      	asrs	r3, r3, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fb55 	bl	8001da4 <setTimer6>
		if(timer3_counter<2000){
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <Buzzer+0xcc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001702:	da1b      	bge.n	800173c <Buzzer+0x68>
			buzzer_freq *= 3;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <Buzzer+0xc0>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <Buzzer+0xc0>)
 8001710:	6013      	str	r3, [r2, #0]
			buzzer_time = (timer3_counter>0)? timer3_counter/4 : buzzer_time/3;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <Buzzer+0xcc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dd06      	ble.n	8001728 <Buzzer+0x54>
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <Buzzer+0xcc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	da00      	bge.n	8001724 <Buzzer+0x50>
 8001722:	3303      	adds	r3, #3
 8001724:	109b      	asrs	r3, r3, #2
 8001726:	e006      	b.n	8001736 <Buzzer+0x62>
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <Buzzer+0xc8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <Buzzer+0xd0>)
 800172e:	fb82 1203 	smull	r1, r2, r2, r3
 8001732:	17db      	asrs	r3, r3, #31
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <Buzzer+0xc8>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e009      	b.n	8001750 <Buzzer+0x7c>
		}else{
			buzzer_freq += 100;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <Buzzer+0xc0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3364      	adds	r3, #100	; 0x64
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <Buzzer+0xc0>)
 8001744:	6013      	str	r3, [r2, #0]
			buzzer_time -= 100;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <Buzzer+0xc8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3b64      	subs	r3, #100	; 0x64
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <Buzzer+0xc8>)
 800174e:	6013      	str	r3, [r2, #0]
		}


		if(buzzer_freq >= 1000) buzzer_freq = 1000;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <Buzzer+0xc0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001758:	db03      	blt.n	8001762 <Buzzer+0x8e>
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <Buzzer+0xc0>)
 800175c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001760:	601a      	str	r2, [r3, #0]
		if(buzzer_time <= 100)	buzzer_time = 100;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <Buzzer+0xc8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	dc02      	bgt.n	8001770 <Buzzer+0x9c>
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Buzzer+0xc8>)
 800176c:	2264      	movs	r2, #100	; 0x64
 800176e:	601a      	str	r2, [r3, #0]
		setTimer5(buzzer_time);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <Buzzer+0xc8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 faf9 	bl	8001d6c <setTimer5>
	}
	if(timer6_flag){
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <Buzzer+0xd4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <Buzzer+0xb6>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <Buzzer+0xc4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000144 	.word	0x20000144
 8001794:	20000120 	.word	0x20000120
 8001798:	20000178 	.word	0x20000178
 800179c:	2000011c 	.word	0x2000011c
 80017a0:	20000138 	.word	0x20000138
 80017a4:	55555556 	.word	0x55555556
 80017a8:	2000014c 	.word	0x2000014c

080017ac <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80017ac:	b4b0      	push	{r4, r5, r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 80017b8:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <SCH_Add_Task+0x24c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b1d      	cmp	r3, #29
 80017be:	f300 81bd 	bgt.w	8001b3c <SCH_Add_Task+0x390>

        if(len == 0){
 80017c2:	4b8d      	ldr	r3, [pc, #564]	; (80019f8 <SCH_Add_Task+0x24c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 80017ca:	4a8c      	ldr	r2, [pc, #560]	; (80019fc <SCH_Add_Task+0x250>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4a8b      	ldr	r2, [pc, #556]	; (8001a00 <SCH_Add_Task+0x254>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	4a88      	ldr	r2, [pc, #544]	; (80019fc <SCH_Add_Task+0x250>)
 80017dc:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a87      	ldr	r2, [pc, #540]	; (8001a00 <SCH_Add_Task+0x254>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b84      	ldr	r3, [pc, #528]	; (80019fc <SCH_Add_Task+0x250>)
 80017ec:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 80017ee:	4b83      	ldr	r3, [pc, #524]	; (80019fc <SCH_Add_Task+0x250>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 80017f4:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <SCH_Add_Task+0x258>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e196      	b.n	8001b2a <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <SCH_Add_Task+0x258>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	497e      	ldr	r1, [pc, #504]	; (80019fc <SCH_Add_Task+0x250>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	f0c0 80ba 	bcc.w	800198c <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <SCH_Add_Task+0x258>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e002      	b.n	8001826 <SCH_Add_Task+0x7a>
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	4b78      	ldr	r3, [pc, #480]	; (8001a08 <SCH_Add_Task+0x25c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	da0f      	bge.n	8001850 <SCH_Add_Task+0xa4>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4a73      	ldr	r2, [pc, #460]	; (8001a00 <SCH_Add_Task+0x254>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	08d9      	lsrs	r1, r3, #3
 800183a:	4870      	ldr	r0, [pc, #448]	; (80019fc <SCH_Add_Task+0x250>)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	3304      	adds	r3, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4299      	cmp	r1, r3
 800184e:	d2e7      	bcs.n	8001820 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 8001850:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <SCH_Add_Task+0x25c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	429a      	cmp	r2, r3
 8001858:	d144      	bne.n	80018e4 <SCH_Add_Task+0x138>
 800185a:	4968      	ldr	r1, [pc, #416]	; (80019fc <SCH_Add_Task+0x250>)
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3304      	adds	r3, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	d338      	bcc.n	80018e4 <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	4961      	ldr	r1, [pc, #388]	; (80019fc <SCH_Add_Task+0x250>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	495c      	ldr	r1, [pc, #368]	; (8001a00 <SCH_Add_Task+0x254>)
 800188e:	fba1 1303 	umull	r1, r3, r1, r3
 8001892:	08d9      	lsrs	r1, r3, #3
 8001894:	4859      	ldr	r0, [pc, #356]	; (80019fc <SCH_Add_Task+0x250>)
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4403      	add	r3, r0
 80018a0:	3304      	adds	r3, #4
 80018a2:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a56      	ldr	r2, [pc, #344]	; (8001a00 <SCH_Add_Task+0x254>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	08d9      	lsrs	r1, r3, #3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	4608      	mov	r0, r1
 80018b4:	4951      	ldr	r1, [pc, #324]	; (80019fc <SCH_Add_Task+0x250>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3308      	adds	r3, #8
 80018c2:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	494c      	ldr	r1, [pc, #304]	; (80019fc <SCH_Add_Task+0x250>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	330c      	adds	r3, #12
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <SCH_Add_Task+0x25c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <SCH_Add_Task+0x258>)
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e122      	b.n	8001b2a <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <SCH_Add_Task+0x24c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	e017      	b.n	800191c <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	4842      	ldr	r0, [pc, #264]	; (80019fc <SCH_Add_Task+0x250>)
 80018f2:	6939      	ldr	r1, [r7, #16]
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4418      	add	r0, r3
 80018fe:	493f      	ldr	r1, [pc, #252]	; (80019fc <SCH_Add_Task+0x250>)
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	4604      	mov	r4, r0
 800190c:	461d      	mov	r5, r3
 800190e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3b01      	subs	r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	dce3      	bgt.n	80018ec <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <SCH_Add_Task+0x250>)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <SCH_Add_Task+0x254>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	08d9      	lsrs	r1, r3, #3
 8001940:	482e      	ldr	r0, [pc, #184]	; (80019fc <SCH_Add_Task+0x250>)
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	3304      	adds	r3, #4
 8001950:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <SCH_Add_Task+0x254>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	4618      	mov	r0, r3
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <SCH_Add_Task+0x250>)
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3308      	adds	r3, #8
 800196e:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <SCH_Add_Task+0x250>)
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	330c      	adds	r3, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 8001984:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <SCH_Add_Task+0x258>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e0ce      	b.n	8001b2a <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <SCH_Add_Task+0x258>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e002      	b.n	800199a <SCH_Add_Task+0x1ee>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3b01      	subs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <SCH_Add_Task+0x260>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dd0f      	ble.n	80019c4 <SCH_Add_Task+0x218>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <SCH_Add_Task+0x254>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	08d9      	lsrs	r1, r3, #3
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <SCH_Add_Task+0x250>)
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4403      	add	r3, r0
 80019bc:	3304      	adds	r3, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4299      	cmp	r1, r3
 80019c2:	d3e7      	bcc.n	8001994 <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <SCH_Add_Task+0x260>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d156      	bne.n	8001a7c <SCH_Add_Task+0x2d0>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <SCH_Add_Task+0x254>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	08d9      	lsrs	r1, r3, #3
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <SCH_Add_Task+0x250>)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4403      	add	r3, r0
 80019e6:	3304      	adds	r3, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4299      	cmp	r1, r3
 80019ec:	d246      	bcs.n	8001a7c <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <SCH_Add_Task+0x24c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e024      	b.n	8001a40 <SCH_Add_Task+0x294>
 80019f6:	bf00      	nop
 80019f8:	200004b0 	.word	0x200004b0
 80019fc:	20000258 	.word	0x20000258
 8001a00:	cccccccd 	.word	0xcccccccd
 8001a04:	20000254 	.word	0x20000254
 8001a08:	2000024c 	.word	0x2000024c
 8001a0c:	20000250 	.word	0x20000250
                        sTask[j] = sTask[j-1];
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	484c      	ldr	r0, [pc, #304]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a16:	6939      	ldr	r1, [r7, #16]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4418      	add	r0, r3
 8001a22:	4949      	ldr	r1, [pc, #292]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	4604      	mov	r4, r0
 8001a30:	461d      	mov	r5, r3
 8001a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <SCH_Add_Task+0x3a0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dce2      	bgt.n	8001a10 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 8001a4a:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <SCH_Add_Task+0x3a4>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a5c:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <SCH_Add_Task+0x3a4>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a6c:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <SCH_Add_Task+0x3a8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e056      	b.n	8001b2a <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <SCH_Add_Task+0x3ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e017      	b.n	8001ab4 <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	482f      	ldr	r0, [pc, #188]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a8a:	6939      	ldr	r1, [r7, #16]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4418      	add	r0, r3
 8001a96:	492c      	ldr	r1, [pc, #176]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dce2      	bgt.n	8001a84 <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 8001ac4:	4920      	ldr	r1, [pc, #128]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <SCH_Add_Task+0x3a4>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	08d9      	lsrs	r1, r3, #3
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3304      	adds	r3, #4
 8001af0:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <SCH_Add_Task+0x3a4>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	4912      	ldr	r1, [pc, #72]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3308      	adds	r3, #8
 8001b0e:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001b10:	490d      	ldr	r1, [pc, #52]	; (8001b48 <SCH_Add_Task+0x39c>)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	330c      	adds	r3, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <SCH_Add_Task+0x3a8>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <SCH_Add_Task+0x3ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <SCH_Add_Task+0x3b0>)
 8001b30:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <SCH_Add_Task+0x3ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <SCH_Add_Task+0x3ac>)
 8001b3a:	6013      	str	r3, [r2, #0]

	}

}
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bcb0      	pop	{r4, r5, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000258 	.word	0x20000258
 8001b4c:	20000250 	.word	0x20000250
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	20000254 	.word	0x20000254
 8001b58:	200004b0 	.word	0x200004b0
 8001b5c:	2000024c 	.word	0x2000024c

08001b60 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <SCH_Delete_Then_Add_Task+0x84>)
 8001b68:	463c      	mov	r4, r7
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e017      	b.n	8001baa <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4819      	ldr	r0, [pc, #100]	; (8001be4 <SCH_Delete_Then_Add_Task+0x84>)
 8001b80:	6979      	ldr	r1, [r7, #20]
 8001b82:	460b      	mov	r3, r1
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4418      	add	r0, r3
 8001b8c:	4915      	ldr	r1, [pc, #84]	; (8001be4 <SCH_Delete_Then_Add_Task+0x84>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	4604      	mov	r4, r0
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <SCH_Delete_Then_Add_Task+0x88>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbe1      	blt.n	8001b7a <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <SCH_Delete_Then_Add_Task+0x88>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SCH_Delete_Then_Add_Task+0x88>)
 8001bbe:	6013      	str	r3, [r2, #0]
		tail -= 1;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <SCH_Delete_Then_Add_Task+0x8c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <SCH_Delete_Then_Add_Task+0x8c>)
 8001bc8:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff fde9 	bl	80017ac <SCH_Add_Task>

}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000258 	.word	0x20000258
 8001be8:	200004b0 	.word	0x200004b0
 8001bec:	2000024c 	.word	0x2000024c

08001bf0 <SCH_Update>:


void SCH_Update(void) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001bfa:	e015      	b.n	8001c28 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <SCH_Update+0x68>)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	4811      	ldr	r0, [pc, #68]	; (8001c58 <SCH_Update+0x68>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4403      	add	r3, r0
 8001c1e:	330c      	adds	r3, #12
 8001c20:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3301      	adds	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001c28:	490b      	ldr	r1, [pc, #44]	; (8001c58 <SCH_Update+0x68>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3304      	adds	r3, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <SCH_Update+0x6c>)
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d9dc      	bls.n	8001bfc <SCH_Update+0xc>
	}

	counter+=1;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SCH_Update+0x6c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <SCH_Update+0x6c>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000258 	.word	0x20000258
 8001c5c:	200000ec 	.word	0x200000ec

08001c60 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 8001c64:	e009      	b.n	8001c7a <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <SCH_Dispatch_Tasks+0x28>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <SCH_Dispatch_Tasks+0x28>)
 8001c6e:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SCH_Dispatch_Tasks+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 8001c76:	f7ff ff73 	bl	8001b60 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <SCH_Dispatch_Tasks+0x28>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000258 	.word	0x20000258

08001c8c <setTimer1>:
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <setTimer1+0x2c>)
 8001c98:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9c:	1092      	asrs	r2, r2, #2
 8001c9e:	17db      	asrs	r3, r3, #31
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <setTimer1+0x30>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <setTimer1+0x34>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	66666667 	.word	0x66666667
 8001cbc:	20000128 	.word	0x20000128
 8001cc0:	20000124 	.word	0x20000124

08001cc4 <setTimer2>:
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <setTimer2+0x2c>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1092      	asrs	r2, r2, #2
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <setTimer2+0x30>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <setTimer2+0x34>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	66666667 	.word	0x66666667
 8001cf4:	20000130 	.word	0x20000130
 8001cf8:	2000012c 	.word	0x2000012c

08001cfc <setTimer3>:
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <setTimer3+0x2c>)
 8001d08:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0c:	1092      	asrs	r2, r2, #2
 8001d0e:	17db      	asrs	r3, r3, #31
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <setTimer3+0x30>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <setTimer3+0x34>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	66666667 	.word	0x66666667
 8001d2c:	20000138 	.word	0x20000138
 8001d30:	20000134 	.word	0x20000134

08001d34 <setTimer4>:
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <setTimer4+0x2c>)
 8001d40:	fb82 1203 	smull	r1, r2, r2, r3
 8001d44:	1092      	asrs	r2, r2, #2
 8001d46:	17db      	asrs	r3, r3, #31
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <setTimer4+0x30>)
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <setTimer4+0x34>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	66666667 	.word	0x66666667
 8001d64:	20000140 	.word	0x20000140
 8001d68:	2000013c 	.word	0x2000013c

08001d6c <setTimer5>:
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <setTimer5+0x2c>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	1092      	asrs	r2, r2, #2
 8001d7e:	17db      	asrs	r3, r3, #31
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <setTimer5+0x30>)
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <setTimer5+0x34>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	66666667 	.word	0x66666667
 8001d9c:	20000148 	.word	0x20000148
 8001da0:	20000144 	.word	0x20000144

08001da4 <setTimer6>:
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <setTimer6+0x2c>)
 8001db0:	fb82 1203 	smull	r1, r2, r2, r3
 8001db4:	1092      	asrs	r2, r2, #2
 8001db6:	17db      	asrs	r3, r3, #31
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <setTimer6+0x30>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <setTimer6+0x34>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	66666667 	.word	0x66666667
 8001dd4:	20000150 	.word	0x20000150
 8001dd8:	2000014c 	.word	0x2000014c

08001ddc <setTimer7>:
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <setTimer7+0x2c>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	1092      	asrs	r2, r2, #2
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <setTimer7+0x30>)
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <setTimer7+0x34>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	66666667 	.word	0x66666667
 8001e0c:	20000158 	.word	0x20000158
 8001e10:	20000154 	.word	0x20000154

08001e14 <setTimer8>:
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <setTimer8+0x2c>)
 8001e20:	fb82 1203 	smull	r1, r2, r2, r3
 8001e24:	1092      	asrs	r2, r2, #2
 8001e26:	17db      	asrs	r3, r3, #31
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <setTimer8+0x30>)
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <setTimer8+0x34>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	66666667 	.word	0x66666667
 8001e44:	20000160 	.word	0x20000160
 8001e48:	2000015c 	.word	0x2000015c

08001e4c <setTimer9>:
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <setTimer9+0x2c>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1092      	asrs	r2, r2, #2
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <setTimer9+0x30>)
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <setTimer9+0x34>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	66666667 	.word	0x66666667
 8001e7c:	20000168 	.word	0x20000168
 8001e80:	20000164 	.word	0x20000164

08001e84 <TimerRun>:
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <TimerRun+0xf8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	dd05      	ble.n	8001e9c <TimerRun+0x18>
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <TimerRun+0xf8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	4a39      	ldr	r2, [pc, #228]	; (8001f7c <TimerRun+0xf8>)
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e002      	b.n	8001ea2 <TimerRun+0x1e>
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <TimerRun+0xfc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <TimerRun+0x100>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	dd05      	ble.n	8001eb6 <TimerRun+0x32>
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <TimerRun+0x100>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <TimerRun+0x100>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e002      	b.n	8001ebc <TimerRun+0x38>
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <TimerRun+0x104>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <TimerRun+0x108>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd05      	ble.n	8001ed0 <TimerRun+0x4c>
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <TimerRun+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <TimerRun+0x108>)
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e002      	b.n	8001ed6 <TimerRun+0x52>
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <TimerRun+0x10c>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <TimerRun+0x110>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dd05      	ble.n	8001eea <TimerRun+0x66>
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <TimerRun+0x110>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <TimerRun+0x110>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e002      	b.n	8001ef0 <TimerRun+0x6c>
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <TimerRun+0x114>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <TimerRun+0x118>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dd05      	ble.n	8001f04 <TimerRun+0x80>
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <TimerRun+0x118>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <TimerRun+0x118>)
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e002      	b.n	8001f0a <TimerRun+0x86>
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <TimerRun+0x11c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <TimerRun+0x120>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dd05      	ble.n	8001f1e <TimerRun+0x9a>
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <TimerRun+0x120>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <TimerRun+0x120>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e002      	b.n	8001f24 <TimerRun+0xa0>
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <TimerRun+0x124>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <TimerRun+0x128>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd05      	ble.n	8001f38 <TimerRun+0xb4>
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <TimerRun+0x128>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <TimerRun+0x128>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e002      	b.n	8001f3e <TimerRun+0xba>
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <TimerRun+0x12c>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <TimerRun+0x130>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dd05      	ble.n	8001f52 <TimerRun+0xce>
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <TimerRun+0x130>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <TimerRun+0x130>)
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e002      	b.n	8001f58 <TimerRun+0xd4>
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <TimerRun+0x134>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <TimerRun+0x138>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd05      	ble.n	8001f6c <TimerRun+0xe8>
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <TimerRun+0x138>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <TimerRun+0x138>)
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e002      	b.n	8001f72 <TimerRun+0xee>
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <TimerRun+0x13c>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000128 	.word	0x20000128
 8001f80:	20000124 	.word	0x20000124
 8001f84:	20000130 	.word	0x20000130
 8001f88:	2000012c 	.word	0x2000012c
 8001f8c:	20000138 	.word	0x20000138
 8001f90:	20000134 	.word	0x20000134
 8001f94:	20000140 	.word	0x20000140
 8001f98:	2000013c 	.word	0x2000013c
 8001f9c:	20000148 	.word	0x20000148
 8001fa0:	20000144 	.word	0x20000144
 8001fa4:	20000150 	.word	0x20000150
 8001fa8:	2000014c 	.word	0x2000014c
 8001fac:	20000158 	.word	0x20000158
 8001fb0:	20000154 	.word	0x20000154
 8001fb4:	20000160 	.word	0x20000160
 8001fb8:	2000015c 	.word	0x2000015c
 8001fbc:	20000168 	.word	0x20000168
 8001fc0:	20000164 	.word	0x20000164

08001fc4 <HAL_MspInit>:
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <HAL_TIM_Base_MspInit>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d114      	bne.n	8002064 <HAL_TIM_Base_MspInit+0x3c>
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	201c      	movs	r0, #28
 8002058:	f000 fa79 	bl	800254e <HAL_NVIC_SetPriority>
 800205c:	201c      	movs	r0, #28
 800205e:	f000 fa92 	bl	8002586 <HAL_NVIC_EnableIRQ>
 8002062:	e010      	b.n	8002086 <HAL_TIM_Base_MspInit+0x5e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_TIM_Base_MspInit+0x6c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10b      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x5e>
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_TIM_Base_MspInit+0x68>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40000400 	.word	0x40000400

08002098 <HAL_TIM_MspPostInit>:
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_TIM_MspPostInit+0x58>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d117      	bne.n	80020e8 <HAL_TIM_MspPostInit+0x50>
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_TIM_MspPostInit+0x5c>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_TIM_MspPostInit+0x5c>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_TIM_MspPostInit+0x5c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	2302      	movs	r3, #2
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	2302      	movs	r3, #2
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4619      	mov	r1, r3
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <HAL_TIM_MspPostInit+0x60>)
 80020e4:	f000 fb1a 	bl	800271c <HAL_GPIO_Init>
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800

080020fc <HAL_UART_MspInit>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_UART_MspInit+0x98>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d137      	bne.n	800218c <HAL_UART_MspInit+0x90>
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_UART_MspInit+0x9c>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_UART_MspInit+0x9c>)
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_UART_MspInit+0x9c>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_UART_MspInit+0x9c>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_UART_MspInit+0x9c>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_UART_MspInit+0x9c>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2304      	movs	r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	2302      	movs	r3, #2
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	2303      	movs	r3, #3
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	480f      	ldr	r0, [pc, #60]	; (800219c <HAL_UART_MspInit+0xa0>)
 8002160:	f000 fadc 	bl	800271c <HAL_GPIO_Init>
 8002164:	2308      	movs	r3, #8
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <HAL_UART_MspInit+0xa0>)
 8002178:	f000 fad0 	bl	800271c <HAL_GPIO_Init>
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2026      	movs	r0, #38	; 0x26
 8002182:	f000 f9e4 	bl	800254e <HAL_NVIC_SetPriority>
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f000 f9fd 	bl	8002586 <HAL_NVIC_EnableIRQ>
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40004400 	.word	0x40004400
 8002198:	40021000 	.word	0x40021000
 800219c:	40010800 	.word	0x40010800

080021a0 <NMI_Handler>:
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	e7fe      	b.n	80021a4 <NMI_Handler+0x4>

080021a6 <HardFault_Handler>:
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <SVC_Handler>:
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <DebugMon_Handler>:
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <PendSV_Handler>:
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <SysTick_Handler>:
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	f000 f8bf 	bl	8002368 <HAL_IncTick>
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <TIM2_IRQHandler>:
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM2_IRQHandler+0x10>)
 80021f6:	f001 f9fb 	bl	80035f0 <HAL_TIM_IRQHandler>
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001c0 	.word	0x200001c0

08002204 <USART2_IRQHandler>:
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART2_IRQHandler+0x10>)
 800220a:	f002 f893 	bl	8004334 <HAL_UART_IRQHandler>
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000208 	.word	0x20000208

08002218 <_sbrk>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
 8002248:	f002 fc6c 	bl	8004b24 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20005000 	.word	0x20005000
 8002278:	00000400 	.word	0x00000400
 800227c:	2000016c 	.word	0x2000016c
 8002280:	200004c8 	.word	0x200004c8

08002284 <SystemInit>:
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <Reset_Handler>:
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <LoopFillZerobss+0x12>)
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <LoopFillZerobss+0x1a>)
 8002296:	2300      	movs	r3, #0
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:
 800229a:	58d4      	ldr	r4, [r2, r3]
 800229c:	50c4      	str	r4, [r0, r3]
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:
 80022a0:	18c4      	adds	r4, r0, r3
 80022a2:	428c      	cmp	r4, r1
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <LoopFillZerobss+0x1e>)
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <LoopFillZerobss+0x22>)
 80022aa:	2300      	movs	r3, #0
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:
 80022b2:	42a2      	cmp	r2, r4
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>
 80022b6:	f7ff ffe5 	bl	8002284 <SystemInit>
 80022ba:	f002 fc39 	bl	8004b30 <__libc_init_array>
 80022be:	f7fe ff5f 	bl	8001180 <main>
 80022c2:	4770      	bx	lr
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000094 	.word	0x20000094
 80022cc:	080054f0 	.word	0x080054f0
 80022d0:	20000094 	.word	0x20000094
 80022d4:	200004c8 	.word	0x200004c8

080022d8 <ADC1_2_IRQHandler>:
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_Init+0x28>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_Init+0x28>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 f923 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	200f      	movs	r0, #15
 80022f4:	f000 f808 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fe64 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f93b 	bl	80025a2 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f903 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000024 	.word	0x20000024
 8002360:	2000002c 	.word	0x2000002c
 8002364:	20000028 	.word	0x20000028

08002368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_IncTick+0x1c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_IncTick+0x20>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_IncTick+0x20>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	2000002c 	.word	0x2000002c
 8002388:	200004b4 	.word	0x200004b4

0800238c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <HAL_GetTick+0x10>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	200004b4 	.word	0x200004b4

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4906      	ldr	r1, [pc, #24]	; (8002438 <__NVIC_EnableIRQ+0x34>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff90 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff2d 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff42 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff90 	bl	8002490 <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5f 	bl	800243c <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff35 	bl	8002404 <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d008      	beq.n	80025e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e020      	b.n	8002624 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 020e 	bic.w	r2, r2, #14
 80025f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
	...

08002630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002642:	2b02      	cmp	r3, #2
 8002644:	d005      	beq.n	8002652 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2204      	movs	r2, #4
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e051      	b.n	80026f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 020e 	bic.w	r2, r2, #14
 8002660:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_DMA_Abort_IT+0xd0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d029      	beq.n	80026d0 <HAL_DMA_Abort_IT+0xa0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_DMA_Abort_IT+0xd4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_DMA_Abort_IT+0x9c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_DMA_Abort_IT+0xd8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01a      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x96>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <HAL_DMA_Abort_IT+0xdc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d012      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x90>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_DMA_Abort_IT+0xe0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00a      	beq.n	80026ba <HAL_DMA_Abort_IT+0x8a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_DMA_Abort_IT+0xe4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d102      	bne.n	80026b4 <HAL_DMA_Abort_IT+0x84>
 80026ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026b2:	e00e      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b8:	e00b      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	e008      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	e005      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ca:	e002      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026cc:	2310      	movs	r3, #16
 80026ce:	e000      	b.n	80026d2 <HAL_DMA_Abort_IT+0xa2>
 80026d0:	2301      	movs	r3, #1
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_DMA_Abort_IT+0xe8>)
 80026d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
    } 
  }
  return status;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020008 	.word	0x40020008
 8002704:	4002001c 	.word	0x4002001c
 8002708:	40020030 	.word	0x40020030
 800270c:	40020044 	.word	0x40020044
 8002710:	40020058 	.word	0x40020058
 8002714:	4002006c 	.word	0x4002006c
 8002718:	40020000 	.word	0x40020000

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b08b      	sub	sp, #44	; 0x2c
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272e:	e169      	b.n	8002a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002730:	2201      	movs	r2, #1
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8158 	bne.w	80029fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a9a      	ldr	r2, [pc, #616]	; (80029bc <HAL_GPIO_Init+0x2a0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d05e      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002758:	4a98      	ldr	r2, [pc, #608]	; (80029bc <HAL_GPIO_Init+0x2a0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d875      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800275e:	4a98      	ldr	r2, [pc, #608]	; (80029c0 <HAL_GPIO_Init+0x2a4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d058      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002764:	4a96      	ldr	r2, [pc, #600]	; (80029c0 <HAL_GPIO_Init+0x2a4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d86f      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800276a:	4a96      	ldr	r2, [pc, #600]	; (80029c4 <HAL_GPIO_Init+0x2a8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d052      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002770:	4a94      	ldr	r2, [pc, #592]	; (80029c4 <HAL_GPIO_Init+0x2a8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d869      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002776:	4a94      	ldr	r2, [pc, #592]	; (80029c8 <HAL_GPIO_Init+0x2ac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04c      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 800277c:	4a92      	ldr	r2, [pc, #584]	; (80029c8 <HAL_GPIO_Init+0x2ac>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d863      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002782:	4a92      	ldr	r2, [pc, #584]	; (80029cc <HAL_GPIO_Init+0x2b0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d046      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002788:	4a90      	ldr	r2, [pc, #576]	; (80029cc <HAL_GPIO_Init+0x2b0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d85d      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800278e:	2b12      	cmp	r3, #18
 8002790:	d82a      	bhi.n	80027e8 <HAL_GPIO_Init+0xcc>
 8002792:	2b12      	cmp	r3, #18
 8002794:	d859      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <HAL_GPIO_Init+0x80>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	08002817 	.word	0x08002817
 80027a0:	080027f1 	.word	0x080027f1
 80027a4:	08002803 	.word	0x08002803
 80027a8:	08002845 	.word	0x08002845
 80027ac:	0800284b 	.word	0x0800284b
 80027b0:	0800284b 	.word	0x0800284b
 80027b4:	0800284b 	.word	0x0800284b
 80027b8:	0800284b 	.word	0x0800284b
 80027bc:	0800284b 	.word	0x0800284b
 80027c0:	0800284b 	.word	0x0800284b
 80027c4:	0800284b 	.word	0x0800284b
 80027c8:	0800284b 	.word	0x0800284b
 80027cc:	0800284b 	.word	0x0800284b
 80027d0:	0800284b 	.word	0x0800284b
 80027d4:	0800284b 	.word	0x0800284b
 80027d8:	0800284b 	.word	0x0800284b
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	4a79      	ldr	r2, [pc, #484]	; (80029d0 <HAL_GPIO_Init+0x2b4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ee:	e02c      	b.n	800284a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e029      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	3304      	adds	r3, #4
 80027fe:	623b      	str	r3, [r7, #32]
          break;
 8002800:	e024      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	3308      	adds	r3, #8
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e01f      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	330c      	adds	r3, #12
 8002812:	623b      	str	r3, [r7, #32]
          break;
 8002814:	e01a      	b.n	800284c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800281e:	2304      	movs	r3, #4
 8002820:	623b      	str	r3, [r7, #32]
          break;
 8002822:	e013      	b.n	800284c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800282c:	2308      	movs	r3, #8
 800282e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	611a      	str	r2, [r3, #16]
          break;
 8002836:	e009      	b.n	800284c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	615a      	str	r2, [r3, #20]
          break;
 8002842:	e003      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
          break;
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x130>
          break;
 800284a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d801      	bhi.n	8002856 <HAL_GPIO_Init+0x13a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	e001      	b.n	800285a <HAL_GPIO_Init+0x13e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2bff      	cmp	r3, #255	; 0xff
 8002860:	d802      	bhi.n	8002868 <HAL_GPIO_Init+0x14c>
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x152>
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	3b08      	subs	r3, #8
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	210f      	movs	r1, #15
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80b1 	beq.w	80029fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800289c:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x2b8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x2b8>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028b4:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x2bc>)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a40      	ldr	r2, [pc, #256]	; (80029dc <HAL_GPIO_Init+0x2c0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_GPIO_Init+0x1ec>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3f      	ldr	r2, [pc, #252]	; (80029e0 <HAL_GPIO_Init+0x2c4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_GPIO_Init+0x1e8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3e      	ldr	r2, [pc, #248]	; (80029e4 <HAL_GPIO_Init+0x2c8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_GPIO_Init+0x2cc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_GPIO_Init+0x1e0>
 80028f8:	2303      	movs	r3, #3
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e004      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002900:	2302      	movs	r3, #2
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002908:	2300      	movs	r3, #0
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	f002 0203 	and.w	r2, r2, #3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4093      	lsls	r3, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800291a:	492f      	ldr	r1, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x2bc>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002934:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	492c      	ldr	r1, [pc, #176]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002942:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	4928      	ldr	r1, [pc, #160]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800294c:	4013      	ands	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4922      	ldr	r1, [pc, #136]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	491e      	ldr	r1, [pc, #120]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002974:	4013      	ands	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4918      	ldr	r1, [pc, #96]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4914      	ldr	r1, [pc, #80]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800299c:	4013      	ands	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d021      	beq.n	80029f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e021      	b.n	80029fe <HAL_GPIO_Init+0x2e2>
 80029ba:	bf00      	nop
 80029bc:	10320000 	.word	0x10320000
 80029c0:	10310000 	.word	0x10310000
 80029c4:	10220000 	.word	0x10220000
 80029c8:	10210000 	.word	0x10210000
 80029cc:	10120000 	.word	0x10120000
 80029d0:	10110000 	.word	0x10110000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	40010c00 	.word	0x40010c00
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_GPIO_Init+0x304>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4909      	ldr	r1, [pc, #36]	; (8002a20 <HAL_GPIO_Init+0x304>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f ae8e 	bne.w	8002730 <HAL_GPIO_Init+0x14>
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	372c      	adds	r7, #44	; 0x2c
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e001      	b.n	8002a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	807b      	strh	r3, [r7, #2]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a62:	787b      	ldrb	r3, [r7, #1]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a68:	887a      	ldrh	r2, [r7, #2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a6e:	e003      	b.n	8002a78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	611a      	str	r2, [r3, #16]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e26c      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e246      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x76>
 8002aec:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e02e      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbc>
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b40:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff fc14 	bl	800238c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7ff fc10 	bl	800238c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1fa      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe4>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff fc00 	bl	800238c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7ff fbfc 	bl	800238c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1e6      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x10c>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bca:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1ba      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fbb5 	bl	800238c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff fbb1 	bl	800238c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e19b      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fb94 	bl	800238c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7ff fb90 	bl	800238c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e17a      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fb74 	bl	800238c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff fb70 	bl	800238c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e15a      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 fad8 	bl	800327c <RCC_Delay>
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fb5a 	bl	800238c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff fb56 	bl	800238c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e140      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	42420000 	.word	0x42420000
 8002cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b9e      	ldr	r3, [pc, #632]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e9      	bne.n	8002cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a6 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a93      	ldr	r2, [pc, #588]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b91      	ldr	r3, [pc, #580]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a8a      	ldr	r2, [pc, #552]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff fb17 	bl	800238c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7ff fb13 	bl	800238c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0fd      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a72      	ldr	r2, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x356>
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a69      	ldr	r2, [pc, #420]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002dda:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a66      	ldr	r2, [pc, #408]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a63      	ldr	r2, [pc, #396]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fac7 	bl	800238c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff fac3 	bl	800238c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0ab      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x37e>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7ff fab1 	bl	800238c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff faad 	bl	800238c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e095      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8081 	beq.w	8002f6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d146      	bne.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff fa81 	bl	800238c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7ff fa7d 	bl	800238c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e067      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	492d      	ldr	r1, [pc, #180]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a19      	ldr	r1, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	4927      	ldr	r1, [pc, #156]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7ff fa51 	bl	800238c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7ff fa4d 	bl	800238c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e037      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
 8002f0c:	e02f      	b.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff fa3a 	bl	800238c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7ff fa36 	bl	800238c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e020      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e013      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	42420060 	.word	0x42420060

08002f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0d0      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 0207 	bic.w	r2, r3, #7
 8002fae:	4965      	ldr	r1, [pc, #404]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d040      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d115      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e073      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06b      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4936      	ldr	r1, [pc, #216]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7ff f98a 	bl	800238c <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7ff f986 	bl	800238c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e053      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d210      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 0207 	bic.w	r2, r3, #7
 80030ba:	4922      	ldr	r1, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f821 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490a      	ldr	r1, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1cc>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1d0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f8e8 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40022000 	.word	0x40022000
 8003148:	40021000 	.word	0x40021000
 800314c:	0800549c 	.word	0x0800549c
 8003150:	20000024 	.word	0x20000024
 8003154:	20000028 	.word	0x20000028

08003158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b490      	push	{r4, r7}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003160:	1d3c      	adds	r4, r7, #4
 8003162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003168:	f240 2301 	movw	r3, #513	; 0x201
 800316c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x40>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x46>
 8003196:	e02d      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 800319a:	623b      	str	r3, [r7, #32]
      break;
 800319c:	e02d      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031aa:	4413      	add	r3, r2
 80031ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c5b      	lsrs	r3, r3, #17
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031ca:	4413      	add	r3, r2
 80031cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d6:	fb02 f203 	mul.w	r2, r2, r3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e004      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	623b      	str	r3, [r7, #32]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	623b      	str	r3, [r7, #32]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc90      	pop	{r4, r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	0800548c 	.word	0x0800548c
 800320c:	40021000 	.word	0x40021000
 8003210:	007a1200 	.word	0x007a1200
 8003214:	003d0900 	.word	0x003d0900

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <HAL_RCC_GetHCLKFreq+0x10>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000024 	.word	0x20000024

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003230:	f7ff fff2 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	080054ac 	.word	0x080054ac

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003258:	f7ff ffde 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0adb      	lsrs	r3, r3, #11
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	080054ac 	.word	0x080054ac

0800327c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <RCC_Delay+0x34>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <RCC_Delay+0x38>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0a5b      	lsrs	r3, r3, #9
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003298:	bf00      	nop
  }
  while (Delay --);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	60fa      	str	r2, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <RCC_Delay+0x1c>
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	20000024 	.word	0x20000024
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e041      	b.n	800334e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe fea2 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fc28 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e03a      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_Base_Start_IT+0x98>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d010      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e007      	b.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f839 	bl	800349a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 fb86 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_PWM_Start+0x24>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e022      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d109      	bne.n	80034ea <HAL_TIM_PWM_Start+0x3e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e015      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d109      	bne.n	8003504 <HAL_TIM_PWM_Start+0x58>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e008      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e05e      	b.n	80035dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0x82>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800352c:	e013      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Start+0x92>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353c:	e00b      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start+0xa2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800354c:	e003      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd74 	bl	800404c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_TIM_PWM_Start+0x138>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d107      	bne.n	800357e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIM_PWM_Start+0x138>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_TIM_PWM_Start+0xfa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d009      	beq.n	80035a6 <HAL_TIM_PWM_Start+0xfa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_TIM_PWM_Start+0x13c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIM_PWM_Start+0xfa>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a12      	ldr	r2, [pc, #72]	; (80035ec <HAL_TIM_PWM_Start+0x140>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d010      	beq.n	80035da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c8:	e007      	b.n	80035da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa6f 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa62 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa71 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa45 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa38 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa47 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa1b 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa0e 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fa1d 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9f1 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9e4 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9f3 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fef4 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fce1 	bl	8004162 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9b7 	bl	8003b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0220 	mvn.w	r2, #32
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fcac 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003816:	2302      	movs	r3, #2
 8003818:	e0ac      	b.n	8003974 <HAL_TIM_PWM_ConfigChannel+0x174>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	f200 809f 	bhi.w	8003968 <HAL_TIM_PWM_ConfigChannel+0x168>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003865 	.word	0x08003865
 8003834:	08003969 	.word	0x08003969
 8003838:	08003969 	.word	0x08003969
 800383c:	08003969 	.word	0x08003969
 8003840:	080038a5 	.word	0x080038a5
 8003844:	08003969 	.word	0x08003969
 8003848:	08003969 	.word	0x08003969
 800384c:	08003969 	.word	0x08003969
 8003850:	080038e7 	.word	0x080038e7
 8003854:	08003969 	.word	0x08003969
 8003858:	08003969 	.word	0x08003969
 800385c:	08003969 	.word	0x08003969
 8003860:	08003927 	.word	0x08003927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f9d0 	bl	8003c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
      break;
 80038a2:	e062      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa16 	bl	8003cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]
      break;
 80038e4:	e041      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa5f 	bl	8003db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0208 	orr.w	r2, r2, #8
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0204 	bic.w	r2, r2, #4
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      break;
 8003924:	e021      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 faa9 	bl	8003e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	61da      	str	r2, [r3, #28]
      break;
 8003966:	e000      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_ConfigClockSource+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b3      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x180>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039cc:	d03e      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0xd0>
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d2:	f200 8087 	bhi.w	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	f000 8085 	beq.w	8003ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d87f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 80039e4:	2b70      	cmp	r3, #112	; 0x70
 80039e6:	d01a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xa2>
 80039e8:	2b70      	cmp	r3, #112	; 0x70
 80039ea:	d87b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 80039ec:	2b60      	cmp	r3, #96	; 0x60
 80039ee:	d050      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x116>
 80039f0:	2b60      	cmp	r3, #96	; 0x60
 80039f2:	d877      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 80039f4:	2b50      	cmp	r3, #80	; 0x50
 80039f6:	d03c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xf6>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d873      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d058      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x136>
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d86f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d064      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x156>
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d86b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d060      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x156>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d867      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x156>
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d05a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a1c:	e062      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f000 faee 	bl	800400e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	609a      	str	r2, [r3, #8]
      break;
 8003a4a:	e04e      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f000 fad7 	bl	800400e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6e:	609a      	str	r2, [r3, #8]
      break;
 8003a70:	e03b      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fa4e 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2150      	movs	r1, #80	; 0x50
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 faa5 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003a90:	e02b      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 fa6c 	bl	8003f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2160      	movs	r1, #96	; 0x60
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fa95 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e01b      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 fa2e 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fa85 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e00b      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 fa7c 	bl	8003fda <TIM_ITRx_SetConfig>
        break;
 8003ae2:	e002      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ae8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <TIM_Base_SetConfig+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <TIM_Base_SetConfig+0x30>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d007      	beq.n	8003b7c <TIM_Base_SetConfig+0x30>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <TIM_Base_SetConfig+0xbc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0x30>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <TIM_Base_SetConfig+0xc0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d108      	bne.n	8003b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <TIM_Base_SetConfig+0xb8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <TIM_Base_SetConfig+0xbc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <TIM_Base_SetConfig+0xc0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <TIM_Base_SetConfig+0xb8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800

08003c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0302 	bic.w	r3, r3, #2
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <TIM_OC1_SetConfig+0xc8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10c      	bne.n	8003c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0308 	bic.w	r3, r3, #8
 8003c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <TIM_OC1_SetConfig+0xc8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d111      	bne.n	8003cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00

08003cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0210 	bic.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <TIM_OC2_SetConfig+0xd0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10d      	bne.n	8003d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	; (8003dac <TIM_OC2_SetConfig+0xd0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d113      	bne.n	8003d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00

08003db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <TIM_OC3_SetConfig+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10d      	bne.n	8003e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <TIM_OC3_SetConfig+0xd0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00

08003e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	031b      	lsls	r3, r3, #12
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <TIM_OC4_SetConfig+0x98>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d109      	bne.n	8003ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00

08003f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 030a 	bic.w	r3, r3, #10
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 0210 	bic.w	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	031b      	lsls	r3, r3, #12
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f043 0307 	orr.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	431a      	orrs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	609a      	str	r2, [r3, #8]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2201      	movs	r2, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e046      	b.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d009      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10c      	bne.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03f      	b.n	8004206 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd ffae 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fc25 	bl	8004a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08a      	sub	sp, #40	; 0x28
 8004212:	af02      	add	r7, sp, #8
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	d17c      	bne.n	8004328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_UART_Transmit+0x2c>
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e075      	b.n	800432a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_UART_Transmit+0x3e>
 8004248:	2302      	movs	r3, #2
 800424a:	e06e      	b.n	800432a <HAL_UART_Transmit+0x11c>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2221      	movs	r2, #33	; 0x21
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004262:	f7fe f893 	bl	800238c <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d108      	bne.n	8004290 <HAL_UART_Transmit+0x82>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e003      	b.n	8004298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042a0:	e02a      	b.n	80042f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fa11 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e036      	b.n	800432a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3302      	adds	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e007      	b.n	80042ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1cf      	bne.n	80042a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f9e1 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e006      	b.n	800432a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_UART_IRQHandler+0x52>
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa99 	bl	80048b6 <UART_Receive_IT>
      return;
 8004384:	e17b      	b.n	800467e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80b1 	beq.w	80044f0 <HAL_UART_IRQHandler+0x1bc>
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <HAL_UART_IRQHandler+0x70>
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80a6 	beq.w	80044f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_UART_IRQHandler+0x90>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f043 0201 	orr.w	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_UART_IRQHandler+0xb0>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0202 	orr.w	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_UART_IRQHandler+0xd0>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_UART_IRQHandler+0xfa>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_UART_IRQHandler+0xee>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f043 0208 	orr.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 811e 	beq.w	8004674 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_UART_IRQHandler+0x11e>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa32 	bl	80048b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <HAL_UART_IRQHandler+0x146>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d031      	beq.n	80044de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f974 	bl	8004768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d023      	beq.n	80044d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d013      	beq.n	80044ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4a76      	ldr	r2, [pc, #472]	; (8004684 <HAL_UART_IRQHandler+0x350>)
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe f8bc 	bl	8002630 <HAL_DMA_Abort_IT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00e      	b.n	80044ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8ec 	bl	80046ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e00a      	b.n	80044ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8e8 	bl	80046ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e006      	b.n	80044ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8e4 	bl	80046ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044ea:	e0c3      	b.n	8004674 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	bf00      	nop
    return;
 80044ee:	e0c1      	b.n	8004674 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 80a1 	bne.w	800463c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 809b 	beq.w	800463c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8095 	beq.w	800463c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04e      	beq.n	80045d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004540:	8a3b      	ldrh	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8098 	beq.w	8004678 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800454c:	8a3a      	ldrh	r2, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	f080 8092 	bcs.w	8004678 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8a3a      	ldrh	r2, [r7, #16]
 8004558:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b20      	cmp	r3, #32
 8004562:	d02b      	beq.n	80045bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004572:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004592:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0210 	bic.w	r2, r2, #16
 80045b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd ffff 	bl	80025ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f876 	bl	80046be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045d2:	e051      	b.n	8004678 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d047      	beq.n	800467c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80045ec:	8a7b      	ldrh	r3, [r7, #18]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004600:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004630:	8a7b      	ldrh	r3, [r7, #18]
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f842 	bl	80046be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800463a:	e01f      	b.n	800467c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_UART_IRQHandler+0x324>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8c9 	bl	80047e8 <UART_Transmit_IT>
    return;
 8004656:	e012      	b.n	800467e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <HAL_UART_IRQHandler+0x34a>
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f90a 	bl	8004886 <UART_EndTransmit_IT>
    return;
 8004672:	e004      	b.n	800467e <HAL_UART_IRQHandler+0x34a>
    return;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <HAL_UART_IRQHandler+0x34a>
      return;
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <HAL_UART_IRQHandler+0x34a>
      return;
 800467c:	bf00      	nop
  }
}
 800467e:	3728      	adds	r7, #40	; 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	080047c1 	.word	0x080047c1

08004688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	e02c      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d028      	beq.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f4:	f7fd fe4a 	bl	800238c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	d21d      	bcs.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e00f      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	429a      	cmp	r2, r3
 800475c:	d0c3      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800477e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0210 	bic.w	r2, r2, #16
 80047a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff ff66 	bl	80046ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b21      	cmp	r3, #33	; 0x21
 80047fa:	d13e      	bne.n	800487a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d114      	bne.n	8004830 <UART_Transmit_IT+0x48>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d110      	bne.n	8004830 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004822:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]
 800482e:	e008      	b.n	8004842 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	1c59      	adds	r1, r3, #1
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6211      	str	r1, [r2, #32]
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4619      	mov	r1, r3
 8004850:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004864:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004874:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff feee 	bl	8004688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b22      	cmp	r3, #34	; 0x22
 80048c8:	f040 8099 	bne.w	80049fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d4:	d117      	bne.n	8004906 <UART_Receive_IT+0x50>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d113      	bne.n	8004906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28
 8004904:	e026      	b.n	8004954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d007      	beq.n	800492a <UART_Receive_IT+0x74>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <UART_Receive_IT+0x82>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e008      	b.n	800494a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004944:	b2da      	uxtb	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4619      	mov	r1, r3
 8004962:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004964:	2b00      	cmp	r3, #0
 8004966:	d148      	bne.n	80049fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0220 	bic.w	r2, r2, #32
 8004976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d123      	bne.n	80049f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0210 	bic.w	r2, r2, #16
 80049bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d10a      	bne.n	80049e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fe68 	bl	80046be <HAL_UARTEx_RxEventCallback>
 80049ee:	e002      	b.n	80049f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fe52 	bl	800469a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e002      	b.n	8004a00 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a42:	f023 030c 	bic.w	r3, r3, #12
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <UART_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe fbf0 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	e002      	b.n	8004a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fbd8 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8004a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <UART_SetConfig+0x118>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	0119      	lsls	r1, r3, #4
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009a      	lsls	r2, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <UART_SetConfig+0x118>)
 8004ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2064      	movs	r0, #100	; 0x64
 8004abe:	fb00 f303 	mul.w	r3, r0, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	3332      	adds	r3, #50	; 0x32
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <UART_SetConfig+0x118>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad4:	4419      	add	r1, r3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <UART_SetConfig+0x118>)
 8004aee:	fba3 0302 	umull	r0, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2064      	movs	r0, #100	; 0x64
 8004af6:	fb00 f303 	mul.w	r3, r0, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <UART_SetConfig+0x118>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	440a      	add	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	51eb851f 	.word	0x51eb851f

08004b24 <__errno>:
 8004b24:	4b01      	ldr	r3, [pc, #4]	; (8004b2c <__errno+0x8>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000030 	.word	0x20000030

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	2600      	movs	r6, #0
 8004b34:	4d0c      	ldr	r5, [pc, #48]	; (8004b68 <__libc_init_array+0x38>)
 8004b36:	4c0d      	ldr	r4, [pc, #52]	; (8004b6c <__libc_init_array+0x3c>)
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	f000 fc5c 	bl	80053fc <_init>
 8004b44:	2600      	movs	r6, #0
 8004b46:	4d0a      	ldr	r5, [pc, #40]	; (8004b70 <__libc_init_array+0x40>)
 8004b48:	4c0a      	ldr	r4, [pc, #40]	; (8004b74 <__libc_init_array+0x44>)
 8004b4a:	1b64      	subs	r4, r4, r5
 8004b4c:	10a4      	asrs	r4, r4, #2
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	080054e8 	.word	0x080054e8
 8004b6c:	080054e8 	.word	0x080054e8
 8004b70:	080054e8 	.word	0x080054e8
 8004b74:	080054ec 	.word	0x080054ec

08004b78 <memset>:
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4402      	add	r2, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <siprintf>:
 8004b88:	b40e      	push	{r1, r2, r3}
 8004b8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b8e:	b500      	push	{lr}
 8004b90:	b09c      	sub	sp, #112	; 0x70
 8004b92:	ab1d      	add	r3, sp, #116	; 0x74
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	9006      	str	r0, [sp, #24]
 8004b98:	9107      	str	r1, [sp, #28]
 8004b9a:	9104      	str	r1, [sp, #16]
 8004b9c:	4808      	ldr	r0, [pc, #32]	; (8004bc0 <siprintf+0x38>)
 8004b9e:	4909      	ldr	r1, [pc, #36]	; (8004bc4 <siprintf+0x3c>)
 8004ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	a902      	add	r1, sp, #8
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	f000 f868 	bl	8004c80 <_svfiprintf_r>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	b01c      	add	sp, #112	; 0x70
 8004bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bbc:	b003      	add	sp, #12
 8004bbe:	4770      	bx	lr
 8004bc0:	20000030 	.word	0x20000030
 8004bc4:	ffff0208 	.word	0xffff0208

08004bc8 <__ssputs_r>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	4682      	mov	sl, r0
 8004bd0:	429e      	cmp	r6, r3
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	d838      	bhi.n	8004c4c <__ssputs_r+0x84>
 8004bda:	898a      	ldrh	r2, [r1, #12]
 8004bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be0:	d032      	beq.n	8004c48 <__ssputs_r+0x80>
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6909      	ldr	r1, [r1, #16]
 8004be6:	3301      	adds	r3, #1
 8004be8:	eba5 0901 	sub.w	r9, r5, r1
 8004bec:	6965      	ldr	r5, [r4, #20]
 8004bee:	444b      	add	r3, r9
 8004bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf8:	106d      	asrs	r5, r5, #1
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf38      	it	cc
 8004bfe:	461d      	movcc	r5, r3
 8004c00:	0553      	lsls	r3, r2, #21
 8004c02:	d531      	bpl.n	8004c68 <__ssputs_r+0xa0>
 8004c04:	4629      	mov	r1, r5
 8004c06:	f000 fb53 	bl	80052b0 <_malloc_r>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	b950      	cbnz	r0, 8004c24 <__ssputs_r+0x5c>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	f8ca 3000 	str.w	r3, [sl]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	464a      	mov	r2, r9
 8004c26:	6921      	ldr	r1, [r4, #16]
 8004c28:	f000 face 	bl	80051c8 <memcpy>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	6126      	str	r6, [r4, #16]
 8004c3a:	444e      	add	r6, r9
 8004c3c:	6026      	str	r6, [r4, #0]
 8004c3e:	463e      	mov	r6, r7
 8004c40:	6165      	str	r5, [r4, #20]
 8004c42:	eba5 0509 	sub.w	r5, r5, r9
 8004c46:	60a5      	str	r5, [r4, #8]
 8004c48:	42be      	cmp	r6, r7
 8004c4a:	d900      	bls.n	8004c4e <__ssputs_r+0x86>
 8004c4c:	463e      	mov	r6, r7
 8004c4e:	4632      	mov	r2, r6
 8004c50:	4641      	mov	r1, r8
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f000 fac6 	bl	80051e4 <memmove>
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	1b9b      	subs	r3, r3, r6
 8004c5e:	4432      	add	r2, r6
 8004c60:	2000      	movs	r0, #0
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	e7db      	b.n	8004c20 <__ssputs_r+0x58>
 8004c68:	462a      	mov	r2, r5
 8004c6a:	f000 fb7b 	bl	8005364 <_realloc_r>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1e1      	bne.n	8004c38 <__ssputs_r+0x70>
 8004c74:	4650      	mov	r0, sl
 8004c76:	6921      	ldr	r1, [r4, #16]
 8004c78:	f000 face 	bl	8005218 <_free_r>
 8004c7c:	e7c7      	b.n	8004c0e <__ssputs_r+0x46>
	...

08004c80 <_svfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4698      	mov	r8, r3
 8004c86:	898b      	ldrh	r3, [r1, #12]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4614      	mov	r4, r2
 8004c90:	b09d      	sub	sp, #116	; 0x74
 8004c92:	d50e      	bpl.n	8004cb2 <_svfiprintf_r+0x32>
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b963      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x32>
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f000 fb09 	bl	80052b0 <_malloc_r>
 8004c9e:	6028      	str	r0, [r5, #0]
 8004ca0:	6128      	str	r0, [r5, #16]
 8004ca2:	b920      	cbnz	r0, 8004cae <_svfiprintf_r+0x2e>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e0d1      	b.n	8004e52 <_svfiprintf_r+0x1d2>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f04f 0901 	mov.w	r9, #1
 8004cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e6c <_svfiprintf_r+0x1ec>
 8004cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x5c>
 8004cd8:	2a25      	cmp	r2, #37	; 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x50>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7a>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6d 	bl	8004bc8 <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80aa 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a2 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	4851      	ldr	r0, [pc, #324]	; (8004e6c <_svfiprintf_r+0x1ec>)
 8004d26:	f000 fa41 	bl	80051ac <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xe6>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	; 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	; 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xf6>
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f04f 0c0a 	mov.w	ip, #10
 8004d52:	9a07      	ldr	r2, [sp, #28]
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	; 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94e      	bls.n	8004dfe <_svfiprintf_r+0x17e>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x110>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x110>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	46a2      	mov	sl, r4
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0x9c>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	; 0x2e
 8004d94:	d10c      	bne.n	8004db0 <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d135      	bne.n	8004e08 <_svfiprintf_r+0x188>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	3402      	adds	r4, #2
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	9203      	str	r2, [sp, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfb8      	it	lt
 8004daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dae:	9305      	str	r3, [sp, #20]
 8004db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e7c <_svfiprintf_r+0x1fc>
 8004db4:	2203      	movs	r2, #3
 8004db6:	4650      	mov	r0, sl
 8004db8:	7821      	ldrb	r1, [r4, #0]
 8004dba:	f000 f9f7 	bl	80051ac <memchr>
 8004dbe:	b140      	cbz	r0, 8004dd2 <_svfiprintf_r+0x152>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	eba0 000a 	sub.w	r0, r0, sl
 8004dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	3401      	adds	r4, #1
 8004dce:	4303      	orrs	r3, r0
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	4825      	ldr	r0, [pc, #148]	; (8004e70 <_svfiprintf_r+0x1f0>)
 8004dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dde:	f000 f9e5 	bl	80051ac <memchr>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d038      	beq.n	8004e58 <_svfiprintf_r+0x1d8>
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004de8:	bb1b      	cbnz	r3, 8004e32 <_svfiprintf_r+0x1b2>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	3307      	adds	r3, #7
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	3308      	adds	r3, #8
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df8:	4433      	add	r3, r6
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	e767      	b.n	8004cce <_svfiprintf_r+0x4e>
 8004dfe:	460c      	mov	r4, r1
 8004e00:	2001      	movs	r0, #1
 8004e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e06:	e7a5      	b.n	8004d54 <_svfiprintf_r+0xd4>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f04f 0c0a 	mov.w	ip, #10
 8004e0e:	4619      	mov	r1, r3
 8004e10:	3401      	adds	r4, #1
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	4620      	mov	r0, r4
 8004e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e1a:	3a30      	subs	r2, #48	; 0x30
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d903      	bls.n	8004e28 <_svfiprintf_r+0x1a8>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0c5      	beq.n	8004db0 <_svfiprintf_r+0x130>
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	e7c3      	b.n	8004db0 <_svfiprintf_r+0x130>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e30:	e7f0      	b.n	8004e14 <_svfiprintf_r+0x194>
 8004e32:	ab03      	add	r3, sp, #12
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	462a      	mov	r2, r5
 8004e38:	4638      	mov	r0, r7
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e3c:	a904      	add	r1, sp, #16
 8004e3e:	f3af 8000 	nop.w
 8004e42:	1c42      	adds	r2, r0, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	d1d6      	bne.n	8004df6 <_svfiprintf_r+0x176>
 8004e48:	89ab      	ldrh	r3, [r5, #12]
 8004e4a:	065b      	lsls	r3, r3, #25
 8004e4c:	f53f af2c 	bmi.w	8004ca8 <_svfiprintf_r+0x28>
 8004e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e52:	b01d      	add	sp, #116	; 0x74
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e62:	a904      	add	r1, sp, #16
 8004e64:	f000 f87c 	bl	8004f60 <_printf_i>
 8004e68:	e7eb      	b.n	8004e42 <_svfiprintf_r+0x1c2>
 8004e6a:	bf00      	nop
 8004e6c:	080054b4 	.word	0x080054b4
 8004e70:	080054be 	.word	0x080054be
 8004e74:	00000000 	.word	0x00000000
 8004e78:	08004bc9 	.word	0x08004bc9
 8004e7c:	080054ba 	.word	0x080054ba

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc28      	bgt.n	8004f1a <_printf_common+0x9a>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42d      	bmi.n	8004f34 <_printf_common+0xb4>
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d020      	beq.n	8004f28 <_printf_common+0xa8>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68e5      	ldr	r5, [r4, #12]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf18      	it	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	bf08      	it	eq
 8004efe:	1aad      	subeq	r5, r5, r2
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf08      	it	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfc4      	itt	gt
 8004f0c:	1a9b      	subgt	r3, r3, r2
 8004f0e:	18ed      	addgt	r5, r5, r3
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xcc>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xac>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xb0>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x3e>
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	18e1      	adds	r1, r4, r3
 8004f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f42:	4422      	add	r2, r4
 8004f44:	3302      	adds	r3, #2
 8004f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4a:	e7c5      	b.n	8004ed8 <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa8>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x92>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	7e27      	ldrb	r7, [r4, #24]
 8004f68:	4691      	mov	r9, r2
 8004f6a:	2f78      	cmp	r7, #120	; 0x78
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	469a      	mov	sl, r3
 8004f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d9 	beq.w	8005134 <_printf_i+0x1d4>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a4 	beq.w	80050d0 <_printf_i+0x170>
 8004f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a001      	add	r0, pc, #4	; (adr r0, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800511b 	.word	0x0800511b
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fd 	.word	0x080050fd
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513d 	.word	0x0800513d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005105 	.word	0x08005105
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	600a      	str	r2, [r1, #0]
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a4      	b.n	8005156 <_printf_i+0x1f6>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	6808      	ldr	r0, [r1, #0]
 8005010:	062e      	lsls	r6, r5, #24
 8005012:	f100 0304 	add.w	r3, r0, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	6805      	ldr	r5, [r0, #0]
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	2d00      	cmp	r5, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	426d      	negs	r5, r5
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	230a      	movs	r3, #10
 800502a:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005032:	6805      	ldr	r5, [r0, #0]
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	bf18      	it	ne
 8005038:	b22d      	sxthne	r5, r5
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6008      	str	r0, [r1, #0]
 8005044:	0628      	lsls	r0, r5, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0669      	lsls	r1, r5, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881d      	ldrh	r5, [r3, #0]
 8005052:	2f6f      	cmp	r7, #111	; 0x6f
 8005054:	bf0c      	ite	eq
 8005056:	2308      	moveq	r3, #8
 8005058:	230a      	movne	r3, #10
 800505a:	4852      	ldr	r0, [pc, #328]	; (80051a4 <_printf_i+0x244>)
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6866      	ldr	r6, [r4, #4]
 8005064:	2e00      	cmp	r6, #0
 8005066:	bfa8      	it	ge
 8005068:	6821      	ldrge	r1, [r4, #0]
 800506a:	60a6      	str	r6, [r4, #8]
 800506c:	bfa4      	itt	ge
 800506e:	f021 0104 	bicge.w	r1, r1, #4
 8005072:	6021      	strge	r1, [r4, #0]
 8005074:	b90d      	cbnz	r5, 800507a <_printf_i+0x11a>
 8005076:	2e00      	cmp	r6, #0
 8005078:	d04d      	beq.n	8005116 <_printf_i+0x1b6>
 800507a:	4616      	mov	r6, r2
 800507c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005080:	fb03 5711 	mls	r7, r3, r1, r5
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800508a:	462f      	mov	r7, r5
 800508c:	42bb      	cmp	r3, r7
 800508e:	460d      	mov	r5, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x11c>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x14e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07df      	lsls	r7, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x14e>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	; 0x30
 80050a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ae:	1b92      	subs	r2, r2, r6
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fedf 	bl	8004e80 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14c      	bne.n	8005160 <_printf_i+0x200>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	4834      	ldr	r0, [pc, #208]	; (80051a4 <_printf_i+0x244>)
 80050d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f856 5b04 	ldr.w	r5, [r6], #4
 80050de:	061f      	lsls	r7, r3, #24
 80050e0:	600e      	str	r6, [r1, #0]
 80050e2:	d514      	bpl.n	800510e <_printf_i+0x1ae>
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	bf44      	itt	mi
 80050e8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ec:	6023      	strmi	r3, [r4, #0]
 80050ee:	b91d      	cbnz	r5, 80050f8 <_printf_i+0x198>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	2310      	movs	r3, #16
 80050fa:	e7af      	b.n	800505c <_printf_i+0xfc>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	2378      	movs	r3, #120	; 0x78
 8005106:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	e7e3      	b.n	80050d6 <_printf_i+0x176>
 800510e:	065e      	lsls	r6, r3, #25
 8005110:	bf48      	it	mi
 8005112:	b2ad      	uxthmi	r5, r5
 8005114:	e7e6      	b.n	80050e4 <_printf_i+0x184>
 8005116:	4616      	mov	r6, r2
 8005118:	e7bb      	b.n	8005092 <_printf_i+0x132>
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	6826      	ldr	r6, [r4, #0]
 800511e:	1d1d      	adds	r5, r3, #4
 8005120:	6960      	ldr	r0, [r4, #20]
 8005122:	600d      	str	r5, [r1, #0]
 8005124:	0635      	lsls	r5, r6, #24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	d501      	bpl.n	800512e <_printf_i+0x1ce>
 800512a:	6018      	str	r0, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0x1d4>
 800512e:	0671      	lsls	r1, r6, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0x1ca>
 8005132:	8018      	strh	r0, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	4616      	mov	r6, r2
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7ba      	b.n	80050b2 <_printf_i+0x152>
 800513c:	680b      	ldr	r3, [r1, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	600a      	str	r2, [r1, #0]
 8005142:	681e      	ldr	r6, [r3, #0]
 8005144:	2100      	movs	r1, #0
 8005146:	4630      	mov	r0, r6
 8005148:	6862      	ldr	r2, [r4, #4]
 800514a:	f000 f82f 	bl	80051ac <memchr>
 800514e:	b108      	cbz	r0, 8005154 <_printf_i+0x1f4>
 8005150:	1b80      	subs	r0, r0, r6
 8005152:	6060      	str	r0, [r4, #4]
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e7a8      	b.n	80050b2 <_printf_i+0x152>
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	47d0      	blx	sl
 800516a:	3001      	adds	r0, #1
 800516c:	d0ab      	beq.n	80050c6 <_printf_i+0x166>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d413      	bmi.n	800519c <_printf_i+0x23c>
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	4298      	cmp	r0, r3
 800517a:	bfb8      	it	lt
 800517c:	4618      	movlt	r0, r3
 800517e:	e7a4      	b.n	80050ca <_printf_i+0x16a>
 8005180:	2301      	movs	r3, #1
 8005182:	4632      	mov	r2, r6
 8005184:	4649      	mov	r1, r9
 8005186:	4640      	mov	r0, r8
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d09b      	beq.n	80050c6 <_printf_i+0x166>
 800518e:	3501      	adds	r5, #1
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	1a5b      	subs	r3, r3, r1
 8005196:	42ab      	cmp	r3, r5
 8005198:	dcf2      	bgt.n	8005180 <_printf_i+0x220>
 800519a:	e7eb      	b.n	8005174 <_printf_i+0x214>
 800519c:	2500      	movs	r5, #0
 800519e:	f104 0619 	add.w	r6, r4, #25
 80051a2:	e7f5      	b.n	8005190 <_printf_i+0x230>
 80051a4:	080054c5 	.word	0x080054c5
 80051a8:	080054d6 	.word	0x080054d6

080051ac <memchr>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	b2c9      	uxtb	r1, r1
 80051b2:	4402      	add	r2, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	d101      	bne.n	80051be <memchr+0x12>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e003      	b.n	80051c6 <memchr+0x1a>
 80051be:	7804      	ldrb	r4, [r0, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	428c      	cmp	r4, r1
 80051c4:	d1f6      	bne.n	80051b4 <memchr+0x8>
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <memcpy>:
 80051c8:	440a      	add	r2, r1
 80051ca:	4291      	cmp	r1, r2
 80051cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	4770      	bx	lr
 80051d4:	b510      	push	{r4, lr}
 80051d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051da:	4291      	cmp	r1, r2
 80051dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e0:	d1f9      	bne.n	80051d6 <memcpy+0xe>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <memmove>:
 80051e4:	4288      	cmp	r0, r1
 80051e6:	b510      	push	{r4, lr}
 80051e8:	eb01 0402 	add.w	r4, r1, r2
 80051ec:	d902      	bls.n	80051f4 <memmove+0x10>
 80051ee:	4284      	cmp	r4, r0
 80051f0:	4623      	mov	r3, r4
 80051f2:	d807      	bhi.n	8005204 <memmove+0x20>
 80051f4:	1e43      	subs	r3, r0, #1
 80051f6:	42a1      	cmp	r1, r4
 80051f8:	d008      	beq.n	800520c <memmove+0x28>
 80051fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005202:	e7f8      	b.n	80051f6 <memmove+0x12>
 8005204:	4601      	mov	r1, r0
 8005206:	4402      	add	r2, r0
 8005208:	428a      	cmp	r2, r1
 800520a:	d100      	bne.n	800520e <memmove+0x2a>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005216:	e7f7      	b.n	8005208 <memmove+0x24>

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d043      	beq.n	80052a8 <_free_r+0x90>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f000 f8d0 	bl	80053d0 <__malloc_lock>
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <_free_r+0x94>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	4610      	mov	r0, r2
 8005236:	b933      	cbnz	r3, 8005246 <_free_r+0x2e>
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6014      	str	r4, [r2, #0]
 800523c:	4628      	mov	r0, r5
 800523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005242:	f000 b8cb 	b.w	80053dc <__malloc_unlock>
 8005246:	42a3      	cmp	r3, r4
 8005248:	d90a      	bls.n	8005260 <_free_r+0x48>
 800524a:	6821      	ldr	r1, [r4, #0]
 800524c:	1862      	adds	r2, r4, r1
 800524e:	4293      	cmp	r3, r2
 8005250:	bf01      	itttt	eq
 8005252:	681a      	ldreq	r2, [r3, #0]
 8005254:	685b      	ldreq	r3, [r3, #4]
 8005256:	1852      	addeq	r2, r2, r1
 8005258:	6022      	streq	r2, [r4, #0]
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6004      	str	r4, [r0, #0]
 800525e:	e7ed      	b.n	800523c <_free_r+0x24>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b10b      	cbz	r3, 800526a <_free_r+0x52>
 8005266:	42a3      	cmp	r3, r4
 8005268:	d9fa      	bls.n	8005260 <_free_r+0x48>
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	1850      	adds	r0, r2, r1
 800526e:	42a0      	cmp	r0, r4
 8005270:	d10b      	bne.n	800528a <_free_r+0x72>
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	4401      	add	r1, r0
 8005276:	1850      	adds	r0, r2, r1
 8005278:	4283      	cmp	r3, r0
 800527a:	6011      	str	r1, [r2, #0]
 800527c:	d1de      	bne.n	800523c <_free_r+0x24>
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4401      	add	r1, r0
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7d8      	b.n	800523c <_free_r+0x24>
 800528a:	d902      	bls.n	8005292 <_free_r+0x7a>
 800528c:	230c      	movs	r3, #12
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	e7d4      	b.n	800523c <_free_r+0x24>
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1821      	adds	r1, r4, r0
 8005296:	428b      	cmp	r3, r1
 8005298:	bf01      	itttt	eq
 800529a:	6819      	ldreq	r1, [r3, #0]
 800529c:	685b      	ldreq	r3, [r3, #4]
 800529e:	1809      	addeq	r1, r1, r0
 80052a0:	6021      	streq	r1, [r4, #0]
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7c9      	b.n	800523c <_free_r+0x24>
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	20000170 	.word	0x20000170

080052b0 <_malloc_r>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	1ccd      	adds	r5, r1, #3
 80052b4:	f025 0503 	bic.w	r5, r5, #3
 80052b8:	3508      	adds	r5, #8
 80052ba:	2d0c      	cmp	r5, #12
 80052bc:	bf38      	it	cc
 80052be:	250c      	movcc	r5, #12
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	4606      	mov	r6, r0
 80052c4:	db01      	blt.n	80052ca <_malloc_r+0x1a>
 80052c6:	42a9      	cmp	r1, r5
 80052c8:	d903      	bls.n	80052d2 <_malloc_r+0x22>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	f000 f87d 	bl	80053d0 <__malloc_lock>
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <_malloc_r+0xac>)
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	4614      	mov	r4, r2
 80052dc:	b99c      	cbnz	r4, 8005306 <_malloc_r+0x56>
 80052de:	4f20      	ldr	r7, [pc, #128]	; (8005360 <_malloc_r+0xb0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b923      	cbnz	r3, 80052ee <_malloc_r+0x3e>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 f862 	bl	80053b0 <_sbrk_r>
 80052ec:	6038      	str	r0, [r7, #0]
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f85d 	bl	80053b0 <_sbrk_r>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d123      	bne.n	8005342 <_malloc_r+0x92>
 80052fa:	230c      	movs	r3, #12
 80052fc:	4630      	mov	r0, r6
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	f000 f86c 	bl	80053dc <__malloc_unlock>
 8005304:	e7e3      	b.n	80052ce <_malloc_r+0x1e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	1b5b      	subs	r3, r3, r5
 800530a:	d417      	bmi.n	800533c <_malloc_r+0x8c>
 800530c:	2b0b      	cmp	r3, #11
 800530e:	d903      	bls.n	8005318 <_malloc_r+0x68>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	441c      	add	r4, r3
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	e004      	b.n	8005322 <_malloc_r+0x72>
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	42a2      	cmp	r2, r4
 800531c:	bf0c      	ite	eq
 800531e:	600b      	streq	r3, [r1, #0]
 8005320:	6053      	strne	r3, [r2, #4]
 8005322:	4630      	mov	r0, r6
 8005324:	f000 f85a 	bl	80053dc <__malloc_unlock>
 8005328:	f104 000b 	add.w	r0, r4, #11
 800532c:	1d23      	adds	r3, r4, #4
 800532e:	f020 0007 	bic.w	r0, r0, #7
 8005332:	1ac2      	subs	r2, r0, r3
 8005334:	d0cc      	beq.n	80052d0 <_malloc_r+0x20>
 8005336:	1a1b      	subs	r3, r3, r0
 8005338:	50a3      	str	r3, [r4, r2]
 800533a:	e7c9      	b.n	80052d0 <_malloc_r+0x20>
 800533c:	4622      	mov	r2, r4
 800533e:	6864      	ldr	r4, [r4, #4]
 8005340:	e7cc      	b.n	80052dc <_malloc_r+0x2c>
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	f024 0403 	bic.w	r4, r4, #3
 8005348:	42a0      	cmp	r0, r4
 800534a:	d0e3      	beq.n	8005314 <_malloc_r+0x64>
 800534c:	1a21      	subs	r1, r4, r0
 800534e:	4630      	mov	r0, r6
 8005350:	f000 f82e 	bl	80053b0 <_sbrk_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d1dd      	bne.n	8005314 <_malloc_r+0x64>
 8005358:	e7cf      	b.n	80052fa <_malloc_r+0x4a>
 800535a:	bf00      	nop
 800535c:	20000170 	.word	0x20000170
 8005360:	20000174 	.word	0x20000174

08005364 <_realloc_r>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	4607      	mov	r7, r0
 8005368:	4614      	mov	r4, r2
 800536a:	460e      	mov	r6, r1
 800536c:	b921      	cbnz	r1, 8005378 <_realloc_r+0x14>
 800536e:	4611      	mov	r1, r2
 8005370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005374:	f7ff bf9c 	b.w	80052b0 <_malloc_r>
 8005378:	b922      	cbnz	r2, 8005384 <_realloc_r+0x20>
 800537a:	f7ff ff4d 	bl	8005218 <_free_r>
 800537e:	4625      	mov	r5, r4
 8005380:	4628      	mov	r0, r5
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005384:	f000 f830 	bl	80053e8 <_malloc_usable_size_r>
 8005388:	42a0      	cmp	r0, r4
 800538a:	d20f      	bcs.n	80053ac <_realloc_r+0x48>
 800538c:	4621      	mov	r1, r4
 800538e:	4638      	mov	r0, r7
 8005390:	f7ff ff8e 	bl	80052b0 <_malloc_r>
 8005394:	4605      	mov	r5, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	d0f2      	beq.n	8005380 <_realloc_r+0x1c>
 800539a:	4631      	mov	r1, r6
 800539c:	4622      	mov	r2, r4
 800539e:	f7ff ff13 	bl	80051c8 <memcpy>
 80053a2:	4631      	mov	r1, r6
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff ff37 	bl	8005218 <_free_r>
 80053aa:	e7e9      	b.n	8005380 <_realloc_r+0x1c>
 80053ac:	4635      	mov	r5, r6
 80053ae:	e7e7      	b.n	8005380 <_realloc_r+0x1c>

080053b0 <_sbrk_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	2300      	movs	r3, #0
 80053b4:	4d05      	ldr	r5, [pc, #20]	; (80053cc <_sbrk_r+0x1c>)
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fc ff2c 	bl	8002218 <_sbrk>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_sbrk_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_sbrk_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	200004b8 	.word	0x200004b8

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f000 b811 	b.w	80053f8 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	200004c0 	.word	0x200004c0

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f000 b80c 	b.w	80053fa <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	200004c0 	.word	0x200004c0

080053e8 <_malloc_usable_size_r>:
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f18      	subs	r0, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfbc      	itt	lt
 80053f2:	580b      	ldrlt	r3, [r1, r0]
 80053f4:	18c0      	addlt	r0, r0, r3
 80053f6:	4770      	bx	lr

080053f8 <__retarget_lock_acquire_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_release_recursive>:
 80053fa:	4770      	bx	lr

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
