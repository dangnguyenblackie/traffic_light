
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe8  08004fe8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe8  08004fe8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe8  08004fe8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000094  08005084  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08005084  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016347  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  00036404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0003a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198de  00000000  00000000  0003ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119e5  00000000  00000000  00054666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b367  00000000  00000000  0006604b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f13b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  000f1408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f1c 	.word	0x08004f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004f1c 	.word	0x08004f1c

0800014c <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
	switch(index){
	case 0:
		return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f002 f9e6 	bl	8002544 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
	case 1:
		return HAL_GPIO_ReadPin(A1_MAN_GPIO_Port,A1_MAN_Pin);
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f002 f9e0 	bl	8002544 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
	case 2:
		return HAL_GPIO_ReadPin(A2_TUNING_GPIO_Port,A2_TUNING_Pin);
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f002 f9da 	bl	8002544 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
	case 3:
		return HAL_GPIO_ReadPin(A3_SET_GPIO_Port, A3_SET_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f002 f9d4 	bl	8002544 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 80001a0:	2301      	movs	r3, #1
	}
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess1+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	200000bc 	.word	0x200000bc

080001d4 <subKeyProcess2>:

void subKeyProcess2(int index){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <subKeyProcess2+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2101      	movs	r1, #1
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	200000cc 	.word	0x200000cc

080001f4 <getKeyInput>:

void getKeyInput(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e071      	b.n	80002e4 <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <getKeyInput+0x100>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <getKeyInput+0x104>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ff91 	bl	800014c <iKeyInput>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0x100>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	440b      	add	r3, r1
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <getKeyInput+0x108>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4927      	ldr	r1, [pc, #156]	; (80002f4 <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x10c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4923      	ldr	r1, [pc, #140]	; (80002f8 <getKeyInput+0x104>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	440b      	add	r3, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d017      	beq.n	80002a4 <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d125      	bne.n	80002de <getKeyInput+0xea>
					subKeyProcess1(i);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f7ff ff8e 	bl	80001b4 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x110>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a2:	e01c      	b.n	80002de <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0x110>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4915      	ldr	r1, [pc, #84]	; (8000304 <getKeyInput+0x110>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x110>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc0d      	bgt.n	80002de <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x104>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0xe0>
						subKeyProcess2(i);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff80 	bl	80001d4 <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <getKeyInput+0x110>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd8a      	ble.n	8000200 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	200000b8 	.word	0x200000b8
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d901      	bls.n	800031c <is_button_pressed+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e00d      	b.n	8000338 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <is_button_pressed+0x3c>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d106      	bne.n	8000336 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <is_button_pressed+0x3c>)
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed+0x30>
		}
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000bc 	.word	0x200000bc

08000348 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d901      	bls.n	800035c <is_button_pressed_1s+0x14>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	e00d      	b.n	8000378 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <is_button_pressed_1s+0x3c>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <is_button_pressed_1s+0x3c>)
 800036c:	2100      	movs	r1, #0
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000376:	2300      	movs	r3, #0
	}
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	200000cc 	.word	0x200000cc

08000388 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch(status){
 800038c:	4bb3      	ldr	r3, [pc, #716]	; (800065c <fsm_automatic_run+0x2d4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b0c      	cmp	r3, #12
 8000392:	dc21      	bgt.n	80003d8 <fsm_automatic_run+0x50>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f340 8156 	ble.w	8000646 <fsm_automatic_run+0x2be>
 800039a:	3b01      	subs	r3, #1
 800039c:	2b0b      	cmp	r3, #11
 800039e:	f200 8152 	bhi.w	8000646 <fsm_automatic_run+0x2be>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <fsm_automatic_run+0x20>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	08000407 	.word	0x08000407
 80003ac:	0800048b 	.word	0x0800048b
 80003b0:	08000647 	.word	0x08000647
 80003b4:	08000647 	.word	0x08000647
 80003b8:	08000647 	.word	0x08000647
 80003bc:	08000647 	.word	0x08000647
 80003c0:	08000647 	.word	0x08000647
 80003c4:	08000647 	.word	0x08000647
 80003c8:	08000647 	.word	0x08000647
 80003cc:	08000647 	.word	0x08000647
 80003d0:	08000521 	.word	0x08000521
 80003d4:	080005ab 	.word	0x080005ab
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	f040 8134 	bne.w	8000646 <fsm_automatic_run+0x2be>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80003de:	2003      	movs	r0, #3
 80003e0:	f000 fce0 	bl	8000da4 <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80003e4:	4b9e      	ldr	r3, [pc, #632]	; (8000660 <fsm_automatic_run+0x2d8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fa8d 	bl	8001908 <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80003ee:	4b9d      	ldr	r3, [pc, #628]	; (8000664 <fsm_automatic_run+0x2dc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 faa4 	bl	8001940 <setTimer4>
			timer2_flag = 1;
 80003f8:	4b9b      	ldr	r3, [pc, #620]	; (8000668 <fsm_automatic_run+0x2e0>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN1;
 80003fe:	4b97      	ldr	r3, [pc, #604]	; (800065c <fsm_automatic_run+0x2d4>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

			break;
 8000404:	e128      	b.n	8000658 <fsm_automatic_run+0x2d0>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fbd2 	bl	8000bb0 <setRed>
			setGreen(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fc4f 	bl	8000cb0 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff ff78 	bl	8000308 <is_button_pressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00d      	beq.n	800043a <fsm_automatic_run+0xb2>
				status_pedestrian = STOP_LIGHT;
 800041e:	4b93      	ldr	r3, [pc, #588]	; (800066c <fsm_automatic_run+0x2e4>)
 8000420:	222d      	movs	r2, #45	; 0x2d
 8000422:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000424:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000428:	f001 fa36 	bl	8001898 <setTimer1>

				buzzer_freq = BUZZER_FREQ_START;
 800042c:	4b90      	ldr	r3, [pc, #576]	; (8000670 <fsm_automatic_run+0x2e8>)
 800042e:	2232      	movs	r2, #50	; 0x32
 8000430:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000432:	4b90      	ldr	r3, [pc, #576]	; (8000674 <fsm_automatic_run+0x2ec>)
 8000434:	f240 5214 	movw	r2, #1300	; 0x514
 8000438:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag){
 800043a:	4b8f      	ldr	r3, [pc, #572]	; (8000678 <fsm_automatic_run+0x2f0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d007      	beq.n	8000452 <fsm_automatic_run+0xca>
				setTimer3(yellow_time);
 8000442:	4b8e      	ldr	r3, [pc, #568]	; (800067c <fsm_automatic_run+0x2f4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fa5e 	bl	8001908 <setTimer3>
				status = AUTO_YELLOW1;
 800044c:	4b83      	ldr	r3, [pc, #524]	; (800065c <fsm_automatic_run+0x2d4>)
 800044e:	2202      	movs	r2, #2
 8000450:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000452:	2001      	movs	r0, #1
 8000454:	f7ff ff58 	bl	8000308 <is_button_pressed>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d006      	beq.n	800046c <fsm_automatic_run+0xe4>
				status = MAN_GREEN1;
 800045e:	4b7f      	ldr	r3, [pc, #508]	; (800065c <fsm_automatic_run+0x2d4>)
 8000460:	2215      	movs	r2, #21
 8000462:	601a      	str	r2, [r3, #0]
				setTimer3(MANUAL_TIME);
 8000464:	f242 7010 	movw	r0, #10000	; 0x2710
 8000468:	f001 fa4e 	bl	8001908 <setTimer3>
			}

			if (is_button_pressed(2)) {
 800046c:	2002      	movs	r0, #2
 800046e:	f7ff ff4b 	bl	8000308 <is_button_pressed>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	f000 80e8 	beq.w	800064a <fsm_automatic_run+0x2c2>
				status = TUNING_RED;
 800047a:	4b78      	ldr	r3, [pc, #480]	; (800065c <fsm_automatic_run+0x2d4>)
 800047c:	221f      	movs	r2, #31
 800047e:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000480:	f242 7010 	movw	r0, #10000	; 0x2710
 8000484:	f001 fa40 	bl	8001908 <setTimer3>
			}


			break;
 8000488:	e0df      	b.n	800064a <fsm_automatic_run+0x2c2>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fb90 	bl	8000bb0 <setRed>
			setYellow(0);
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fbcd 	bl	8000c30 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff ff36 	bl	8000308 <is_button_pressed>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00d      	beq.n	80004be <fsm_automatic_run+0x136>
				status_pedestrian =	STOP_LIGHT;
 80004a2:	4b72      	ldr	r3, [pc, #456]	; (800066c <fsm_automatic_run+0x2e4>)
 80004a4:	222d      	movs	r2, #45	; 0x2d
 80004a6:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80004a8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80004ac:	f001 f9f4 	bl	8001898 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80004b0:	4b6f      	ldr	r3, [pc, #444]	; (8000670 <fsm_automatic_run+0x2e8>)
 80004b2:	2232      	movs	r2, #50	; 0x32
 80004b4:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80004b6:	4b6f      	ldr	r3, [pc, #444]	; (8000674 <fsm_automatic_run+0x2ec>)
 80004b8:	f240 5214 	movw	r2, #1300	; 0x514
 80004bc:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 80004be:	4b6e      	ldr	r3, [pc, #440]	; (8000678 <fsm_automatic_run+0x2f0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d010      	beq.n	80004e8 <fsm_automatic_run+0x160>
 80004c6:	4b6e      	ldr	r3, [pc, #440]	; (8000680 <fsm_automatic_run+0x2f8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00c      	beq.n	80004e8 <fsm_automatic_run+0x160>
				setTimer3(red_time);
 80004ce:	4b6d      	ldr	r3, [pc, #436]	; (8000684 <fsm_automatic_run+0x2fc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fa18 	bl	8001908 <setTimer3>
				setTimer4(green_time_2);
 80004d8:	4b6b      	ldr	r3, [pc, #428]	; (8000688 <fsm_automatic_run+0x300>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fa2f 	bl	8001940 <setTimer4>
				status = AUTO_GREEN2;
 80004e2:	4b5e      	ldr	r3, [pc, #376]	; (800065c <fsm_automatic_run+0x2d4>)
 80004e4:	220b      	movs	r2, #11
 80004e6:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff ff0d 	bl	8000308 <is_button_pressed>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <fsm_automatic_run+0x17a>
				status = MAN_YELLOW1;
 80004f4:	4b59      	ldr	r3, [pc, #356]	; (800065c <fsm_automatic_run+0x2d4>)
 80004f6:	2216      	movs	r2, #22
 80004f8:	601a      	str	r2, [r3, #0]
				setTimer3(MANUAL_TIME);
 80004fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80004fe:	f001 fa03 	bl	8001908 <setTimer3>
			}

			if (is_button_pressed(2)) {
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff ff00 	bl	8000308 <is_button_pressed>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	f000 809f 	beq.w	800064e <fsm_automatic_run+0x2c6>
				status = TUNING_RED;
 8000510:	4b52      	ldr	r3, [pc, #328]	; (800065c <fsm_automatic_run+0x2d4>)
 8000512:	221f      	movs	r2, #31
 8000514:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000516:	f242 7010 	movw	r0, #10000	; 0x2710
 800051a:	f001 f9f5 	bl	8001908 <setTimer3>
			}


			break;
 800051e:	e096      	b.n	800064e <fsm_automatic_run+0x2c6>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fb45 	bl	8000bb0 <setRed>
			setGreen(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fbc2 	bl	8000cb0 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff feeb 	bl	8000308 <is_button_pressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d011      	beq.n	800055c <fsm_automatic_run+0x1d4>
				setTimer5(BUZZER_CYCLE);
 8000538:	f240 5014 	movw	r0, #1300	; 0x514
 800053c:	f001 fa1c 	bl	8001978 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000540:	4b4a      	ldr	r3, [pc, #296]	; (800066c <fsm_automatic_run+0x2e4>)
 8000542:	222e      	movs	r2, #46	; 0x2e
 8000544:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000546:	f644 6020 	movw	r0, #20000	; 0x4e20
 800054a:	f001 f9a5 	bl	8001898 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800054e:	4b48      	ldr	r3, [pc, #288]	; (8000670 <fsm_automatic_run+0x2e8>)
 8000550:	2232      	movs	r2, #50	; 0x32
 8000552:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000554:	4b47      	ldr	r3, [pc, #284]	; (8000674 <fsm_automatic_run+0x2ec>)
 8000556:	f240 5214 	movw	r2, #1300	; 0x514
 800055a:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 800055c:	4b48      	ldr	r3, [pc, #288]	; (8000680 <fsm_automatic_run+0x2f8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d007      	beq.n	8000574 <fsm_automatic_run+0x1ec>
				setTimer4(yellow_time_2);
 8000564:	4b49      	ldr	r3, [pc, #292]	; (800068c <fsm_automatic_run+0x304>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f001 f9e9 	bl	8001940 <setTimer4>
				status = AUTO_YELLOW2;
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <fsm_automatic_run+0x2d4>)
 8000570:	220c      	movs	r2, #12
 8000572:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff fec7 	bl	8000308 <is_button_pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <fsm_automatic_run+0x206>
				status = MAN_GREEN2;
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <fsm_automatic_run+0x2d4>)
 8000582:	2217      	movs	r2, #23
 8000584:	601a      	str	r2, [r3, #0]
				setTimer3(MANUAL_TIME);
 8000586:	f242 7010 	movw	r0, #10000	; 0x2710
 800058a:	f001 f9bd 	bl	8001908 <setTimer3>
			}

			if (is_button_pressed(2)) {
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff feba 	bl	8000308 <is_button_pressed>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d05b      	beq.n	8000652 <fsm_automatic_run+0x2ca>
				status = TUNING_RED;
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <fsm_automatic_run+0x2d4>)
 800059c:	221f      	movs	r2, #31
 800059e:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 80005a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a4:	f001 f9b0 	bl	8001908 <setTimer3>
			}



			break;
 80005a8:	e053      	b.n	8000652 <fsm_automatic_run+0x2ca>
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fb00 	bl	8000bb0 <setRed>
			setYellow(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fb3d 	bl	8000c30 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fea6 	bl	8000308 <is_button_pressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d011      	beq.n	80005e6 <fsm_automatic_run+0x25e>
				setTimer5(BUZZER_CYCLE);
 80005c2:	f240 5014 	movw	r0, #1300	; 0x514
 80005c6:	f001 f9d7 	bl	8001978 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <fsm_automatic_run+0x2e4>)
 80005cc:	222e      	movs	r2, #46	; 0x2e
 80005ce:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80005d0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80005d4:	f001 f960 	bl	8001898 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <fsm_automatic_run+0x2e8>)
 80005da:	2232      	movs	r2, #50	; 0x32
 80005dc:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <fsm_automatic_run+0x2ec>)
 80005e0:	f240 5214 	movw	r2, #1300	; 0x514
 80005e4:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <fsm_automatic_run+0x2f8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d010      	beq.n	8000610 <fsm_automatic_run+0x288>
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <fsm_automatic_run+0x2f0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00c      	beq.n	8000610 <fsm_automatic_run+0x288>
				setTimer3(green_time);
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <fsm_automatic_run+0x2d8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f984 	bl	8001908 <setTimer3>
				setTimer4(red_time_2);
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <fsm_automatic_run+0x2dc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f99b 	bl	8001940 <setTimer4>
				status = AUTO_GREEN1;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <fsm_automatic_run+0x2d4>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff fe79 	bl	8000308 <is_button_pressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <fsm_automatic_run+0x2a2>
				status = MAN_YELLOW2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <fsm_automatic_run+0x2d4>)
 800061e:	2218      	movs	r2, #24
 8000620:	601a      	str	r2, [r3, #0]
				setTimer3(MANUAL_TIME);
 8000622:	f242 7010 	movw	r0, #10000	; 0x2710
 8000626:	f001 f96f 	bl	8001908 <setTimer3>
			}

			if (is_button_pressed(2)) {
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff fe6c 	bl	8000308 <is_button_pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00f      	beq.n	8000656 <fsm_automatic_run+0x2ce>
				status = TUNING_RED;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <fsm_automatic_run+0x2d4>)
 8000638:	221f      	movs	r2, #31
 800063a:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 800063c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000640:	f001 f962 	bl	8001908 <setTimer3>
			}

			break;
 8000644:	e007      	b.n	8000656 <fsm_automatic_run+0x2ce>
		default:
			break;
 8000646:	bf00      	nop
 8000648:	e006      	b.n	8000658 <fsm_automatic_run+0x2d0>
			break;
 800064a:	bf00      	nop
 800064c:	e004      	b.n	8000658 <fsm_automatic_run+0x2d0>
			break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <fsm_automatic_run+0x2d0>
			break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <fsm_automatic_run+0x2d0>
			break;
 8000656:	bf00      	nop
	}
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000004 	.word	0x20000004
 8000660:	20000014 	.word	0x20000014
 8000664:	20000018 	.word	0x20000018
 8000668:	20000120 	.word	0x20000120
 800066c:	20000008 	.word	0x20000008
 8000670:	20000114 	.word	0x20000114
 8000674:	20000110 	.word	0x20000110
 8000678:	20000128 	.word	0x20000128
 800067c:	20000010 	.word	0x20000010
 8000680:	20000130 	.word	0x20000130
 8000684:	2000000c 	.word	0x2000000c
 8000688:	20000020 	.word	0x20000020
 800068c:	2000001c 	.word	0x2000001c

08000690 <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	switch(status){
 8000694:	4b81      	ldr	r3, [pc, #516]	; (800089c <fsm_manual_run+0x20c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3b15      	subs	r3, #21
 800069a:	2b03      	cmp	r3, #3
 800069c:	f200 80f2 	bhi.w	8000884 <fsm_manual_run+0x1f4>
 80006a0:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <fsm_manual_run+0x18>)
 80006a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a6:	bf00      	nop
 80006a8:	080006b9 	.word	0x080006b9
 80006ac:	0800072d 	.word	0x0800072d
 80006b0:	080007a1 	.word	0x080007a1
 80006b4:	08000813 	.word	0x08000813
	case MAN_GREEN1:
		// TODO:
			// RED2 on, GREEN1 on
		setRed(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fa79 	bl	8000bb0 <setRed>
		setGreen(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 faf6 	bl	8000cb0 <setGreen>
			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe1f 	bl	8000308 <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00d      	beq.n	80006ec <fsm_manual_run+0x5c>
			status_pedestrian = STOP_LIGHT;
 80006d0:	4b73      	ldr	r3, [pc, #460]	; (80008a0 <fsm_manual_run+0x210>)
 80006d2:	222d      	movs	r2, #45	; 0x2d
 80006d4:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80006d6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80006da:	f001 f8dd 	bl	8001898 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80006de:	4b71      	ldr	r3, [pc, #452]	; (80008a4 <fsm_manual_run+0x214>)
 80006e0:	2232      	movs	r2, #50	; 0x32
 80006e2:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80006e4:	4b70      	ldr	r3, [pc, #448]	; (80008a8 <fsm_manual_run+0x218>)
 80006e6:	f240 5214 	movw	r2, #1300	; 0x514
 80006ea:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fe0b 	bl	8000308 <is_button_pressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d006      	beq.n	8000706 <fsm_manual_run+0x76>
			setTimer3(MANUAL_TIME);
 80006f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80006fc:	f001 f904 	bl	8001908 <setTimer3>
			status = MAN_YELLOW1;
 8000700:	4b66      	ldr	r3, [pc, #408]	; (800089c <fsm_manual_run+0x20c>)
 8000702:	2216      	movs	r2, #22
 8000704:	601a      	str	r2, [r3, #0]
		}

		if (timer3_flag) {
 8000706:	4b69      	ldr	r3, [pc, #420]	; (80008ac <fsm_manual_run+0x21c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 80bc 	beq.w	8000888 <fsm_manual_run+0x1f8>
			status = AUTO_YELLOW1;
 8000710:	4b62      	ldr	r3, [pc, #392]	; (800089c <fsm_manual_run+0x20c>)
 8000712:	2202      	movs	r2, #2
 8000714:	601a      	str	r2, [r3, #0]
			setTimer3(yellow_time);
 8000716:	4b66      	ldr	r3, [pc, #408]	; (80008b0 <fsm_manual_run+0x220>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f8f4 	bl	8001908 <setTimer3>
			setTimer4(yellow_time);
 8000720:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <fsm_manual_run+0x220>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f90b 	bl	8001940 <setTimer4>
		}

		break;
 800072a:	e0ad      	b.n	8000888 <fsm_manual_run+0x1f8>
	case MAN_YELLOW1:
		// TODO:
			// RED2 still on, YELLOW1 on
		setRed(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fa3f 	bl	8000bb0 <setRed>
		setYellow(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fa7c 	bl	8000c30 <setYellow>
			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fde5 	bl	8000308 <is_button_pressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00d      	beq.n	8000760 <fsm_manual_run+0xd0>
			status_pedestrian =	STOP_LIGHT;
 8000744:	4b56      	ldr	r3, [pc, #344]	; (80008a0 <fsm_manual_run+0x210>)
 8000746:	222d      	movs	r2, #45	; 0x2d
 8000748:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 800074a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800074e:	f001 f8a3 	bl	8001898 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000752:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <fsm_manual_run+0x214>)
 8000754:	2232      	movs	r2, #50	; 0x32
 8000756:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <fsm_manual_run+0x218>)
 800075a:	f240 5214 	movw	r2, #1300	; 0x514
 800075e:	601a      	str	r2, [r3, #0]
		}
		//SWITCH CASE
		if(is_button_pressed(1)){
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fdd1 	bl	8000308 <is_button_pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <fsm_manual_run+0xea>
			setTimer3(MANUAL_TIME);
 800076c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000770:	f001 f8ca 	bl	8001908 <setTimer3>
			status = MAN_GREEN2;
 8000774:	4b49      	ldr	r3, [pc, #292]	; (800089c <fsm_manual_run+0x20c>)
 8000776:	2217      	movs	r2, #23
 8000778:	601a      	str	r2, [r3, #0]
		}

		if (timer3_flag) {
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <fsm_manual_run+0x21c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8084 	beq.w	800088c <fsm_manual_run+0x1fc>
			status = AUTO_GREEN2;
 8000784:	4b45      	ldr	r3, [pc, #276]	; (800089c <fsm_manual_run+0x20c>)
 8000786:	220b      	movs	r2, #11
 8000788:	601a      	str	r2, [r3, #0]
			setTimer3(red_time);
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <fsm_manual_run+0x224>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f8ba 	bl	8001908 <setTimer3>
			setTimer4(green_time_2);
 8000794:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <fsm_manual_run+0x228>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f8d1 	bl	8001940 <setTimer4>
		}

		break;
 800079e:	e075      	b.n	800088c <fsm_manual_run+0x1fc>
	case MAN_GREEN2:
		// TODO:
			// RED2 off, GREEN2 on, RED1 on
		setRed(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fa05 	bl	8000bb0 <setRed>
		setGreen(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fa82 	bl	8000cb0 <setGreen>
			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fdab 	bl	8000308 <is_button_pressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00d      	beq.n	80007d4 <fsm_manual_run+0x144>
			status_pedestrian = WALK_LIGHT;
 80007b8:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <fsm_manual_run+0x210>)
 80007ba:	222e      	movs	r2, #46	; 0x2e
 80007bc:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80007be:	f644 6020 	movw	r0, #20000	; 0x4e20
 80007c2:	f001 f869 	bl	8001898 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <fsm_manual_run+0x214>)
 80007c8:	2232      	movs	r2, #50	; 0x32
 80007ca:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <fsm_manual_run+0x218>)
 80007ce:	f240 5214 	movw	r2, #1300	; 0x514
 80007d2:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fd97 	bl	8000308 <is_button_pressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d006      	beq.n	80007ee <fsm_manual_run+0x15e>
			setTimer3(MANUAL_TIME);
 80007e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007e4:	f001 f890 	bl	8001908 <setTimer3>
			status = MAN_YELLOW2;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <fsm_manual_run+0x20c>)
 80007ea:	2218      	movs	r2, #24
 80007ec:	601a      	str	r2, [r3, #0]
		}

		if (timer3_flag) {
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <fsm_manual_run+0x21c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d04c      	beq.n	8000890 <fsm_manual_run+0x200>
			status = AUTO_YELLOW2;
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <fsm_manual_run+0x20c>)
 80007f8:	220c      	movs	r2, #12
 80007fa:	601a      	str	r2, [r3, #0]
			setTimer4(yellow_time_2);
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <fsm_manual_run+0x22c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f89d 	bl	8001940 <setTimer4>
			setTimer3(yellow_time_2);
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <fsm_manual_run+0x22c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f87c 	bl	8001908 <setTimer3>
		}

		break;
 8000810:	e03e      	b.n	8000890 <fsm_manual_run+0x200>
	case MAN_YELLOW2:
		// TODO:
			// RED1 still on, YELLOW2 on
		setRed(0);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f9cc 	bl	8000bb0 <setRed>
		setYellow(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 fa09 	bl	8000c30 <setYellow>
			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd72 	bl	8000308 <is_button_pressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00d      	beq.n	8000846 <fsm_manual_run+0x1b6>
			status_pedestrian = WALK_LIGHT;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <fsm_manual_run+0x210>)
 800082c:	222e      	movs	r2, #46	; 0x2e
 800082e:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 8000830:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000834:	f001 f830 	bl	8001898 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <fsm_manual_run+0x214>)
 800083a:	2232      	movs	r2, #50	; 0x32
 800083c:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <fsm_manual_run+0x218>)
 8000840:	f240 5214 	movw	r2, #1300	; 0x514
 8000844:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fd5e 	bl	8000308 <is_button_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <fsm_manual_run+0x1d0>
			setTimer3(MANUAL_TIME);
 8000852:	f242 7010 	movw	r0, #10000	; 0x2710
 8000856:	f001 f857 	bl	8001908 <setTimer3>
			status = MAN_GREEN1;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <fsm_manual_run+0x20c>)
 800085c:	2215      	movs	r2, #21
 800085e:	601a      	str	r2, [r3, #0]
		}

		if (timer3_flag) {
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <fsm_manual_run+0x21c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d015      	beq.n	8000894 <fsm_manual_run+0x204>
			setTimer3(green_time);
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <fsm_manual_run+0x230>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f84b 	bl	8001908 <setTimer3>
			setTimer4(red_time_2);
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <fsm_manual_run+0x234>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f862 	bl	8001940 <setTimer4>
			status = AUTO_GREEN1;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <fsm_manual_run+0x20c>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
		}

		break;
 8000882:	e007      	b.n	8000894 <fsm_manual_run+0x204>
	default:
		break;
 8000884:	bf00      	nop
 8000886:	e006      	b.n	8000896 <fsm_manual_run+0x206>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <fsm_manual_run+0x206>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <fsm_manual_run+0x206>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <fsm_manual_run+0x206>
		break;
 8000894:	bf00      	nop
	}
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000004 	.word	0x20000004
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000114 	.word	0x20000114
 80008a8:	20000110 	.word	0x20000110
 80008ac:	20000128 	.word	0x20000128
 80008b0:	20000010 	.word	0x20000010
 80008b4:	2000000c 	.word	0x2000000c
 80008b8:	20000020 	.word	0x20000020
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	20000014 	.word	0x20000014
 80008c4:	20000018 	.word	0x20000018

080008c8 <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <fsm_pedestrian_run+0xc0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b2d      	cmp	r3, #45	; 0x2d
 80008d2:	d002      	beq.n	80008da <fsm_pedestrian_run+0x12>
 80008d4:	2b2e      	cmp	r3, #46	; 0x2e
 80008d6:	d028      	beq.n	800092a <fsm_pedestrian_run+0x62>
			}

			break;
		default:

			break;
 80008d8:	e054      	b.n	8000984 <fsm_pedestrian_run+0xbc>
			setPedestrian(0);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fa28 	bl	8000d30 <setPedestrian>
			if(timer1_flag){
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <fsm_pedestrian_run+0xc4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d010      	beq.n	800090a <fsm_pedestrian_run+0x42>
				status_pedestrian = -1;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <fsm_pedestrian_run+0xc0>)
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 fa1d 	bl	8000d30 <setPedestrian>
				buzzer_freq = 0;
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <fsm_pedestrian_run+0xc8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <fsm_pedestrian_run+0xcc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <fsm_pedestrian_run+0xd0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2){
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <fsm_pedestrian_run+0xd4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b0b      	cmp	r3, #11
 8000910:	d003      	beq.n	800091a <fsm_pedestrian_run+0x52>
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <fsm_pedestrian_run+0xd4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b0c      	cmp	r3, #12
 8000918:	d131      	bne.n	800097e <fsm_pedestrian_run+0xb6>
				status_pedestrian = WALK_LIGHT;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <fsm_pedestrian_run+0xc0>)
 800091c:	222e      	movs	r2, #46	; 0x2e
 800091e:	601a      	str	r2, [r3, #0]
				setTimer5(BUZZER_CYCLE);
 8000920:	f240 5014 	movw	r0, #1300	; 0x514
 8000924:	f001 f828 	bl	8001978 <setTimer5>
			break;
 8000928:	e029      	b.n	800097e <fsm_pedestrian_run+0xb6>
			setPedestrian(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fa00 	bl	8000d30 <setPedestrian>
			Buzzer();
 8000930:	f000 fce8 	bl	8001304 <Buzzer>
			if(timer1_flag){
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <fsm_pedestrian_run+0xc4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d010      	beq.n	800095e <fsm_pedestrian_run+0x96>
				status_pedestrian = -1;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <fsm_pedestrian_run+0xc0>)
 800093e:	f04f 32ff 	mov.w	r2, #4294967295
 8000942:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f9f3 	bl	8000d30 <setPedestrian>
				buzzer_freq = 0;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <fsm_pedestrian_run+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <fsm_pedestrian_run+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <fsm_pedestrian_run+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1){
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <fsm_pedestrian_run+0xd4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d003      	beq.n	800096e <fsm_pedestrian_run+0xa6>
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <fsm_pedestrian_run+0xd4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d109      	bne.n	8000982 <fsm_pedestrian_run+0xba>
				status_pedestrian = STOP_LIGHT;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <fsm_pedestrian_run+0xc0>)
 8000970:	222d      	movs	r2, #45	; 0x2d
 8000972:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <fsm_pedestrian_run+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800097c:	e001      	b.n	8000982 <fsm_pedestrian_run+0xba>
			break;
 800097e:	bf00      	nop
 8000980:	e000      	b.n	8000984 <fsm_pedestrian_run+0xbc>
			break;
 8000982:	bf00      	nop
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000008 	.word	0x20000008
 800098c:	20000118 	.word	0x20000118
 8000990:	20000114 	.word	0x20000114
 8000994:	20000110 	.word	0x20000110
 8000998:	2000015c 	.word	0x2000015c
 800099c:	20000004 	.word	0x20000004

080009a0 <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	switch(status){
 80009a4:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <fsm_tuning_run+0x1ec>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b21      	cmp	r3, #33	; 0x21
 80009aa:	d04f      	beq.n	8000a4c <fsm_tuning_run+0xac>
 80009ac:	2b21      	cmp	r3, #33	; 0x21
 80009ae:	f300 80e3 	bgt.w	8000b78 <fsm_tuning_run+0x1d8>
 80009b2:	2b1f      	cmp	r3, #31
 80009b4:	d003      	beq.n	80009be <fsm_tuning_run+0x1e>
 80009b6:	2b20      	cmp	r3, #32
 80009b8:	f000 8093 	beq.w	8000ae2 <fsm_tuning_run+0x142>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 80009bc:	e0dc      	b.n	8000b78 <fsm_tuning_run+0x1d8>
			if(is_button_pressed(3)){
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff fca2 	bl	8000308 <is_button_pressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <fsm_tuning_run+0x36>
				red_time += 500;
 80009ca:	4b71      	ldr	r3, [pc, #452]	; (8000b90 <fsm_tuning_run+0x1f0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009d2:	4a6f      	ldr	r2, [pc, #444]	; (8000b90 <fsm_tuning_run+0x1f0>)
 80009d4:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 80009d6:	2003      	movs	r0, #3
 80009d8:	f7ff fcb6 	bl	8000348 <is_button_pressed_1s>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d005      	beq.n	80009ee <fsm_tuning_run+0x4e>
				red_time -= 500;
 80009e2:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <fsm_tuning_run+0x1f0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009ea:	4a69      	ldr	r2, [pc, #420]	; (8000b90 <fsm_tuning_run+0x1f0>)
 80009ec:	6013      	str	r3, [r2, #0]
			red_time_2 = red_time;
 80009ee:	4b68      	ldr	r3, [pc, #416]	; (8000b90 <fsm_tuning_run+0x1f0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a68      	ldr	r2, [pc, #416]	; (8000b94 <fsm_tuning_run+0x1f4>)
 80009f4:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 80009f6:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <fsm_tuning_run+0x1f8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <fsm_tuning_run+0x6a>
				setRed(0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f8d6 	bl	8000bb0 <setRed>
				setRed(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 f8d3 	bl	8000bb0 <setRed>
			if(timer3_flag){
 8000a0a:	4b64      	ldr	r3, [pc, #400]	; (8000b9c <fsm_tuning_run+0x1fc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <fsm_tuning_run+0x7a>
				status = AUTO_INIT;
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	601a      	str	r2, [r3, #0]
			break;
 8000a18:	e0b0      	b.n	8000b7c <fsm_tuning_run+0x1dc>
			else if(is_button_pressed(2)){
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fc74 	bl	8000308 <is_button_pressed>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <fsm_tuning_run+0x96>
				status = TUNING_YELLOW;
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000a28:	2221      	movs	r2, #33	; 0x21
 8000a2a:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a30:	f000 ff6a 	bl	8001908 <setTimer3>
			break;
 8000a34:	e0a2      	b.n	8000b7c <fsm_tuning_run+0x1dc>
			else if(is_button_pressed(1)){
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fc66 	bl	8000308 <is_button_pressed>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 809c 	beq.w	8000b7c <fsm_tuning_run+0x1dc>
				status = AUTO_INIT;
 8000a44:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	601a      	str	r2, [r3, #0]
			break;
 8000a4a:	e097      	b.n	8000b7c <fsm_tuning_run+0x1dc>
			if(is_button_pressed(3)){
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fc5b 	bl	8000308 <is_button_pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <fsm_tuning_run+0xc4>
				yellow_time += 500;
 8000a58:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000a62:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 8000a64:	2003      	movs	r0, #3
 8000a66:	f7ff fc6f 	bl	8000348 <is_button_pressed_1s>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <fsm_tuning_run+0xdc>
				yellow_time -= 500;
 8000a70:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000a78:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000a7a:	6013      	str	r3, [r2, #0]
			yellow_time_2 = yellow_time;
 8000a7c:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <fsm_tuning_run+0x204>)
 8000a82:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <fsm_tuning_run+0x1f8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <fsm_tuning_run+0xf8>
				setYellow(0);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 f8cf 	bl	8000c30 <setYellow>
				setYellow(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 f8cc 	bl	8000c30 <setYellow>
			if(timer3_flag){
 8000a98:	4b40      	ldr	r3, [pc, #256]	; (8000b9c <fsm_tuning_run+0x1fc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <fsm_tuning_run+0x112>
				setTimer3(green_time);
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 ff2f 	bl	8001908 <setTimer3>
				status = AUTO_GREEN2;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000aac:	220b      	movs	r2, #11
 8000aae:	601a      	str	r2, [r3, #0]
			break;
 8000ab0:	e066      	b.n	8000b80 <fsm_tuning_run+0x1e0>
			else if(is_button_pressed(2)){
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fc28 	bl	8000308 <is_button_pressed>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <fsm_tuning_run+0x12e>
				status = TUNING_GREEN;
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000ac4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ac8:	f000 ff1e 	bl	8001908 <setTimer3>
			break;
 8000acc:	e058      	b.n	8000b80 <fsm_tuning_run+0x1e0>
			else if(is_button_pressed(1)){
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fc1a 	bl	8000308 <is_button_pressed>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d052      	beq.n	8000b80 <fsm_tuning_run+0x1e0>
				status = AUTO_INIT;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	601a      	str	r2, [r3, #0]
			break;
 8000ae0:	e04e      	b.n	8000b80 <fsm_tuning_run+0x1e0>
			if(is_button_pressed(3)){
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f7ff fc10 	bl	8000308 <is_button_pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <fsm_tuning_run+0x15a>
				green_time += 500;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000af6:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000af8:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 8000afa:	2003      	movs	r0, #3
 8000afc:	f7ff fc24 	bl	8000348 <is_button_pressed_1s>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <fsm_tuning_run+0x172>
				green_time -= 500;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000b10:	6013      	str	r3, [r2, #0]
			green_time_2 = green_time;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <fsm_tuning_run+0x208>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a25      	ldr	r2, [pc, #148]	; (8000bac <fsm_tuning_run+0x20c>)
 8000b18:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <fsm_tuning_run+0x1f8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <fsm_tuning_run+0x18e>
				setGreen(0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f8c4 	bl	8000cb0 <setGreen>
				setGreen(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 f8c1 	bl	8000cb0 <setGreen>
			if(timer3_flag){
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <fsm_tuning_run+0x1fc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <fsm_tuning_run+0x1a8>
				setTimer3(yellow_time);
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <fsm_tuning_run+0x200>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fee4 	bl	8001908 <setTimer3>
				status = AUTO_YELLOW2;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
			break;
 8000b46:	e01d      	b.n	8000b84 <fsm_tuning_run+0x1e4>
			else if(is_button_pressed(2)){
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fbdd 	bl	8000308 <is_button_pressed>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d007      	beq.n	8000b64 <fsm_tuning_run+0x1c4>
				status = TUNING_RED;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000b56:	221f      	movs	r2, #31
 8000b58:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000b5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b5e:	f000 fed3 	bl	8001908 <setTimer3>
			break;
 8000b62:	e00f      	b.n	8000b84 <fsm_tuning_run+0x1e4>
			else if(is_button_pressed(1)){
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fbcf 	bl	8000308 <is_button_pressed>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d009      	beq.n	8000b84 <fsm_tuning_run+0x1e4>
				status = AUTO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <fsm_tuning_run+0x1ec>)
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	601a      	str	r2, [r3, #0]
			break;
 8000b76:	e005      	b.n	8000b84 <fsm_tuning_run+0x1e4>
			break;
 8000b78:	bf00      	nop
 8000b7a:	e004      	b.n	8000b86 <fsm_tuning_run+0x1e6>
			break;
 8000b7c:	bf00      	nop
 8000b7e:	e002      	b.n	8000b86 <fsm_tuning_run+0x1e6>
			break;
 8000b80:	bf00      	nop
 8000b82:	e000      	b.n	8000b86 <fsm_tuning_run+0x1e6>
			break;
 8000b84:	bf00      	nop
	}
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000018 	.word	0x20000018
 8000b98:	20000120 	.word	0x20000120
 8000b9c:	20000128 	.word	0x20000128
 8000ba0:	20000010 	.word	0x20000010
 8000ba4:	2000001c 	.word	0x2000001c
 8000ba8:	20000014 	.word	0x20000014
 8000bac:	20000020 	.word	0x20000020

08000bb0 <setRed>:
 * Traffic light 2:
 *		Pin 1: D4 – PB5
 *		Pin 2: D5 – PB4
 */

void setRed(int index){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	switch(index){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <setRed+0x16>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d00c      	beq.n	8000bde <setRed+0x2e>
 8000bc4:	e016      	b.n	8000bf4 <setRed+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <setRed+0x78>)
 8000bce:	f001 fcd0 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <setRed+0x7c>)
 8000bd8:	f001 fccb 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000bdc:	e020      	b.n	8000c20 <setRed+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2120      	movs	r1, #32
 8000be2:	4812      	ldr	r0, [pc, #72]	; (8000c2c <setRed+0x7c>)
 8000be4:	f001 fcc5 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <setRed+0x7c>)
 8000bee:	f001 fcc0 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000bf2:	e015      	b.n	8000c20 <setRed+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <setRed+0x78>)
 8000bfc:	f001 fcb9 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <setRed+0x7c>)
 8000c06:	f001 fcb4 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <setRed+0x7c>)
 8000c10:	f001 fcaf 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2110      	movs	r1, #16
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <setRed+0x7c>)
 8000c1a:	f001 fcaa 	bl	8002572 <HAL_GPIO_WritePin>

			break;
 8000c1e:	bf00      	nop
	}
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <setYellow>:

void setYellow(int index){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	switch(index){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <setYellow+0x16>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00c      	beq.n	8000c5e <setYellow+0x2e>
 8000c44:	e016      	b.n	8000c74 <setYellow+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <setYellow+0x78>)
 8000c4e:	f001 fc90 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2108      	movs	r1, #8
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <setYellow+0x7c>)
 8000c58:	f001 fc8b 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000c5c:	e020      	b.n	8000ca0 <setYellow+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <setYellow+0x7c>)
 8000c64:	f001 fc85 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <setYellow+0x7c>)
 8000c6e:	f001 fc80 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000c72:	e015      	b.n	8000ca0 <setYellow+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <setYellow+0x78>)
 8000c7c:	f001 fc79 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2108      	movs	r1, #8
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <setYellow+0x7c>)
 8000c86:	f001 fc74 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <setYellow+0x7c>)
 8000c90:	f001 fc6f 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2110      	movs	r1, #16
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <setYellow+0x7c>)
 8000c9a:	f001 fc6a 	bl	8002572 <HAL_GPIO_WritePin>

			break;
 8000c9e:	bf00      	nop
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00

08000cb0 <setGreen>:

void setGreen(int index){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	switch(index){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <setGreen+0x16>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d00c      	beq.n	8000cde <setGreen+0x2e>
 8000cc4:	e016      	b.n	8000cf4 <setGreen+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	4816      	ldr	r0, [pc, #88]	; (8000d28 <setGreen+0x78>)
 8000cce:	f001 fc50 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4815      	ldr	r0, [pc, #84]	; (8000d2c <setGreen+0x7c>)
 8000cd8:	f001 fc4b 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000cdc:	e020      	b.n	8000d20 <setGreen+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <setGreen+0x7c>)
 8000ce4:	f001 fc45 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <setGreen+0x7c>)
 8000cee:	f001 fc40 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000cf2:	e015      	b.n	8000d20 <setGreen+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <setGreen+0x78>)
 8000cfc:	f001 fc39 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <setGreen+0x7c>)
 8000d06:	f001 fc34 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <setGreen+0x7c>)
 8000d10:	f001 fc2f 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2110      	movs	r1, #16
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <setGreen+0x7c>)
 8000d1a:	f001 fc2a 	bl	8002572 <HAL_GPIO_WritePin>

			break;
 8000d1e:	bf00      	nop
	}
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <setPedestrian>:
/*
 * @param: value
 * 			0:	RED
 * 			1: 	GREEN
 */
void setPedestrian(int value){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	switch(value){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <setPedestrian+0x16>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d00d      	beq.n	8000d60 <setPedestrian+0x30>
 8000d44:	e019      	b.n	8000d7a <setPedestrian+0x4a>
		case 0:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <setPedestrian+0x6c>)
 8000d4e:	f001 fc10 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <setPedestrian+0x70>)
 8000d5a:	f001 fc0a 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000d5e:	e019      	b.n	8000d94 <setPedestrian+0x64>
		case 1:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <setPedestrian+0x6c>)
 8000d68:	f001 fc03 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <setPedestrian+0x70>)
 8000d74:	f001 fbfd 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000d78:	e00c      	b.n	8000d94 <setPedestrian+0x64>
		default:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <setPedestrian+0x6c>)
 8000d82:	f001 fbf6 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <setPedestrian+0x70>)
 8000d8e:	f001 fbf0 	bl	8002572 <HAL_GPIO_WritePin>

			break;
 8000d92:	bf00      	nop
	}
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40010800 	.word	0x40010800

08000da4 <clearLED>:

void clearLED(int index){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	switch(index){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <clearLED+0x16>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d00c      	beq.n	8000dd2 <clearLED+0x2e>
 8000db8:	e016      	b.n	8000de8 <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc0:	4816      	ldr	r0, [pc, #88]	; (8000e1c <clearLED+0x78>)
 8000dc2:	f001 fbd6 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4815      	ldr	r0, [pc, #84]	; (8000e20 <clearLED+0x7c>)
 8000dcc:	f001 fbd1 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000dd0:	e020      	b.n	8000e14 <clearLED+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <clearLED+0x7c>)
 8000dd8:	f001 fbcb 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <clearLED+0x7c>)
 8000de2:	f001 fbc6 	bl	8002572 <HAL_GPIO_WritePin>
			break;
 8000de6:	e015      	b.n	8000e14 <clearLED+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <clearLED+0x78>)
 8000df0:	f001 fbbf 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2108      	movs	r1, #8
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <clearLED+0x7c>)
 8000dfa:	f001 fbba 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <clearLED+0x7c>)
 8000e04:	f001 fbb5 	bl	8002572 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <clearLED+0x7c>)
 8000e0e:	f001 fbb0 	bl	8002572 <HAL_GPIO_WritePin>


			break;
 8000e12:	bf00      	nop
	}
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 ffe8 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f842 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 f96e 	bl	8001110 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e34:	f000 f880 	bl	8000f38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e38:	f000 f8ca 	bl	8000fd0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000e3c:	f000 f93e 	bl	80010bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e40:	4814      	ldr	r0, [pc, #80]	; (8000e94 <main+0x70>)
 8000e42:	f002 f819 	bl	8002e78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e46:	2100      	movs	r1, #0
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <main+0x74>)
 8000e4a:	f002 f8bf 	bl	8002fcc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 8000e4e:	220a      	movs	r2, #10
 8000e50:	2100      	movs	r1, #0
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <main+0x78>)
 8000e54:	f000 fab0 	bl	80013b8 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8000e58:	220a      	movs	r2, #10
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <main+0x7c>)
 8000e5e:	f000 faab 	bl	80013b8 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000e62:	220a      	movs	r2, #10
 8000e64:	2100      	movs	r1, #0
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <main+0x80>)
 8000e68:	f000 faa6 	bl	80013b8 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	2100      	movs	r1, #0
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <main+0x84>)
 8000e72:	f000 faa1 	bl	80013b8 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 8000e76:	220a      	movs	r2, #10
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <main+0x88>)
 8000e7c:	f000 fa9c 	bl	80013b8 <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 8000e80:	220a      	movs	r2, #10
 8000e82:	2100      	movs	r1, #0
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <main+0x8c>)
 8000e86:	f000 fa97 	bl	80013b8 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000e8a:	f000 fcef 	bl	800186c <SCH_Dispatch_Tasks>
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1000);
//	  HAL_Delay(1000);

	  sendingUART();
 8000e8e:	f000 f9c9 	bl	8001224 <sendingUART>
	  SCH_Dispatch_Tasks();
 8000e92:	e7fa      	b.n	8000e8a <main+0x66>
 8000e94:	200001a4 	.word	0x200001a4
 8000e98:	2000015c 	.word	0x2000015c
 8000e9c:	080019e9 	.word	0x080019e9
 8000ea0:	080001f5 	.word	0x080001f5
 8000ea4:	08000389 	.word	0x08000389
 8000ea8:	08000691 	.word	0x08000691
 8000eac:	080009a1 	.word	0x080009a1
 8000eb0:	080008c9 	.word	0x080008c9

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	; 0x40
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	2228      	movs	r2, #40	; 0x28
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fbe8 	bl	8004698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fb55 	bl	80025a4 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f00:	f000 f98a 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fdc0 	bl	8002aa4 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f2a:	f000 f975 	bl	8001218 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	; 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f5e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f6c:	224f      	movs	r2, #79	; 0x4f
 8000f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f7e:	f001 ff2b 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f88:	f000 f946 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f9a:	f002 fa7f 	bl	800349c <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 f938 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000fb6:	f002 fdfd 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 f92a 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200001a4 	.word	0x200001a4

08000fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001002:	4a2d      	ldr	r2, [pc, #180]	; (80010b8 <MX_TIM3_Init+0xe8>)
 8001004:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001008:	223f      	movs	r2, #63	; 0x3f
 800100a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_TIM3_Init+0xe4>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001018:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_TIM3_Init+0xe4>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001026:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001028:	f001 fed6 	bl	8002dd8 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001032:	f000 f8f1 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001040:	4619      	mov	r1, r3
 8001042:	481c      	ldr	r0, [pc, #112]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001044:	f002 fa2a 	bl	800349c <HAL_TIM_ConfigClockSource>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800104e:	f000 f8e3 	bl	8001218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001054:	f001 ff62 	bl	8002f1c <HAL_TIM_PWM_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800105e:	f000 f8db 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4619      	mov	r1, r3
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001072:	f002 fd9f 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800107c:	f000 f8cc 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001080:	2360      	movs	r3, #96	; 0x60
 8001082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001098:	f002 f942 	bl	8003320 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010a2:	f000 f8b9 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM3_Init+0xe4>)
 80010a8:	f000 fd86 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000015c 	.word	0x2000015c
 80010b8:	40000400 	.word	0x40000400

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f002 fdce 	bl	8003c94 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f88b 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001ec 	.word	0x200001ec
 800110c:	40004400 	.word	0x40004400

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800115a:	4828      	ldr	r0, [pc, #160]	; (80011fc <MX_GPIO_Init+0xec>)
 800115c:	f001 fa09 	bl	8002572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <MX_GPIO_Init+0xf0>)
 8001168:	f001 fa03 	bl	8002572 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 800116c:	2303      	movs	r3, #3
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	2301      	movs	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	4820      	ldr	r0, [pc, #128]	; (8001200 <MX_GPIO_Init+0xf0>)
 8001180:	f001 f85c 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 8001184:	2310      	movs	r3, #16
 8001186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <MX_GPIO_Init+0xf0>)
 8001198:	f001 f850 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_GPIO_Init+0xec>)
 80011b0:	f001 f844 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 80011b4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <MX_GPIO_Init+0xec>)
 80011ce:	f001 f835 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 80011d2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_GPIO_Init+0xf0>)
 80011ec:	f001 f826 	bl	800223c <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	40010800 	.word	0x40010800

08001204 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800120c:	f000 faf6 	bl	80017fc <SCH_Update>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <sendingUART>:
 *      Author: PC
 */

#include "perihersal.h"

void sendingUART(){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <sendingUART+0xb0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d04f      	beq.n	80012d0 <sendingUART+0xac>
		if(!timer3_flag){
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <sendingUART+0xb4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d115      	bne.n	8001264 <sendingUART+0x40>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#\r\n", timer3_counter/100), 1000);
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <sendingUART+0xb8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <sendingUART+0xbc>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	1152      	asrs	r2, r2, #5
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4926      	ldr	r1, [pc, #152]	; (80012e4 <sendingUART+0xc0>)
 800124c:	4826      	ldr	r0, [pc, #152]	; (80012e8 <sendingUART+0xc4>)
 800124e:	f003 fa2b 	bl	80046a8 <siprintf>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	4923      	ldr	r1, [pc, #140]	; (80012e8 <sendingUART+0xc4>)
 800125c:	4823      	ldr	r0, [pc, #140]	; (80012ec <sendingUART+0xc8>)
 800125e:	f002 fd66 	bl	8003d2e <HAL_UART_Transmit>
 8001262:	e00b      	b.n	800127c <sendingUART+0x58>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#\r\n"), 1000);
 8001264:	4922      	ldr	r1, [pc, #136]	; (80012f0 <sendingUART+0xcc>)
 8001266:	4820      	ldr	r0, [pc, #128]	; (80012e8 <sendingUART+0xc4>)
 8001268:	f003 fa1e 	bl	80046a8 <siprintf>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	491c      	ldr	r1, [pc, #112]	; (80012e8 <sendingUART+0xc4>)
 8001276:	481d      	ldr	r0, [pc, #116]	; (80012ec <sendingUART+0xc8>)
 8001278:	f002 fd59 	bl	8003d2e <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <sendingUART+0xd0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d115      	bne.n	80012b0 <sendingUART+0x8c>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#\r\n", timer4_counter/100), 1000);
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <sendingUART+0xd4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <sendingUART+0xbc>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1152      	asrs	r2, r2, #5
 8001290:	17db      	asrs	r3, r3, #31
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4919      	ldr	r1, [pc, #100]	; (80012fc <sendingUART+0xd8>)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <sendingUART+0xc4>)
 800129a:	f003 fa05 	bl	80046a8 <siprintf>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	4910      	ldr	r1, [pc, #64]	; (80012e8 <sendingUART+0xc4>)
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <sendingUART+0xc8>)
 80012aa:	f002 fd40 	bl	8003d2e <HAL_UART_Transmit>
 80012ae:	e00b      	b.n	80012c8 <sendingUART+0xa4>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#\r\n"), 1000);
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <sendingUART+0xdc>)
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <sendingUART+0xc4>)
 80012b4:	f003 f9f8 	bl	80046a8 <siprintf>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	4909      	ldr	r1, [pc, #36]	; (80012e8 <sendingUART+0xc4>)
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <sendingUART+0xc8>)
 80012c4:	f002 fd33 	bl	8003d2e <HAL_UART_Transmit>
		}
		setTimer2(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f000 fb00 	bl	80018d0 <setTimer2>
	}
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000120 	.word	0x20000120
 80012d8:	20000128 	.word	0x20000128
 80012dc:	2000012c 	.word	0x2000012c
 80012e0:	51eb851f 	.word	0x51eb851f
 80012e4:	08004f34 	.word	0x08004f34
 80012e8:	200000f0 	.word	0x200000f0
 80012ec:	200001ec 	.word	0x200001ec
 80012f0:	08004f48 	.word	0x08004f48
 80012f4:	20000130 	.word	0x20000130
 80012f8:	20000134 	.word	0x20000134
 80012fc:	08004f60 	.word	0x08004f60
 8001300:	08004f74 	.word	0x08004f74

08001304 <Buzzer>:

void Buzzer(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	if(timer5_flag){
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <Buzzer+0x9c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d03c      	beq.n	800138a <Buzzer+0x86>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <Buzzer+0xa0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <Buzzer+0xa4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(buzzer_time/2);
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <Buzzer+0xa8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0fda      	lsrs	r2, r3, #31
 8001320:	4413      	add	r3, r2
 8001322:	105b      	asrs	r3, r3, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fb43 	bl	80019b0 <setTimer6>
		if(timer3_counter<5000){
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <Buzzer+0xac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001332:	4293      	cmp	r3, r2
 8001334:	dc0a      	bgt.n	800134c <Buzzer+0x48>
			buzzer_freq += 100;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <Buzzer+0xa0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3364      	adds	r3, #100	; 0x64
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <Buzzer+0xa0>)
 800133e:	6013      	str	r3, [r2, #0]
			buzzer_time -= 100;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <Buzzer+0xa8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3b64      	subs	r3, #100	; 0x64
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <Buzzer+0xa8>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e009      	b.n	8001360 <Buzzer+0x5c>
		}else{
			buzzer_freq += 30;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <Buzzer+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	331e      	adds	r3, #30
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <Buzzer+0xa0>)
 8001354:	6013      	str	r3, [r2, #0]
			buzzer_time -= 30;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Buzzer+0xa8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3b1e      	subs	r3, #30
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <Buzzer+0xa8>)
 800135e:	6013      	str	r3, [r2, #0]
		}


		if(buzzer_freq >= 1000) buzzer_freq = 1000;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <Buzzer+0xa0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001368:	db03      	blt.n	8001372 <Buzzer+0x6e>
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <Buzzer+0xa0>)
 800136c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001370:	601a      	str	r2, [r3, #0]
		if(buzzer_time <= 100)	buzzer_time = 100;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <Buzzer+0xa8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	dc02      	bgt.n	8001380 <Buzzer+0x7c>
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <Buzzer+0xa8>)
 800137c:	2264      	movs	r2, #100	; 0x64
 800137e:	601a      	str	r2, [r3, #0]
		setTimer5(buzzer_time);
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <Buzzer+0xa8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 faf7 	bl	8001978 <setTimer5>
	}
	if(timer6_flag){
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <Buzzer+0xb0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <Buzzer+0x96>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <Buzzer+0xa4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
	}
//	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000138 	.word	0x20000138
 80013a4:	20000114 	.word	0x20000114
 80013a8:	2000015c 	.word	0x2000015c
 80013ac:	20000110 	.word	0x20000110
 80013b0:	2000012c 	.word	0x2000012c
 80013b4:	20000140 	.word	0x20000140

080013b8 <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80013b8:	b4b0      	push	{r4, r5, r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 80013c4:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <SCH_Add_Task+0x24c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b1d      	cmp	r3, #29
 80013ca:	f300 81bd 	bgt.w	8001748 <SCH_Add_Task+0x390>

        if(len == 0){
 80013ce:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <SCH_Add_Task+0x24c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 80013d6:	4a8c      	ldr	r2, [pc, #560]	; (8001608 <SCH_Add_Task+0x250>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4a8b      	ldr	r2, [pc, #556]	; (800160c <SCH_Add_Task+0x254>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	4a88      	ldr	r2, [pc, #544]	; (8001608 <SCH_Add_Task+0x250>)
 80013e8:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a87      	ldr	r2, [pc, #540]	; (800160c <SCH_Add_Task+0x254>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b84      	ldr	r3, [pc, #528]	; (8001608 <SCH_Add_Task+0x250>)
 80013f8:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 80013fa:	4b83      	ldr	r3, [pc, #524]	; (8001608 <SCH_Add_Task+0x250>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 8001400:	4b83      	ldr	r3, [pc, #524]	; (8001610 <SCH_Add_Task+0x258>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e196      	b.n	8001736 <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 8001408:	4b81      	ldr	r3, [pc, #516]	; (8001610 <SCH_Add_Task+0x258>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	497e      	ldr	r1, [pc, #504]	; (8001608 <SCH_Add_Task+0x250>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3304      	adds	r3, #4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	429a      	cmp	r2, r3
 8001420:	f0c0 80ba 	bcc.w	8001598 <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 8001424:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <SCH_Add_Task+0x258>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e002      	b.n	8001432 <SCH_Add_Task+0x7a>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b78      	ldr	r3, [pc, #480]	; (8001614 <SCH_Add_Task+0x25c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	da0f      	bge.n	800145c <SCH_Add_Task+0xa4>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4a73      	ldr	r2, [pc, #460]	; (800160c <SCH_Add_Task+0x254>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	08d9      	lsrs	r1, r3, #3
 8001446:	4870      	ldr	r0, [pc, #448]	; (8001608 <SCH_Add_Task+0x250>)
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4403      	add	r3, r0
 8001454:	3304      	adds	r3, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4299      	cmp	r1, r3
 800145a:	d2e7      	bcs.n	800142c <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 800145c:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <SCH_Add_Task+0x25c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	429a      	cmp	r2, r3
 8001464:	d144      	bne.n	80014f0 <SCH_Add_Task+0x138>
 8001466:	4968      	ldr	r1, [pc, #416]	; (8001608 <SCH_Add_Task+0x250>)
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3304      	adds	r3, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	429a      	cmp	r2, r3
 800147c:	d338      	bcc.n	80014f0 <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	4961      	ldr	r1, [pc, #388]	; (8001608 <SCH_Add_Task+0x250>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	495c      	ldr	r1, [pc, #368]	; (800160c <SCH_Add_Task+0x254>)
 800149a:	fba1 1303 	umull	r1, r3, r1, r3
 800149e:	08d9      	lsrs	r1, r3, #3
 80014a0:	4859      	ldr	r0, [pc, #356]	; (8001608 <SCH_Add_Task+0x250>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4403      	add	r3, r0
 80014ac:	3304      	adds	r3, #4
 80014ae:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <SCH_Add_Task+0x254>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	08d9      	lsrs	r1, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	4608      	mov	r0, r1
 80014c0:	4951      	ldr	r1, [pc, #324]	; (8001608 <SCH_Add_Task+0x250>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3308      	adds	r3, #8
 80014ce:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	494c      	ldr	r1, [pc, #304]	; (8001608 <SCH_Add_Task+0x250>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	330c      	adds	r3, #12
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <SCH_Add_Task+0x25c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a49      	ldr	r2, [pc, #292]	; (8001610 <SCH_Add_Task+0x258>)
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e122      	b.n	8001736 <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 80014f0:	4b44      	ldr	r3, [pc, #272]	; (8001604 <SCH_Add_Task+0x24c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	e017      	b.n	8001528 <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1e5a      	subs	r2, r3, #1
 80014fc:	4842      	ldr	r0, [pc, #264]	; (8001608 <SCH_Add_Task+0x250>)
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4418      	add	r0, r3
 800150a:	493f      	ldr	r1, [pc, #252]	; (8001608 <SCH_Add_Task+0x250>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	4604      	mov	r4, r0
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	3b01      	subs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	dce3      	bgt.n	80014f8 <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 8001530:	4935      	ldr	r1, [pc, #212]	; (8001608 <SCH_Add_Task+0x250>)
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	4a31      	ldr	r2, [pc, #196]	; (800160c <SCH_Add_Task+0x254>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <SCH_Add_Task+0x250>)
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4403      	add	r3, r0
 800155a:	3304      	adds	r3, #4
 800155c:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <SCH_Add_Task+0x254>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	08db      	lsrs	r3, r3, #3
 8001568:	4618      	mov	r0, r3
 800156a:	4927      	ldr	r1, [pc, #156]	; (8001608 <SCH_Add_Task+0x250>)
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3308      	adds	r3, #8
 800157a:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 800157c:	4922      	ldr	r1, [pc, #136]	; (8001608 <SCH_Add_Task+0x250>)
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	330c      	adds	r3, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <SCH_Add_Task+0x258>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e0ce      	b.n	8001736 <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <SCH_Add_Task+0x258>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e002      	b.n	80015a6 <SCH_Add_Task+0x1ee>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <SCH_Add_Task+0x260>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dd0f      	ble.n	80015d0 <SCH_Add_Task+0x218>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <SCH_Add_Task+0x254>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	08d9      	lsrs	r1, r3, #3
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <SCH_Add_Task+0x250>)
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4299      	cmp	r1, r3
 80015ce:	d3e7      	bcc.n	80015a0 <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <SCH_Add_Task+0x260>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d156      	bne.n	8001688 <SCH_Add_Task+0x2d0>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <SCH_Add_Task+0x254>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	08d9      	lsrs	r1, r3, #3
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <SCH_Add_Task+0x250>)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d246      	bcs.n	8001688 <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 80015fa:	4b02      	ldr	r3, [pc, #8]	; (8001604 <SCH_Add_Task+0x24c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	e024      	b.n	800164c <SCH_Add_Task+0x294>
 8001602:	bf00      	nop
 8001604:	20000494 	.word	0x20000494
 8001608:	2000023c 	.word	0x2000023c
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	20000238 	.word	0x20000238
 8001614:	20000230 	.word	0x20000230
 8001618:	20000234 	.word	0x20000234
                        sTask[j] = sTask[j-1];
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	484c      	ldr	r0, [pc, #304]	; (8001754 <SCH_Add_Task+0x39c>)
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4418      	add	r0, r3
 800162e:	4949      	ldr	r1, [pc, #292]	; (8001754 <SCH_Add_Task+0x39c>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	4604      	mov	r4, r0
 800163c:	461d      	mov	r5, r3
 800163e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	3b01      	subs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <SCH_Add_Task+0x3a0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	429a      	cmp	r2, r3
 8001654:	dce2      	bgt.n	800161c <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 8001656:	4a3f      	ldr	r2, [pc, #252]	; (8001754 <SCH_Add_Task+0x39c>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4a3f      	ldr	r2, [pc, #252]	; (800175c <SCH_Add_Task+0x3a4>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <SCH_Add_Task+0x39c>)
 8001668:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <SCH_Add_Task+0x3a4>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	08db      	lsrs	r3, r3, #3
 8001674:	461a      	mov	r2, r3
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <SCH_Add_Task+0x39c>)
 8001678:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <SCH_Add_Task+0x39c>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <SCH_Add_Task+0x3a8>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e056      	b.n	8001736 <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <SCH_Add_Task+0x3ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	e017      	b.n	80016c0 <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	482f      	ldr	r0, [pc, #188]	; (8001754 <SCH_Add_Task+0x39c>)
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4418      	add	r0, r3
 80016a2:	492c      	ldr	r1, [pc, #176]	; (8001754 <SCH_Add_Task+0x39c>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	4604      	mov	r4, r0
 80016b0:	461d      	mov	r5, r3
 80016b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3b01      	subs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dce2      	bgt.n	8001690 <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 80016d0:	4920      	ldr	r1, [pc, #128]	; (8001754 <SCH_Add_Task+0x39c>)
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <SCH_Add_Task+0x3a4>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	08d9      	lsrs	r1, r3, #3
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <SCH_Add_Task+0x39c>)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4403      	add	r3, r0
 80016fa:	3304      	adds	r3, #4
 80016fc:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <SCH_Add_Task+0x3a4>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	4618      	mov	r0, r3
 800170a:	4912      	ldr	r1, [pc, #72]	; (8001754 <SCH_Add_Task+0x39c>)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3308      	adds	r3, #8
 800171a:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 800171c:	490d      	ldr	r1, [pc, #52]	; (8001754 <SCH_Add_Task+0x39c>)
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	330c      	adds	r3, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <SCH_Add_Task+0x3a8>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <SCH_Add_Task+0x3ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <SCH_Add_Task+0x3b0>)
 800173c:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <SCH_Add_Task+0x3ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <SCH_Add_Task+0x3ac>)
 8001746:	6013      	str	r3, [r2, #0]

	}

}
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bcb0      	pop	{r4, r5, r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000023c 	.word	0x2000023c
 8001758:	20000234 	.word	0x20000234
 800175c:	cccccccd 	.word	0xcccccccd
 8001760:	20000238 	.word	0x20000238
 8001764:	20000494 	.word	0x20000494
 8001768:	20000230 	.word	0x20000230

0800176c <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <SCH_Delete_Then_Add_Task+0x84>)
 8001774:	463c      	mov	r4, r7
 8001776:	461d      	mov	r5, r3
 8001778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e017      	b.n	80017b6 <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4819      	ldr	r0, [pc, #100]	; (80017f0 <SCH_Delete_Then_Add_Task+0x84>)
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	460b      	mov	r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4418      	add	r0, r3
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <SCH_Delete_Then_Add_Task+0x84>)
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	4604      	mov	r4, r0
 80017a6:	461d      	mov	r5, r3
 80017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <SCH_Delete_Then_Add_Task+0x88>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbe1      	blt.n	8001786 <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <SCH_Delete_Then_Add_Task+0x88>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SCH_Delete_Then_Add_Task+0x88>)
 80017ca:	6013      	str	r3, [r2, #0]
		tail -= 1;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <SCH_Delete_Then_Add_Task+0x8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <SCH_Delete_Then_Add_Task+0x8c>)
 80017d4:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fde9 	bl	80013b8 <SCH_Add_Task>

}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	20000494 	.word	0x20000494
 80017f8:	20000230 	.word	0x20000230

080017fc <SCH_Update>:


void SCH_Update(void) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001806:	e015      	b.n	8001834 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <SCH_Update+0x68>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	330c      	adds	r3, #12
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1c59      	adds	r1, r3, #1
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <SCH_Update+0x68>)
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	330c      	adds	r3, #12
 800182c:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3301      	adds	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001834:	490b      	ldr	r1, [pc, #44]	; (8001864 <SCH_Update+0x68>)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <SCH_Update+0x6c>)
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4293      	cmp	r3, r2
 800184c:	d9dc      	bls.n	8001808 <SCH_Update+0xc>
	}

	counter+=1;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SCH_Update+0x6c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <SCH_Update+0x6c>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000023c 	.word	0x2000023c
 8001868:	200000ec 	.word	0x200000ec

0800186c <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 8001870:	e009      	b.n	8001886 <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SCH_Dispatch_Tasks+0x28>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	3b01      	subs	r3, #1
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <SCH_Dispatch_Tasks+0x28>)
 800187a:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SCH_Dispatch_Tasks+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 8001882:	f7ff ff73 	bl	800176c <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <SCH_Dispatch_Tasks+0x28>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f1      	bne.n	8001872 <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000023c 	.word	0x2000023c

08001898 <setTimer1>:
int timer6_counter = 0;

int timer7_flag = 0;
int timer7_counter = 0;

void setTimer1(int time){
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	timer1_counter = time/10;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <setTimer1+0x2c>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	1092      	asrs	r2, r2, #2
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <setTimer1+0x30>)
 80018b0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <setTimer1+0x34>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	66666667 	.word	0x66666667
 80018c8:	2000011c 	.word	0x2000011c
 80018cc:	20000118 	.word	0x20000118

080018d0 <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int time){
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	timer2_counter = time/10;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <setTimer2+0x2c>)
 80018dc:	fb82 1203 	smull	r1, r2, r2, r3
 80018e0:	1092      	asrs	r2, r2, #2
 80018e2:	17db      	asrs	r3, r3, #31
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <setTimer2+0x30>)
 80018e8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <setTimer2+0x34>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	66666667 	.word	0x66666667
 8001900:	20000124 	.word	0x20000124
 8001904:	20000120 	.word	0x20000120

08001908 <setTimer3>:
void clearTimer2(){
	timer2_counter = 0;
	timer2_flag = 0;
}

void setTimer3(int time){
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	timer3_counter = time/10;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <setTimer3+0x2c>)
 8001914:	fb82 1203 	smull	r1, r2, r2, r3
 8001918:	1092      	asrs	r2, r2, #2
 800191a:	17db      	asrs	r3, r3, #31
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a06      	ldr	r2, [pc, #24]	; (8001938 <setTimer3+0x30>)
 8001920:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <setTimer3+0x34>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	66666667 	.word	0x66666667
 8001938:	2000012c 	.word	0x2000012c
 800193c:	20000128 	.word	0x20000128

08001940 <setTimer4>:
void clearTimer3(){
	timer3_counter = 0;
	timer3_flag = 0;
}

void setTimer4(int time){
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	timer4_counter = time/10;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <setTimer4+0x2c>)
 800194c:	fb82 1203 	smull	r1, r2, r2, r3
 8001950:	1092      	asrs	r2, r2, #2
 8001952:	17db      	asrs	r3, r3, #31
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <setTimer4+0x30>)
 8001958:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <setTimer4+0x34>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	66666667 	.word	0x66666667
 8001970:	20000134 	.word	0x20000134
 8001974:	20000130 	.word	0x20000130

08001978 <setTimer5>:
void clearTimer4(){
	timer4_counter = 0;
	timer4_flag = 0;
}

void setTimer5(int time){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	timer5_counter = time/10;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <setTimer5+0x2c>)
 8001984:	fb82 1203 	smull	r1, r2, r2, r3
 8001988:	1092      	asrs	r2, r2, #2
 800198a:	17db      	asrs	r3, r3, #31
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <setTimer5+0x30>)
 8001990:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <setTimer5+0x34>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	66666667 	.word	0x66666667
 80019a8:	2000013c 	.word	0x2000013c
 80019ac:	20000138 	.word	0x20000138

080019b0 <setTimer6>:
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 0;
}

void setTimer6(int time){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	timer6_counter = time/10;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <setTimer6+0x2c>)
 80019bc:	fb82 1203 	smull	r1, r2, r2, r3
 80019c0:	1092      	asrs	r2, r2, #2
 80019c2:	17db      	asrs	r3, r3, #31
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <setTimer6+0x30>)
 80019c8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <setTimer6+0x34>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	66666667 	.word	0x66666667
 80019e0:	20000144 	.word	0x20000144
 80019e4:	20000140 	.word	0x20000140

080019e8 <TimerRun>:
void clearTimer7(){
	timer7_counter = 0;
	timer7_flag = 0;
}

void TimerRun(){
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <TimerRun+0xc4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dd05      	ble.n	8001a00 <TimerRun+0x18>
		timer1_counter -= 1;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <TimerRun+0xc4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <TimerRun+0xc4>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e002      	b.n	8001a06 <TimerRun+0x1e>
	}
	else{
		timer1_flag = 1;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <TimerRun+0xc8>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <TimerRun+0xcc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	dd05      	ble.n	8001a1a <TimerRun+0x32>
		timer2_counter -= 1;
 8001a0e:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <TimerRun+0xcc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <TimerRun+0xcc>)
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e002      	b.n	8001a20 <TimerRun+0x38>
	}
	else{
		timer2_flag = 1;
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <TimerRun+0xd0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <TimerRun+0xd4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd05      	ble.n	8001a34 <TimerRun+0x4c>
		timer3_counter -= 1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <TimerRun+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <TimerRun+0xd4>)
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e002      	b.n	8001a3a <TimerRun+0x52>
	}
	else{
		timer3_flag = 1;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <TimerRun+0xd8>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <TimerRun+0xdc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dd05      	ble.n	8001a4e <TimerRun+0x66>
		timer4_counter -= 1;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <TimerRun+0xdc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <TimerRun+0xdc>)
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e002      	b.n	8001a54 <TimerRun+0x6c>
	}
	else{
		timer4_flag = 1;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <TimerRun+0xe0>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <TimerRun+0xe4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dd05      	ble.n	8001a68 <TimerRun+0x80>
		timer5_counter -= 1;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <TimerRun+0xe4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <TimerRun+0xe4>)
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e002      	b.n	8001a6e <TimerRun+0x86>
	}
	else{
		timer5_flag = 1;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <TimerRun+0xe8>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <TimerRun+0xec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dd05      	ble.n	8001a82 <TimerRun+0x9a>
		timer6_counter -= 1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <TimerRun+0xec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <TimerRun+0xec>)
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e002      	b.n	8001a88 <TimerRun+0xa0>
	}
	else{
		timer6_flag = 1;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <TimerRun+0xf0>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <TimerRun+0xf4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	dd05      	ble.n	8001a9c <TimerRun+0xb4>
		timer7_counter -= 1;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <TimerRun+0xf4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <TimerRun+0xf4>)
 8001a98:	6013      	str	r3, [r2, #0]
	}
	else{
		timer7_flag = 1;
	}
}
 8001a9a:	e002      	b.n	8001aa2 <TimerRun+0xba>
		timer7_flag = 1;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <TimerRun+0xf8>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000011c 	.word	0x2000011c
 8001ab0:	20000118 	.word	0x20000118
 8001ab4:	20000124 	.word	0x20000124
 8001ab8:	20000120 	.word	0x20000120
 8001abc:	2000012c 	.word	0x2000012c
 8001ac0:	20000128 	.word	0x20000128
 8001ac4:	20000134 	.word	0x20000134
 8001ac8:	20000130 	.word	0x20000130
 8001acc:	2000013c 	.word	0x2000013c
 8001ad0:	20000138 	.word	0x20000138
 8001ad4:	20000144 	.word	0x20000144
 8001ad8:	20000140 	.word	0x20000140
 8001adc:	2000014c 	.word	0x2000014c
 8001ae0:	20000148 	.word	0x20000148

08001ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_MspInit+0x5c>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_MspInit+0x5c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6193      	str	r3, [r2, #24]
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_MspInit+0x5c>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_MspInit+0x60>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_MspInit+0x60>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b58:	d114      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	201c      	movs	r0, #28
 8001b78:	f000 fa79 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b7c:	201c      	movs	r0, #28
 8001b7e:	f000 fa92 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b82:	e010      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_TIM_MspPostInit+0x58>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d117      	bne.n	8001c08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_TIM_MspPostInit+0x5c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_TIM_MspPostInit+0x5c>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_TIM_MspPostInit+0x5c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_TIM_MspPostInit+0x60>)
 8001c04:	f000 fb1a 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010800 	.word	0x40010800

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_UART_MspInit+0x98>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d137      	bne.n	8001cac <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_UART_MspInit+0x9c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480f      	ldr	r0, [pc, #60]	; (8001cbc <HAL_UART_MspInit+0xa0>)
 8001c80:	f000 fadc 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c84:	2308      	movs	r3, #8
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <HAL_UART_MspInit+0xa0>)
 8001c98:	f000 fad0 	bl	800223c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2026      	movs	r0, #38	; 0x26
 8001ca2:	f000 f9e4 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca6:	2026      	movs	r0, #38	; 0x26
 8001ca8:	f000 f9fd 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40004400 	.word	0x40004400
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 f8bf 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM2_IRQHandler+0x10>)
 8001d16:	f001 f9fb 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200001a4 	.word	0x200001a4

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f002 f893 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001ec 	.word	0x200001ec

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f002 fc6c 	bl	8004644 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20005000 	.word	0x20005000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	20000150 	.word	0x20000150
 8001da0:	200004b0 	.word	0x200004b0

08001da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff ffe5 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f002 fc39 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7ff f821 	bl	8000e24 <main>
  bx lr
 8001de2:	4770      	bx	lr
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001dec:	08004ff0 	.word	0x08004ff0
  ldr r2, =_sbss
 8001df0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001df4:	200004ac 	.word	0x200004ac

08001df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC1_2_IRQHandler>
	...

08001dfc <HAL_Init>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x28>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f923 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>
 8001e18:	f7ff fe64 	bl	8001ae4 <HAL_MspInit>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_InitTick>:
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f93b 	bl	80020c2 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 f903 	bl	800206e <HAL_NVIC_SetPriority>
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
 8001e72:	2301      	movs	r3, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000024 	.word	0x20000024
 8001e80:	2000002c 	.word	0x2000002c
 8001e84:	20000028 	.word	0x20000028

08001e88 <HAL_IncTick>:
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	2000002c 	.word	0x2000002c
 8001ea8:	20000498 	.word	0x20000498

08001eac <HAL_GetTick>:
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_GetTick+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000498 	.word	0x20000498

08001ec0 <__NVIC_SetPriorityGrouping>:
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <__NVIC_EnableIRQ+0x34>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
 8002008:	4313      	orrs	r3, r2
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <SysTick_Config>:
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff90 	bl	8001f5c <__NVIC_SetPriority>
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff2d 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	f7ff ff42 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff35 	bl	8001f24 <__NVIC_EnableIRQ>
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DMA_Abort>:
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x28>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]
 80020fe:	2301      	movs	r3, #1
 8002100:	e020      	b.n	8002144 <HAL_DMA_Abort+0x6a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020e 	bic.w	r2, r2, #14
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_DMA_Abort_IT>:
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <HAL_DMA_Abort_IT+0x22>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e051      	b.n	8002216 <HAL_DMA_Abort_IT+0xc6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_DMA_Abort_IT+0xd0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d029      	beq.n	80021f0 <HAL_DMA_Abort_IT+0xa0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_DMA_Abort_IT+0xd4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d022      	beq.n	80021ec <HAL_DMA_Abort_IT+0x9c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_DMA_Abort_IT+0xd8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d01a      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x96>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_DMA_Abort_IT+0xdc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d012      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x90>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_DMA_Abort_IT+0xe0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00a      	beq.n	80021da <HAL_DMA_Abort_IT+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_DMA_Abort_IT+0xe4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d102      	bne.n	80021d4 <HAL_DMA_Abort_IT+0x84>
 80021ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d2:	e00e      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d8:	e00b      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021de:	e008      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	e005      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	e002      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021ec:	2310      	movs	r3, #16
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021f0:	2301      	movs	r3, #1
 80021f2:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_DMA_Abort_IT+0xe8>)
 80021f4:	6053      	str	r3, [r2, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2020 	strb.w	r2, [r3, #32]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_DMA_Abort_IT+0xc6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020008 	.word	0x40020008
 8002224:	4002001c 	.word	0x4002001c
 8002228:	40020030 	.word	0x40020030
 800222c:	40020044 	.word	0x40020044
 8002230:	40020058 	.word	0x40020058
 8002234:	4002006c 	.word	0x4002006c
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_GPIO_Init>:
 800223c:	b480      	push	{r7}
 800223e:	b08b      	sub	sp, #44	; 0x2c
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	e169      	b.n	8002524 <HAL_GPIO_Init+0x2e8>
 8002250:	2201      	movs	r2, #1
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8158 	bne.w	800251e <HAL_GPIO_Init+0x2e2>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a9a      	ldr	r2, [pc, #616]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d875      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800227e:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d058      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002284:	4a96      	ldr	r2, [pc, #600]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d86f      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800228a:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d052      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002290:	4a94      	ldr	r2, [pc, #592]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d869      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d04c      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 800229c:	4a92      	ldr	r2, [pc, #584]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d863      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d046      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 80022a8:	4a90      	ldr	r2, [pc, #576]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d85d      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d82a      	bhi.n	8002308 <HAL_GPIO_Init+0xcc>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d859      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_GPIO_Init+0x80>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002323 	.word	0x08002323
 80022c8:	08002365 	.word	0x08002365
 80022cc:	0800236b 	.word	0x0800236b
 80022d0:	0800236b 	.word	0x0800236b
 80022d4:	0800236b 	.word	0x0800236b
 80022d8:	0800236b 	.word	0x0800236b
 80022dc:	0800236b 	.word	0x0800236b
 80022e0:	0800236b 	.word	0x0800236b
 80022e4:	0800236b 	.word	0x0800236b
 80022e8:	0800236b 	.word	0x0800236b
 80022ec:	0800236b 	.word	0x0800236b
 80022f0:	0800236b 	.word	0x0800236b
 80022f4:	0800236b 	.word	0x0800236b
 80022f8:	0800236b 	.word	0x0800236b
 80022fc:	0800236b 	.word	0x0800236b
 8002300:	08002319 	.word	0x08002319
 8002304:	0800232d 	.word	0x0800232d
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_GPIO_Init+0x2b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 800230e:	e02c      	b.n	800236a <HAL_GPIO_Init+0x12e>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	e029      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	e024      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	3308      	adds	r3, #8
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	e01f      	b.n	800236c <HAL_GPIO_Init+0x130>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	330c      	adds	r3, #12
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	e01a      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_GPIO_Init+0x108>
 800233e:	2304      	movs	r3, #4
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	e013      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_GPIO_Init+0x11c>
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	e009      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	e003      	b.n	800236c <HAL_GPIO_Init+0x130>
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x130>
 800236a:	bf00      	nop
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d801      	bhi.n	8002376 <HAL_GPIO_Init+0x13a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	e001      	b.n	800237a <HAL_GPIO_Init+0x13e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d802      	bhi.n	8002388 <HAL_GPIO_Init+0x14c>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x152>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3b08      	subs	r3, #8
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	210f      	movs	r1, #15
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80b1 	beq.w	800251e <HAL_GPIO_Init+0x2e2>
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4a48      	ldr	r2, [pc, #288]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_GPIO_Init+0x2c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_GPIO_Init+0x1ec>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_GPIO_Init+0x2c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1e8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_GPIO_Init+0x2c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1e4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <HAL_GPIO_Init+0x2cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1e0>
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 800241c:	2304      	movs	r3, #4
 800241e:	e004      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002428:	2300      	movs	r3, #0
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	492f      	ldr	r1, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x226>
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	492c      	ldr	r1, [pc, #176]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x234>
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4928      	ldr	r1, [pc, #160]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x24e>
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x25c>
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	491e      	ldr	r1, [pc, #120]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x276>
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x284>
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4914      	ldr	r1, [pc, #80]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d021      	beq.n	8002510 <HAL_GPIO_Init+0x2d4>
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e021      	b.n	800251e <HAL_GPIO_Init+0x2e2>
 80024da:	bf00      	nop
 80024dc:	10320000 	.word	0x10320000
 80024e0:	10310000 	.word	0x10310000
 80024e4:	10220000 	.word	0x10220000
 80024e8:	10210000 	.word	0x10210000
 80024ec:	10120000 	.word	0x10120000
 80024f0:	10110000 	.word	0x10110000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	40010400 	.word	0x40010400
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	43db      	mvns	r3, r3
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_GPIO_Init+0x304>)
 800251a:	4013      	ands	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3301      	adds	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f ae8e 	bne.w	8002250 <HAL_GPIO_Init+0x14>
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	372c      	adds	r7, #44	; 0x2c
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_ReadPin>:
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_GPIO_ReadPin+0x1e>
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_ReadPin+0x22>
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_GPIO_WritePin>:
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	807b      	strh	r3, [r7, #2]
 800257e:	4613      	mov	r3, r2
 8002580:	707b      	strb	r3, [r7, #1]
 8002582:	787b      	ldrb	r3, [r7, #1]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_WritePin+0x1e>
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	e003      	b.n	8002598 <HAL_GPIO_WritePin+0x26>
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	041a      	lsls	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e26c      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8087 	beq.w	80026d2 <HAL_RCC_OscConfig+0x12e>
 80025c4:	4b92      	ldr	r3, [pc, #584]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d00c      	beq.n	80025ea <HAL_RCC_OscConfig+0x46>
 80025d0:	4b8f      	ldr	r3, [pc, #572]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d112      	bne.n	8002602 <HAL_RCC_OscConfig+0x5e>
 80025dc:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d10b      	bne.n	8002602 <HAL_RCC_OscConfig+0x5e>
 80025ea:	4b89      	ldr	r3, [pc, #548]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d06c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x12c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d168      	bne.n	80026d0 <HAL_RCC_OscConfig+0x12c>
 80025fe:	2301      	movs	r3, #1
 8002600:	e246      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x76>
 800260c:	4b80      	ldr	r3, [pc, #512]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a7f      	ldr	r2, [pc, #508]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7a      	ldr	r2, [pc, #488]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a77      	ldr	r2, [pc, #476]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xbc>
 8002646:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a71      	ldr	r2, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 8002660:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6a      	ldr	r2, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a67      	ldr	r2, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x104>
 8002680:	f7ff fc14 	bl	8001eac <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xf6>
 8002688:	f7ff fc10 	bl	8001eac <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xf6>
 8002696:	2303      	movs	r3, #3
 8002698:	e1fa      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xe4>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x12e>
 80026a8:	f7ff fc00 	bl	8001eac <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x11e>
 80026b0:	f7ff fbfc 	bl	8001eac <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x11e>
 80026be:	2303      	movs	r3, #3
 80026c0:	e1e6      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 80026c2:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x10c>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x12e>
 80026d0:	bf00      	nop
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_OscConfig+0x202>
 80026de:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x15e>
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x18c>
 80026f6:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x18c>
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x176>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x176>
 8002716:	2301      	movs	r3, #1
 8002718:	e1ba      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4939      	ldr	r1, [pc, #228]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
 800272e:	e03a      	b.n	80027a6 <HAL_RCC_OscConfig+0x202>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_OscConfig+0x1d6>
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x270>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f7ff fbb5 	bl	8001eac <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x1b4>
 8002746:	f7ff fbb1 	bl	8001eac <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x1b4>
 8002754:	2303      	movs	r3, #3
 8002756:	e19b      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x1a2>
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4927      	ldr	r1, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x202>
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_RCC_OscConfig+0x270>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f7ff fb94 	bl	8001eac <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1f6>
 8002788:	f7ff fb90 	bl	8001eac <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1f6>
 8002796:	2303      	movs	r3, #3
 8002798:	e17a      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1e4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d03a      	beq.n	8002828 <HAL_RCC_OscConfig+0x284>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d019      	beq.n	80027ee <HAL_RCC_OscConfig+0x24a>
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_RCC_OscConfig+0x274>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f7ff fb74 	bl	8001eac <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x236>
 80027c8:	f7ff fb70 	bl	8001eac <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x236>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e15a      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x224>
 80027e6:	2001      	movs	r0, #1
 80027e8:	f000 fad8 	bl	8002d9c <RCC_Delay>
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x284>
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_RCC_OscConfig+0x274>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f7ff fb5a 	bl	8001eac <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
 80027fa:	e00f      	b.n	800281c <HAL_RCC_OscConfig+0x278>
 80027fc:	f7ff fb56 	bl	8001eac <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d908      	bls.n	800281c <HAL_RCC_OscConfig+0x278>
 800280a:	2303      	movs	r3, #3
 800280c:	e140      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	42420000 	.word	0x42420000
 8002818:	42420480 	.word	0x42420480
 800281c:	4b9e      	ldr	r3, [pc, #632]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e9      	bne.n	80027fc <HAL_RCC_OscConfig+0x258>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a6 	beq.w	8002982 <HAL_RCC_OscConfig+0x3de>
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
 800283a:	4b97      	ldr	r3, [pc, #604]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_RCC_OscConfig+0x2be>
 8002846:	4b94      	ldr	r3, [pc, #592]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a93      	ldr	r2, [pc, #588]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2fc>
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a8a      	ldr	r2, [pc, #552]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	f7ff fb17 	bl	8001eac <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 8002882:	f7ff fb13 	bl	8001eac <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 8002890:	2303      	movs	r3, #3
 8002892:	e0fd      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002894:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2de>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x312>
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a75      	ldr	r2, [pc, #468]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6213      	str	r3, [r2, #32]
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a72      	ldr	r2, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6213      	str	r3, [r2, #32]
 80028d6:	e01c      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x356>
 80028e0:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a6c      	ldr	r2, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a66      	ldr	r2, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x3a2>
 800291a:	f7ff fac7 	bl	8001eac <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x394>
 8002922:	f7ff fac3 	bl	8001eac <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x394>
 8002934:	2303      	movs	r3, #3
 8002936:	e0ab      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x37e>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x3cc>
 8002946:	f7ff fab1 	bl	8001eac <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
 800294e:	f7ff faad 	bl	8001eac <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3c0>
 8002960:	2303      	movs	r3, #3
 8002962:	e095      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x3aa>
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x3de>
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8081 	beq.w	8002a8e <HAL_RCC_OscConfig+0x4ea>
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d061      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4b8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d146      	bne.n	8002a2e <HAL_RCC_OscConfig+0x48a>
 80029a0:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f7ff fa81 	bl	8001eac <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x41c>
 80029ae:	f7ff fa7d 	bl	8001eac <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x41c>
 80029bc:	2303      	movs	r3, #3
 80029be:	e067      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x40a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	492d      	ldr	r1, [pc, #180]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a19      	ldr	r1, [r3, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	430b      	orrs	r3, r1
 80029fa:	4927      	ldr	r1, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f7ff fa51 	bl	8001eac <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x47c>
 8002a0e:	f7ff fa4d 	bl	8001eac <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x47c>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e037      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46a>
 8002a2c:	e02f      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f7ff fa3a 	bl	8001eac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x4aa>
 8002a3c:	f7ff fa36 	bl	8001eac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x4aa>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e020      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x498>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4e6>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42420060 	.word	0x42420060

08002aa4 <HAL_RCC_ClockConfig>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x92>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x68>
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x80>
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b22:	6053      	str	r3, [r2, #4]
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xb6>
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e073      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06b      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	f7ff f98a 	bl	8001eac <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
 8002b9c:	f7ff f986 	bl	8001eac <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e053      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x16e>
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x18e>
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
 8002c32:	f000 f821 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1cc>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f8e8 	bl	8001e28 <HAL_InitTick>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08004f9c 	.word	0x08004f9c
 8002c70:	20000024 	.word	0x20000024
 8002c74:	20000028 	.word	0x20000028

08002c78 <HAL_RCC_GetSysClockFreq>:
 8002c78:	b490      	push	{r4, r7}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c80:	1d3c      	adds	r4, r7, #4
 8002c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c88:	f240 2301 	movw	r3, #513	; 0x201
 8002c8c:	803b      	strh	r3, [r7, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x46>
 8002cb6:	e02d      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x9c>
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	e02d      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0xa2>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cca:	4413      	add	r3, r2
 8002ccc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x8c>
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c5b      	lsrs	r3, r3, #17
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cea:	4413      	add	r3, r2
 8002cec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf6:	fb02 f203 	mul.w	r2, r2, r3
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
 8002d02:	e004      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x96>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	e002      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0xa2>
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	bf00      	nop
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3728      	adds	r7, #40	; 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc90      	pop	{r4, r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	08004f8c 	.word	0x08004f8c
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	003d0900 	.word	0x003d0900

08002d38 <HAL_RCC_GetHCLKFreq>:
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000024 	.word	0x20000024

08002d4c <HAL_RCC_GetPCLK1Freq>:
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	f7ff fff2 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	08004fac 	.word	0x08004fac

08002d74 <HAL_RCC_GetPCLK2Freq>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	f7ff ffde 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0adb      	lsrs	r3, r3, #11
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08004fac 	.word	0x08004fac

08002d9c <RCC_Delay>:
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <RCC_Delay+0x34>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <RCC_Delay+0x38>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a5b      	lsrs	r3, r3, #9
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	bf00      	nop
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	60fa      	str	r2, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f9      	bne.n	8002db8 <RCC_Delay+0x1c>
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20000024 	.word	0x20000024
 8002dd4:	10624dd3 	.word	0x10624dd3

08002dd8 <HAL_TIM_Base_Init>:
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fea2 	bl	8001b48 <HAL_TIM_Base_MspInit>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fc28 	bl	800366c <TIM_Base_SetConfig>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIM_Base_Start_IT>:
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e03a      	b.n	8002f06 <HAL_TIM_Base_Start_IT+0x8e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_TIM_Base_Start_IT+0x98>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x58>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x58>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x58>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_TIM_Base_Start_IT+0x7c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x8c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <HAL_TIM_Base_Start_IT+0x8c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800

08002f1c <HAL_TIM_PWM_Init>:
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_PWM_Init+0x12>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_PWM_Init+0x96>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_PWM_Init+0x2c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f839 	bl	8002fba <HAL_TIM_PWM_MspInit>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fb86 	bl	800366c <TIM_Base_SetConfig>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_PWM_MspInit>:
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_Start>:
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x24>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e022      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d109      	bne.n	800300a <HAL_TIM_PWM_Start+0x3e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e015      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x58>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e008      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_TIM_PWM_Start+0x72>
 800303a:	2301      	movs	r3, #1
 800303c:	e05e      	b.n	80030fc <HAL_TIM_PWM_Start+0x130>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0x82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	e013      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0x92>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305c:	e00b      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xa2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	e003      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fd74 	bl	8003b6c <TIM_CCxChannelCmd>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_TIM_PWM_Start+0x138>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d107      	bne.n	800309e <HAL_TIM_PWM_Start+0xd2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_TIM_PWM_Start+0x138>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIM_PWM_Start+0xfa>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_PWM_Start+0xfa>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_TIM_PWM_Start+0x13c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_PWM_Start+0xfa>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_TIM_PWM_Start+0x140>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <HAL_TIM_PWM_Start+0x11e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d010      	beq.n	80030fa <HAL_TIM_PWM_Start+0x12e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e007      	b.n	80030fa <HAL_TIM_PWM_Start+0x12e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <HAL_TIM_IRQHandler>:
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x5c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x5c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0202 	mvn.w	r2, #2
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	771a      	strb	r2, [r3, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x4a>
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa6f 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0x56>
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa62 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fa71 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0204 	mvn.w	r2, #4
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	771a      	strb	r2, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x9e>
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa45 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xaa>
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa38 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa47 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x104>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x104>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	771a      	strb	r2, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xf2>
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fa1b 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xfe>
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa0e 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fa1d 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b10      	cmp	r3, #16
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x158>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x158>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0210 	mvn.w	r2, #16
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2208      	movs	r2, #8
 800323e:	771a      	strb	r2, [r3, #28]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x146>
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9f1 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0x152>
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9e4 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f9f3 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x184>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x184>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0201 	mvn.w	r2, #1
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd ffb8 	bl	8001204 <HAL_TIM_PeriodElapsedCallback>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1b0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1b0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b8:	611a      	str	r2, [r3, #16]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fce1 	bl	8003c82 <HAL_TIMEx_BreakCallback>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1dc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9b7 	bl	800365a <HAL_TIM_TriggerCallback>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x208>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x208>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0220 	mvn.w	r2, #32
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fcac 	bl	8003c70 <HAL_TIMEx_CommutCallback>
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_PWM_ConfigChannel>:
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003336:	2302      	movs	r3, #2
 8003338:	e0ac      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x174>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	f200 809f 	bhi.w	8003488 <HAL_TIM_PWM_ConfigChannel+0x168>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003385 	.word	0x08003385
 8003354:	08003489 	.word	0x08003489
 8003358:	08003489 	.word	0x08003489
 800335c:	08003489 	.word	0x08003489
 8003360:	080033c5 	.word	0x080033c5
 8003364:	08003489 	.word	0x08003489
 8003368:	08003489 	.word	0x08003489
 800336c:	08003489 	.word	0x08003489
 8003370:	08003407 	.word	0x08003407
 8003374:	08003489 	.word	0x08003489
 8003378:	08003489 	.word	0x08003489
 800337c:	08003489 	.word	0x08003489
 8003380:	08003447 	.word	0x08003447
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9d0 	bl	8003730 <TIM_OC1_SetConfig>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0208 	orr.w	r2, r2, #8
 800339e:	619a      	str	r2, [r3, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	619a      	str	r2, [r3, #24]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6999      	ldr	r1, [r3, #24]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	619a      	str	r2, [r3, #24]
 80033c2:	e062      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x16a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fa16 	bl	80037fc <TIM_OC2_SetConfig>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033de:	619a      	str	r2, [r3, #24]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ee:	619a      	str	r2, [r3, #24]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	021a      	lsls	r2, r3, #8
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
 8003404:	e041      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fa5f 	bl	80038d0 <TIM_OC3_SetConfig>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0208 	orr.w	r2, r2, #8
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0204 	bic.w	r2, r2, #4
 8003430:	61da      	str	r2, [r3, #28]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	61da      	str	r2, [r3, #28]
 8003444:	e021      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 faa9 	bl	80039a4 <TIM_OC4_SetConfig>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003460:	61da      	str	r2, [r3, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003470:	61da      	str	r2, [r3, #28]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69d9      	ldr	r1, [r3, #28]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003488:	bf00      	nop
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003492:	2300      	movs	r3, #0
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_ConfigClockSource>:
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_TIM_ConfigClockSource+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0b3      	b.n	800361c <HAL_TIM_ConfigClockSource+0x180>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ec:	d03e      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xd0>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f2:	f200 8087 	bhi.w	8003604 <HAL_TIM_ConfigClockSource+0x168>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	f000 8085 	beq.w	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003502:	d87f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d01a      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xa2>
 8003508:	2b70      	cmp	r3, #112	; 0x70
 800350a:	d87b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 800350c:	2b60      	cmp	r3, #96	; 0x60
 800350e:	d050      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x116>
 8003510:	2b60      	cmp	r3, #96	; 0x60
 8003512:	d877      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d03c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0xf6>
 8003518:	2b50      	cmp	r3, #80	; 0x50
 800351a:	d873      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d058      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x136>
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d86f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 8003524:	2b30      	cmp	r3, #48	; 0x30
 8003526:	d064      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x156>
 8003528:	2b30      	cmp	r3, #48	; 0x30
 800352a:	d86b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d060      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x156>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d867      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x156>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d05a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x156>
 800353c:	e062      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x168>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f000 faee 	bl	8003b2e <TIM_ETR_SetConfig>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	e04e      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f000 fad7 	bl	8003b2e <TIM_ETR_SetConfig>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e03b      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 fa4e 	bl	8003a40 <TIM_TI1_ConfigInputStage>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2150      	movs	r1, #80	; 0x50
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 faa5 	bl	8003afa <TIM_ITRx_SetConfig>
 80035b0:	e02b      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 fa6c 	bl	8003a9c <TIM_TI2_ConfigInputStage>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2160      	movs	r1, #96	; 0x60
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa95 	bl	8003afa <TIM_ITRx_SetConfig>
 80035d0:	e01b      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 fa2e 	bl	8003a40 <TIM_TI1_ConfigInputStage>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa85 	bl	8003afa <TIM_ITRx_SetConfig>
 80035f0:	e00b      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 fa7c 	bl	8003afa <TIM_ITRx_SetConfig>
 8003602:	e002      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_TIM_ConfigClockSource+0x16e>
 8003608:	bf00      	nop
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800361a:	2300      	movs	r3, #0
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_OC_DelayElapsedCallback>:
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_IC_CaptureCallback>:
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_TriggerCallback>:
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <TIM_Base_SetConfig>:
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a29      	ldr	r2, [pc, #164]	; (8003724 <TIM_Base_SetConfig+0xb8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x30>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x30>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a26      	ldr	r2, [pc, #152]	; (8003728 <TIM_Base_SetConfig+0xbc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x30>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a25      	ldr	r2, [pc, #148]	; (800372c <TIM_Base_SetConfig+0xc0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x42>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <TIM_Base_SetConfig+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <TIM_Base_SetConfig+0xbc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <TIM_Base_SetConfig+0xc0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0x74>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <TIM_Base_SetConfig+0xb8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <TIM_Base_SetConfig+0xa8>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	615a      	str	r2, [r3, #20]
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <TIM_OC1_SetConfig>:
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0302 	bic.w	r3, r3, #2
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <TIM_OC1_SetConfig+0xc8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10c      	bne.n	80037a6 <TIM_OC1_SetConfig+0x76>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0308 	bic.w	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <TIM_OC1_SetConfig+0xc8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d111      	bne.n	80037d2 <TIM_OC1_SetConfig+0xa2>
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	619a      	str	r2, [r3, #24]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	635a      	str	r2, [r3, #52]	; 0x34
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00

080037fc <TIM_OC2_SetConfig>:
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0210 	bic.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <TIM_OC2_SetConfig+0xd0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d10d      	bne.n	8003878 <TIM_OC2_SetConfig+0x7c>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <TIM_OC2_SetConfig+0xd0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d113      	bne.n	80038a8 <TIM_OC2_SetConfig+0xac>
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC3_SetConfig>:
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_OC3_SetConfig+0xd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10d      	bne.n	800394a <TIM_OC3_SetConfig+0x7a>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <TIM_OC3_SetConfig+0xd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d113      	bne.n	800397a <TIM_OC3_SetConfig+0xaa>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC4_SetConfig>:
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	031b      	lsls	r3, r3, #12
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <TIM_OC4_SetConfig+0x98>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d109      	bne.n	8003a18 <TIM_OC4_SetConfig+0x74>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	61da      	str	r2, [r3, #28]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00

08003a40 <TIM_TI1_ConfigInputStage>:
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 030a 	bic.w	r3, r3, #10
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	619a      	str	r2, [r3, #24]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <TIM_TI2_ConfigInputStage>:
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0210 	bic.w	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	031b      	lsls	r3, r3, #12
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <TIM_ITRx_SetConfig>:
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f043 0307 	orr.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <TIM_ETR_SetConfig>:
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <TIM_CCxChannelCmd>:
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	2201      	movs	r2, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	621a      	str	r2, [r3, #32]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_MasterConfigSynchronization>:
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e046      	b.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d009      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10c      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800

08003c70 <HAL_TIMEx_CommutCallback>:
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIMEx_BreakCallback>:
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_Init>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd ffae 	bl	8001c1c <HAL_UART_MspInit>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fc25 	bl	8004528 <UART_SetConfig>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	2300      	movs	r3, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_UART_Transmit>:
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08a      	sub	sp, #40	; 0x28
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d17c      	bne.n	8003e48 <HAL_UART_Transmit+0x11a>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Transmit+0x2c>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Transmit+0x30>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e075      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x3e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e06e      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2221      	movs	r2, #33	; 0x21
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d82:	f7fe f893 	bl	8001eac <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	849a      	strh	r2, [r3, #36]	; 0x24
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	88fa      	ldrh	r2, [r7, #6]
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d108      	bne.n	8003db0 <HAL_UART_Transmit+0x82>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <HAL_UART_Transmit+0x82>
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e003      	b.n	8003db8 <HAL_UART_Transmit+0x8a>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dc0:	e02a      	b.n	8003e18 <HAL_UART_Transmit+0xea>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fa11 	bl	80041f4 <UART_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_UART_Transmit+0xae>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e036      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_UART_Transmit+0xcc>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3302      	adds	r3, #2
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e007      	b.n	8003e0a <HAL_UART_Transmit+0xdc>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	84da      	strh	r2, [r3, #38]	; 0x26
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1cf      	bne.n	8003dc2 <HAL_UART_Transmit+0x94>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f9e1 	bl	80041f4 <UART_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_UART_Transmit+0x10e>
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e006      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_UART_IRQHandler>:
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x52>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x52>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x52>
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa99 	bl	80043d6 <UART_Receive_IT>
 8003ea4:	e17b      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80b1 	beq.w	8004010 <HAL_UART_IRQHandler+0x1bc>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x70>
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a6 	beq.w	8004010 <HAL_UART_IRQHandler+0x1bc>
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x90>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x90>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_UART_IRQHandler+0xb0>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_UART_IRQHandler+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f043 0202 	orr.w	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_UART_IRQHandler+0xd0>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_UART_IRQHandler+0xd0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00f      	beq.n	8003f4e <HAL_UART_IRQHandler+0xfa>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <HAL_UART_IRQHandler+0xee>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_IRQHandler+0xfa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f043 0208 	orr.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 811e 	beq.w	8004194 <HAL_UART_IRQHandler+0x340>
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_UART_IRQHandler+0x11e>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_IRQHandler+0x11e>
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa32 	bl	80043d6 <UART_Receive_IT>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_UART_IRQHandler+0x146>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d031      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1aa>
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f974 	bl	8004288 <UART_EndRxTransfer>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d023      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x1a2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fbc:	615a      	str	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d013      	beq.n	8003fee <HAL_UART_IRQHandler+0x19a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4a76      	ldr	r2, [pc, #472]	; (80041a4 <HAL_UART_IRQHandler+0x350>)
 8003fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe f8bc 	bl	8002150 <HAL_DMA_Abort_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_UART_IRQHandler+0x1b8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
 8003fec:	e00e      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8ec 	bl	80041cc <HAL_UART_ErrorCallback>
 8003ff4:	e00a      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8e8 	bl	80041cc <HAL_UART_ErrorCallback>
 8003ffc:	e006      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e4 	bl	80041cc <HAL_UART_ErrorCallback>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
 800400a:	e0c3      	b.n	8004194 <HAL_UART_IRQHandler+0x340>
 800400c:	bf00      	nop
 800400e:	e0c1      	b.n	8004194 <HAL_UART_IRQHandler+0x340>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 80a1 	bne.w	800415c <HAL_UART_IRQHandler+0x308>
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 809b 	beq.w	800415c <HAL_UART_IRQHandler+0x308>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8095 	beq.w	800415c <HAL_UART_IRQHandler+0x308>
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04e      	beq.n	80040f4 <HAL_UART_IRQHandler+0x2a0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	823b      	strh	r3, [r7, #16]
 8004060:	8a3b      	ldrh	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8098 	beq.w	8004198 <HAL_UART_IRQHandler+0x344>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406c:	8a3a      	ldrh	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	f080 8092 	bcs.w	8004198 <HAL_UART_IRQHandler+0x344>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8a3a      	ldrh	r2, [r7, #16]
 8004078:	85da      	strh	r2, [r3, #46]	; 0x2e
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b20      	cmp	r3, #32
 8004082:	d02b      	beq.n	80040dc <HAL_UART_IRQHandler+0x288>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	615a      	str	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd ffff 	bl	80020da <HAL_DMA_Abort>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f876 	bl	80041de <HAL_UARTEx_RxEventCallback>
 80040f2:	e051      	b.n	8004198 <HAL_UART_IRQHandler+0x344>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	827b      	strh	r3, [r7, #18]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d047      	beq.n	800419c <HAL_UART_IRQHandler+0x348>
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d044      	beq.n	800419c <HAL_UART_IRQHandler+0x348>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	615a      	str	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0210 	bic.w	r2, r2, #16
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	8a7b      	ldrh	r3, [r7, #18]
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f842 	bl	80041de <HAL_UARTEx_RxEventCallback>
 800415a:	e01f      	b.n	800419c <HAL_UART_IRQHandler+0x348>
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_UART_IRQHandler+0x324>
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_UART_IRQHandler+0x324>
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8c9 	bl	8004308 <UART_Transmit_IT>
 8004176:	e012      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x34a>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_UART_IRQHandler+0x34a>
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f90a 	bl	80043a6 <UART_EndTransmit_IT>
 8004192:	e004      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
 8004194:	bf00      	nop
 8004196:	e002      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
 800419c:	bf00      	nop
 800419e:	3728      	adds	r7, #40	; 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	080042e1 	.word	0x080042e1

080041a8 <HAL_UART_TxCpltCallback>:
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_UART_RxCpltCallback>:
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_ErrorCallback>:
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <HAL_UARTEx_RxEventCallback>:
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <UART_WaitOnFlagUntilTimeout>:
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
 8004204:	e02c      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d028      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <UART_WaitOnFlagUntilTimeout+0x30>
 8004214:	f7fd fe4a 	bl	8001eac <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	d21d      	bcs.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004232:	60da      	str	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800425c:	2303      	movs	r3, #3
 800425e:	e00f      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0x8c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	429a      	cmp	r2, r3
 800427c:	d0c3      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0x12>
 800427e:	2300      	movs	r3, #0
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_EndRxTransfer>:
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <UART_EndRxTransfer+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0210 	bic.w	r2, r2, #16
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <UART_DMAAbortOnError>:
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	84da      	strh	r2, [r3, #38]	; 0x26
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff ff66 	bl	80041cc <HAL_UART_ErrorCallback>
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_Transmit_IT>:
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b21      	cmp	r3, #33	; 0x21
 800431a:	d13e      	bne.n	800439a <UART_Transmit_IT+0x92>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d114      	bne.n	8004350 <UART_Transmit_IT+0x48>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d110      	bne.n	8004350 <UART_Transmit_IT+0x48>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	e008      	b.n	8004362 <UART_Transmit_IT+0x5a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6211      	str	r1, [r2, #32]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4619      	mov	r1, r3
 8004370:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <UART_Transmit_IT+0x8e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <UART_Transmit_IT+0x94>
 800439a:	2302      	movs	r3, #2
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <UART_EndTransmit_IT>:
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff feee 	bl	80041a8 <HAL_UART_TxCpltCallback>
 80043cc:	2300      	movs	r3, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_Receive_IT>:
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b22      	cmp	r3, #34	; 0x22
 80043e8:	f040 8099 	bne.w	800451e <UART_Receive_IT+0x148>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d117      	bne.n	8004426 <UART_Receive_IT+0x50>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <UART_Receive_IT+0x50>
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	b29a      	uxth	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
 8004424:	e026      	b.n	8004474 <UART_Receive_IT+0x9e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d007      	beq.n	800444a <UART_Receive_IT+0x74>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <UART_Receive_IT+0x82>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <UART_Receive_IT+0x82>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e008      	b.n	800446a <UART_Receive_IT+0x94>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	b2da      	uxtb	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29b      	uxth	r3, r3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4619      	mov	r1, r3
 8004482:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004484:	2b00      	cmp	r3, #0
 8004486:	d148      	bne.n	800451a <UART_Receive_IT+0x144>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0220 	bic.w	r2, r2, #32
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	615a      	str	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d123      	bne.n	8004510 <UART_Receive_IT+0x13a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0210 	bic.w	r2, r2, #16
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d10a      	bne.n	8004502 <UART_Receive_IT+0x12c>
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fe68 	bl	80041de <HAL_UARTEx_RxEventCallback>
 800450e:	e002      	b.n	8004516 <UART_Receive_IT+0x140>
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fe52 	bl	80041ba <HAL_UART_RxCpltCallback>
 8004516:	2300      	movs	r3, #0
 8004518:	e002      	b.n	8004520 <UART_Receive_IT+0x14a>
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <UART_Receive_IT+0x14a>
 800451e:	2302      	movs	r3, #2
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_SetConfig>:
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004562:	f023 030c 	bic.w	r3, r3, #12
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	430b      	orrs	r3, r1
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <UART_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <UART_SetConfig+0x70>
 8004590:	f7fe fbf0 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	e002      	b.n	800459e <UART_SetConfig+0x76>
 8004598:	f7fe fbd8 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <UART_SetConfig+0x118>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	0119      	lsls	r1, r3, #4
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <UART_SetConfig+0x118>)
 80045d6:	fba3 0302 	umull	r0, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2064      	movs	r0, #100	; 0x64
 80045de:	fb00 f303 	mul.w	r3, r0, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f4:	4419      	add	r1, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <UART_SetConfig+0x118>)
 800460e:	fba3 0302 	umull	r0, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	fb00 f303 	mul.w	r3, r0, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a07      	ldr	r2, [pc, #28]	; (8004640 <UART_SetConfig+0x118>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	440a      	add	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40013800 	.word	0x40013800
 8004640:	51eb851f 	.word	0x51eb851f

08004644 <__errno>:
 8004644:	4b01      	ldr	r3, [pc, #4]	; (800464c <__errno+0x8>)
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000030 	.word	0x20000030

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	2600      	movs	r6, #0
 8004654:	4d0c      	ldr	r5, [pc, #48]	; (8004688 <__libc_init_array+0x38>)
 8004656:	4c0d      	ldr	r4, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	f000 fc5c 	bl	8004f1c <_init>
 8004664:	2600      	movs	r6, #0
 8004666:	4d0a      	ldr	r5, [pc, #40]	; (8004690 <__libc_init_array+0x40>)
 8004668:	4c0a      	ldr	r4, [pc, #40]	; (8004694 <__libc_init_array+0x44>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f855 3b04 	ldr.w	r3, [r5], #4
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	08004fe8 	.word	0x08004fe8
 800468c:	08004fe8 	.word	0x08004fe8
 8004690:	08004fe8 	.word	0x08004fe8
 8004694:	08004fec 	.word	0x08004fec

08004698 <memset>:
 8004698:	4603      	mov	r3, r0
 800469a:	4402      	add	r2, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	d100      	bne.n	80046a2 <memset+0xa>
 80046a0:	4770      	bx	lr
 80046a2:	f803 1b01 	strb.w	r1, [r3], #1
 80046a6:	e7f9      	b.n	800469c <memset+0x4>

080046a8 <siprintf>:
 80046a8:	b40e      	push	{r1, r2, r3}
 80046aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046ae:	b500      	push	{lr}
 80046b0:	b09c      	sub	sp, #112	; 0x70
 80046b2:	ab1d      	add	r3, sp, #116	; 0x74
 80046b4:	9002      	str	r0, [sp, #8]
 80046b6:	9006      	str	r0, [sp, #24]
 80046b8:	9107      	str	r1, [sp, #28]
 80046ba:	9104      	str	r1, [sp, #16]
 80046bc:	4808      	ldr	r0, [pc, #32]	; (80046e0 <siprintf+0x38>)
 80046be:	4909      	ldr	r1, [pc, #36]	; (80046e4 <siprintf+0x3c>)
 80046c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046c4:	9105      	str	r1, [sp, #20]
 80046c6:	6800      	ldr	r0, [r0, #0]
 80046c8:	a902      	add	r1, sp, #8
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	f000 f868 	bl	80047a0 <_svfiprintf_r>
 80046d0:	2200      	movs	r2, #0
 80046d2:	9b02      	ldr	r3, [sp, #8]
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	b01c      	add	sp, #112	; 0x70
 80046d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046dc:	b003      	add	sp, #12
 80046de:	4770      	bx	lr
 80046e0:	20000030 	.word	0x20000030
 80046e4:	ffff0208 	.word	0xffff0208

080046e8 <__ssputs_r>:
 80046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	688e      	ldr	r6, [r1, #8]
 80046ee:	4682      	mov	sl, r0
 80046f0:	429e      	cmp	r6, r3
 80046f2:	460c      	mov	r4, r1
 80046f4:	4690      	mov	r8, r2
 80046f6:	461f      	mov	r7, r3
 80046f8:	d838      	bhi.n	800476c <__ssputs_r+0x84>
 80046fa:	898a      	ldrh	r2, [r1, #12]
 80046fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004700:	d032      	beq.n	8004768 <__ssputs_r+0x80>
 8004702:	6825      	ldr	r5, [r4, #0]
 8004704:	6909      	ldr	r1, [r1, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	eba5 0901 	sub.w	r9, r5, r1
 800470c:	6965      	ldr	r5, [r4, #20]
 800470e:	444b      	add	r3, r9
 8004710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004718:	106d      	asrs	r5, r5, #1
 800471a:	429d      	cmp	r5, r3
 800471c:	bf38      	it	cc
 800471e:	461d      	movcc	r5, r3
 8004720:	0553      	lsls	r3, r2, #21
 8004722:	d531      	bpl.n	8004788 <__ssputs_r+0xa0>
 8004724:	4629      	mov	r1, r5
 8004726:	f000 fb53 	bl	8004dd0 <_malloc_r>
 800472a:	4606      	mov	r6, r0
 800472c:	b950      	cbnz	r0, 8004744 <__ssputs_r+0x5c>
 800472e:	230c      	movs	r3, #12
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	f8ca 3000 	str.w	r3, [sl]
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004744:	464a      	mov	r2, r9
 8004746:	6921      	ldr	r1, [r4, #16]
 8004748:	f000 face 	bl	8004ce8 <memcpy>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	6126      	str	r6, [r4, #16]
 800475a:	444e      	add	r6, r9
 800475c:	6026      	str	r6, [r4, #0]
 800475e:	463e      	mov	r6, r7
 8004760:	6165      	str	r5, [r4, #20]
 8004762:	eba5 0509 	sub.w	r5, r5, r9
 8004766:	60a5      	str	r5, [r4, #8]
 8004768:	42be      	cmp	r6, r7
 800476a:	d900      	bls.n	800476e <__ssputs_r+0x86>
 800476c:	463e      	mov	r6, r7
 800476e:	4632      	mov	r2, r6
 8004770:	4641      	mov	r1, r8
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	f000 fac6 	bl	8004d04 <memmove>
 8004778:	68a3      	ldr	r3, [r4, #8]
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	4432      	add	r2, r6
 8004780:	2000      	movs	r0, #0
 8004782:	60a3      	str	r3, [r4, #8]
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	e7db      	b.n	8004740 <__ssputs_r+0x58>
 8004788:	462a      	mov	r2, r5
 800478a:	f000 fb7b 	bl	8004e84 <_realloc_r>
 800478e:	4606      	mov	r6, r0
 8004790:	2800      	cmp	r0, #0
 8004792:	d1e1      	bne.n	8004758 <__ssputs_r+0x70>
 8004794:	4650      	mov	r0, sl
 8004796:	6921      	ldr	r1, [r4, #16]
 8004798:	f000 face 	bl	8004d38 <_free_r>
 800479c:	e7c7      	b.n	800472e <__ssputs_r+0x46>
	...

080047a0 <_svfiprintf_r>:
 80047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a4:	4698      	mov	r8, r3
 80047a6:	898b      	ldrh	r3, [r1, #12]
 80047a8:	4607      	mov	r7, r0
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	460d      	mov	r5, r1
 80047ae:	4614      	mov	r4, r2
 80047b0:	b09d      	sub	sp, #116	; 0x74
 80047b2:	d50e      	bpl.n	80047d2 <_svfiprintf_r+0x32>
 80047b4:	690b      	ldr	r3, [r1, #16]
 80047b6:	b963      	cbnz	r3, 80047d2 <_svfiprintf_r+0x32>
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	f000 fb09 	bl	8004dd0 <_malloc_r>
 80047be:	6028      	str	r0, [r5, #0]
 80047c0:	6128      	str	r0, [r5, #16]
 80047c2:	b920      	cbnz	r0, 80047ce <_svfiprintf_r+0x2e>
 80047c4:	230c      	movs	r3, #12
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	e0d1      	b.n	8004972 <_svfiprintf_r+0x1d2>
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	616b      	str	r3, [r5, #20]
 80047d2:	2300      	movs	r3, #0
 80047d4:	9309      	str	r3, [sp, #36]	; 0x24
 80047d6:	2320      	movs	r3, #32
 80047d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047dc:	2330      	movs	r3, #48	; 0x30
 80047de:	f04f 0901 	mov.w	r9, #1
 80047e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800498c <_svfiprintf_r+0x1ec>
 80047ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047ee:	4623      	mov	r3, r4
 80047f0:	469a      	mov	sl, r3
 80047f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047f6:	b10a      	cbz	r2, 80047fc <_svfiprintf_r+0x5c>
 80047f8:	2a25      	cmp	r2, #37	; 0x25
 80047fa:	d1f9      	bne.n	80047f0 <_svfiprintf_r+0x50>
 80047fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004800:	d00b      	beq.n	800481a <_svfiprintf_r+0x7a>
 8004802:	465b      	mov	r3, fp
 8004804:	4622      	mov	r2, r4
 8004806:	4629      	mov	r1, r5
 8004808:	4638      	mov	r0, r7
 800480a:	f7ff ff6d 	bl	80046e8 <__ssputs_r>
 800480e:	3001      	adds	r0, #1
 8004810:	f000 80aa 	beq.w	8004968 <_svfiprintf_r+0x1c8>
 8004814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004816:	445a      	add	r2, fp
 8004818:	9209      	str	r2, [sp, #36]	; 0x24
 800481a:	f89a 3000 	ldrb.w	r3, [sl]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80a2 	beq.w	8004968 <_svfiprintf_r+0x1c8>
 8004824:	2300      	movs	r3, #0
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800482e:	f10a 0a01 	add.w	sl, sl, #1
 8004832:	9304      	str	r3, [sp, #16]
 8004834:	9307      	str	r3, [sp, #28]
 8004836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800483a:	931a      	str	r3, [sp, #104]	; 0x68
 800483c:	4654      	mov	r4, sl
 800483e:	2205      	movs	r2, #5
 8004840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004844:	4851      	ldr	r0, [pc, #324]	; (800498c <_svfiprintf_r+0x1ec>)
 8004846:	f000 fa41 	bl	8004ccc <memchr>
 800484a:	9a04      	ldr	r2, [sp, #16]
 800484c:	b9d8      	cbnz	r0, 8004886 <_svfiprintf_r+0xe6>
 800484e:	06d0      	lsls	r0, r2, #27
 8004850:	bf44      	itt	mi
 8004852:	2320      	movmi	r3, #32
 8004854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004858:	0711      	lsls	r1, r2, #28
 800485a:	bf44      	itt	mi
 800485c:	232b      	movmi	r3, #43	; 0x2b
 800485e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004862:	f89a 3000 	ldrb.w	r3, [sl]
 8004866:	2b2a      	cmp	r3, #42	; 0x2a
 8004868:	d015      	beq.n	8004896 <_svfiprintf_r+0xf6>
 800486a:	4654      	mov	r4, sl
 800486c:	2000      	movs	r0, #0
 800486e:	f04f 0c0a 	mov.w	ip, #10
 8004872:	9a07      	ldr	r2, [sp, #28]
 8004874:	4621      	mov	r1, r4
 8004876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800487a:	3b30      	subs	r3, #48	; 0x30
 800487c:	2b09      	cmp	r3, #9
 800487e:	d94e      	bls.n	800491e <_svfiprintf_r+0x17e>
 8004880:	b1b0      	cbz	r0, 80048b0 <_svfiprintf_r+0x110>
 8004882:	9207      	str	r2, [sp, #28]
 8004884:	e014      	b.n	80048b0 <_svfiprintf_r+0x110>
 8004886:	eba0 0308 	sub.w	r3, r0, r8
 800488a:	fa09 f303 	lsl.w	r3, r9, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	46a2      	mov	sl, r4
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	e7d2      	b.n	800483c <_svfiprintf_r+0x9c>
 8004896:	9b03      	ldr	r3, [sp, #12]
 8004898:	1d19      	adds	r1, r3, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	9103      	str	r1, [sp, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bfbb      	ittet	lt
 80048a2:	425b      	neglt	r3, r3
 80048a4:	f042 0202 	orrlt.w	r2, r2, #2
 80048a8:	9307      	strge	r3, [sp, #28]
 80048aa:	9307      	strlt	r3, [sp, #28]
 80048ac:	bfb8      	it	lt
 80048ae:	9204      	strlt	r2, [sp, #16]
 80048b0:	7823      	ldrb	r3, [r4, #0]
 80048b2:	2b2e      	cmp	r3, #46	; 0x2e
 80048b4:	d10c      	bne.n	80048d0 <_svfiprintf_r+0x130>
 80048b6:	7863      	ldrb	r3, [r4, #1]
 80048b8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ba:	d135      	bne.n	8004928 <_svfiprintf_r+0x188>
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	3402      	adds	r4, #2
 80048c0:	1d1a      	adds	r2, r3, #4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	9203      	str	r2, [sp, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800499c <_svfiprintf_r+0x1fc>
 80048d4:	2203      	movs	r2, #3
 80048d6:	4650      	mov	r0, sl
 80048d8:	7821      	ldrb	r1, [r4, #0]
 80048da:	f000 f9f7 	bl	8004ccc <memchr>
 80048de:	b140      	cbz	r0, 80048f2 <_svfiprintf_r+0x152>
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	eba0 000a 	sub.w	r0, r0, sl
 80048e6:	fa03 f000 	lsl.w	r0, r3, r0
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	3401      	adds	r4, #1
 80048ee:	4303      	orrs	r3, r0
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f6:	2206      	movs	r2, #6
 80048f8:	4825      	ldr	r0, [pc, #148]	; (8004990 <_svfiprintf_r+0x1f0>)
 80048fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048fe:	f000 f9e5 	bl	8004ccc <memchr>
 8004902:	2800      	cmp	r0, #0
 8004904:	d038      	beq.n	8004978 <_svfiprintf_r+0x1d8>
 8004906:	4b23      	ldr	r3, [pc, #140]	; (8004994 <_svfiprintf_r+0x1f4>)
 8004908:	bb1b      	cbnz	r3, 8004952 <_svfiprintf_r+0x1b2>
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	3307      	adds	r3, #7
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	3308      	adds	r3, #8
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004918:	4433      	add	r3, r6
 800491a:	9309      	str	r3, [sp, #36]	; 0x24
 800491c:	e767      	b.n	80047ee <_svfiprintf_r+0x4e>
 800491e:	460c      	mov	r4, r1
 8004920:	2001      	movs	r0, #1
 8004922:	fb0c 3202 	mla	r2, ip, r2, r3
 8004926:	e7a5      	b.n	8004874 <_svfiprintf_r+0xd4>
 8004928:	2300      	movs	r3, #0
 800492a:	f04f 0c0a 	mov.w	ip, #10
 800492e:	4619      	mov	r1, r3
 8004930:	3401      	adds	r4, #1
 8004932:	9305      	str	r3, [sp, #20]
 8004934:	4620      	mov	r0, r4
 8004936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493a:	3a30      	subs	r2, #48	; 0x30
 800493c:	2a09      	cmp	r2, #9
 800493e:	d903      	bls.n	8004948 <_svfiprintf_r+0x1a8>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0c5      	beq.n	80048d0 <_svfiprintf_r+0x130>
 8004944:	9105      	str	r1, [sp, #20]
 8004946:	e7c3      	b.n	80048d0 <_svfiprintf_r+0x130>
 8004948:	4604      	mov	r4, r0
 800494a:	2301      	movs	r3, #1
 800494c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004950:	e7f0      	b.n	8004934 <_svfiprintf_r+0x194>
 8004952:	ab03      	add	r3, sp, #12
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	462a      	mov	r2, r5
 8004958:	4638      	mov	r0, r7
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <_svfiprintf_r+0x1f8>)
 800495c:	a904      	add	r1, sp, #16
 800495e:	f3af 8000 	nop.w
 8004962:	1c42      	adds	r2, r0, #1
 8004964:	4606      	mov	r6, r0
 8004966:	d1d6      	bne.n	8004916 <_svfiprintf_r+0x176>
 8004968:	89ab      	ldrh	r3, [r5, #12]
 800496a:	065b      	lsls	r3, r3, #25
 800496c:	f53f af2c 	bmi.w	80047c8 <_svfiprintf_r+0x28>
 8004970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004972:	b01d      	add	sp, #116	; 0x74
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	ab03      	add	r3, sp, #12
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	462a      	mov	r2, r5
 800497e:	4638      	mov	r0, r7
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <_svfiprintf_r+0x1f8>)
 8004982:	a904      	add	r1, sp, #16
 8004984:	f000 f87c 	bl	8004a80 <_printf_i>
 8004988:	e7eb      	b.n	8004962 <_svfiprintf_r+0x1c2>
 800498a:	bf00      	nop
 800498c:	08004fb4 	.word	0x08004fb4
 8004990:	08004fbe 	.word	0x08004fbe
 8004994:	00000000 	.word	0x00000000
 8004998:	080046e9 	.word	0x080046e9
 800499c:	08004fba 	.word	0x08004fba

080049a0 <_printf_common>:
 80049a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	4616      	mov	r6, r2
 80049a6:	4699      	mov	r9, r3
 80049a8:	688a      	ldr	r2, [r1, #8]
 80049aa:	690b      	ldr	r3, [r1, #16]
 80049ac:	4607      	mov	r7, r0
 80049ae:	4293      	cmp	r3, r2
 80049b0:	bfb8      	it	lt
 80049b2:	4613      	movlt	r3, r2
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049ba:	460c      	mov	r4, r1
 80049bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049c0:	b10a      	cbz	r2, 80049c6 <_printf_common+0x26>
 80049c2:	3301      	adds	r3, #1
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	0699      	lsls	r1, r3, #26
 80049ca:	bf42      	ittt	mi
 80049cc:	6833      	ldrmi	r3, [r6, #0]
 80049ce:	3302      	addmi	r3, #2
 80049d0:	6033      	strmi	r3, [r6, #0]
 80049d2:	6825      	ldr	r5, [r4, #0]
 80049d4:	f015 0506 	ands.w	r5, r5, #6
 80049d8:	d106      	bne.n	80049e8 <_printf_common+0x48>
 80049da:	f104 0a19 	add.w	sl, r4, #25
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	6832      	ldr	r2, [r6, #0]
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dc28      	bgt.n	8004a3a <_printf_common+0x9a>
 80049e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ec:	1e13      	subs	r3, r2, #0
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	bf18      	it	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	0692      	lsls	r2, r2, #26
 80049f6:	d42d      	bmi.n	8004a54 <_printf_common+0xb4>
 80049f8:	4649      	mov	r1, r9
 80049fa:	4638      	mov	r0, r7
 80049fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a00:	47c0      	blx	r8
 8004a02:	3001      	adds	r0, #1
 8004a04:	d020      	beq.n	8004a48 <_printf_common+0xa8>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	68e5      	ldr	r5, [r4, #12]
 8004a0a:	f003 0306 	and.w	r3, r3, #6
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	bf18      	it	ne
 8004a12:	2500      	movne	r5, #0
 8004a14:	6832      	ldr	r2, [r6, #0]
 8004a16:	f04f 0600 	mov.w	r6, #0
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	bf08      	it	eq
 8004a1e:	1aad      	subeq	r5, r5, r2
 8004a20:	6922      	ldr	r2, [r4, #16]
 8004a22:	bf08      	it	eq
 8004a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfc4      	itt	gt
 8004a2c:	1a9b      	subgt	r3, r3, r2
 8004a2e:	18ed      	addgt	r5, r5, r3
 8004a30:	341a      	adds	r4, #26
 8004a32:	42b5      	cmp	r5, r6
 8004a34:	d11a      	bne.n	8004a6c <_printf_common+0xcc>
 8004a36:	2000      	movs	r0, #0
 8004a38:	e008      	b.n	8004a4c <_printf_common+0xac>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4638      	mov	r0, r7
 8004a42:	47c0      	blx	r8
 8004a44:	3001      	adds	r0, #1
 8004a46:	d103      	bne.n	8004a50 <_printf_common+0xb0>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	3501      	adds	r5, #1
 8004a52:	e7c4      	b.n	80049de <_printf_common+0x3e>
 8004a54:	2030      	movs	r0, #48	; 0x30
 8004a56:	18e1      	adds	r1, r4, r3
 8004a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a62:	4422      	add	r2, r4
 8004a64:	3302      	adds	r3, #2
 8004a66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a6a:	e7c5      	b.n	80049f8 <_printf_common+0x58>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4649      	mov	r1, r9
 8004a72:	4638      	mov	r0, r7
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d0e6      	beq.n	8004a48 <_printf_common+0xa8>
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	e7d9      	b.n	8004a32 <_printf_common+0x92>
	...

08004a80 <_printf_i>:
 8004a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	460c      	mov	r4, r1
 8004a86:	7e27      	ldrb	r7, [r4, #24]
 8004a88:	4691      	mov	r9, r2
 8004a8a:	2f78      	cmp	r7, #120	; 0x78
 8004a8c:	4680      	mov	r8, r0
 8004a8e:	469a      	mov	sl, r3
 8004a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a96:	d807      	bhi.n	8004aa8 <_printf_i+0x28>
 8004a98:	2f62      	cmp	r7, #98	; 0x62
 8004a9a:	d80a      	bhi.n	8004ab2 <_printf_i+0x32>
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	f000 80d9 	beq.w	8004c54 <_printf_i+0x1d4>
 8004aa2:	2f58      	cmp	r7, #88	; 0x58
 8004aa4:	f000 80a4 	beq.w	8004bf0 <_printf_i+0x170>
 8004aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ab0:	e03a      	b.n	8004b28 <_printf_i+0xa8>
 8004ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ab6:	2b15      	cmp	r3, #21
 8004ab8:	d8f6      	bhi.n	8004aa8 <_printf_i+0x28>
 8004aba:	a001      	add	r0, pc, #4	; (adr r0, 8004ac0 <_printf_i+0x40>)
 8004abc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004aa9 	.word	0x08004aa9
 8004acc:	08004aa9 	.word	0x08004aa9
 8004ad0:	08004aa9 	.word	0x08004aa9
 8004ad4:	08004aa9 	.word	0x08004aa9
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004aa9 	.word	0x08004aa9
 8004ae0:	08004aa9 	.word	0x08004aa9
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004c3b 	.word	0x08004c3b
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004c1d 	.word	0x08004c1d
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004aa9 	.word	0x08004aa9
 8004b00:	08004c5d 	.word	0x08004c5d
 8004b04:	08004aa9 	.word	0x08004aa9
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004aa9 	.word	0x08004aa9
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004c25 	.word	0x08004c25
 8004b18:	680b      	ldr	r3, [r1, #0]
 8004b1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	600a      	str	r2, [r1, #0]
 8004b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0a4      	b.n	8004c76 <_printf_i+0x1f6>
 8004b2c:	6825      	ldr	r5, [r4, #0]
 8004b2e:	6808      	ldr	r0, [r1, #0]
 8004b30:	062e      	lsls	r6, r5, #24
 8004b32:	f100 0304 	add.w	r3, r0, #4
 8004b36:	d50a      	bpl.n	8004b4e <_printf_i+0xce>
 8004b38:	6805      	ldr	r5, [r0, #0]
 8004b3a:	600b      	str	r3, [r1, #0]
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	da03      	bge.n	8004b48 <_printf_i+0xc8>
 8004b40:	232d      	movs	r3, #45	; 0x2d
 8004b42:	426d      	negs	r5, r5
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	230a      	movs	r3, #10
 8004b4a:	485e      	ldr	r0, [pc, #376]	; (8004cc4 <_printf_i+0x244>)
 8004b4c:	e019      	b.n	8004b82 <_printf_i+0x102>
 8004b4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b52:	6805      	ldr	r5, [r0, #0]
 8004b54:	600b      	str	r3, [r1, #0]
 8004b56:	bf18      	it	ne
 8004b58:	b22d      	sxthne	r5, r5
 8004b5a:	e7ef      	b.n	8004b3c <_printf_i+0xbc>
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	1d18      	adds	r0, r3, #4
 8004b62:	6008      	str	r0, [r1, #0]
 8004b64:	0628      	lsls	r0, r5, #24
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0xec>
 8004b68:	681d      	ldr	r5, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <_printf_i+0xf2>
 8004b6c:	0669      	lsls	r1, r5, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0xe8>
 8004b70:	881d      	ldrh	r5, [r3, #0]
 8004b72:	2f6f      	cmp	r7, #111	; 0x6f
 8004b74:	bf0c      	ite	eq
 8004b76:	2308      	moveq	r3, #8
 8004b78:	230a      	movne	r3, #10
 8004b7a:	4852      	ldr	r0, [pc, #328]	; (8004cc4 <_printf_i+0x244>)
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b82:	6866      	ldr	r6, [r4, #4]
 8004b84:	2e00      	cmp	r6, #0
 8004b86:	bfa8      	it	ge
 8004b88:	6821      	ldrge	r1, [r4, #0]
 8004b8a:	60a6      	str	r6, [r4, #8]
 8004b8c:	bfa4      	itt	ge
 8004b8e:	f021 0104 	bicge.w	r1, r1, #4
 8004b92:	6021      	strge	r1, [r4, #0]
 8004b94:	b90d      	cbnz	r5, 8004b9a <_printf_i+0x11a>
 8004b96:	2e00      	cmp	r6, #0
 8004b98:	d04d      	beq.n	8004c36 <_printf_i+0x1b6>
 8004b9a:	4616      	mov	r6, r2
 8004b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ba4:	5dc7      	ldrb	r7, [r0, r7]
 8004ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004baa:	462f      	mov	r7, r5
 8004bac:	42bb      	cmp	r3, r7
 8004bae:	460d      	mov	r5, r1
 8004bb0:	d9f4      	bls.n	8004b9c <_printf_i+0x11c>
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d10b      	bne.n	8004bce <_printf_i+0x14e>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	07df      	lsls	r7, r3, #31
 8004bba:	d508      	bpl.n	8004bce <_printf_i+0x14e>
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	6861      	ldr	r1, [r4, #4]
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	bfde      	ittt	le
 8004bc4:	2330      	movle	r3, #48	; 0x30
 8004bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bce:	1b92      	subs	r2, r2, r6
 8004bd0:	6122      	str	r2, [r4, #16]
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f8cd a000 	str.w	sl, [sp]
 8004bdc:	aa03      	add	r2, sp, #12
 8004bde:	f7ff fedf 	bl	80049a0 <_printf_common>
 8004be2:	3001      	adds	r0, #1
 8004be4:	d14c      	bne.n	8004c80 <_printf_i+0x200>
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	b004      	add	sp, #16
 8004bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf0:	4834      	ldr	r0, [pc, #208]	; (8004cc4 <_printf_i+0x244>)
 8004bf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bf6:	680e      	ldr	r6, [r1, #0]
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bfe:	061f      	lsls	r7, r3, #24
 8004c00:	600e      	str	r6, [r1, #0]
 8004c02:	d514      	bpl.n	8004c2e <_printf_i+0x1ae>
 8004c04:	07d9      	lsls	r1, r3, #31
 8004c06:	bf44      	itt	mi
 8004c08:	f043 0320 	orrmi.w	r3, r3, #32
 8004c0c:	6023      	strmi	r3, [r4, #0]
 8004c0e:	b91d      	cbnz	r5, 8004c18 <_printf_i+0x198>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	f023 0320 	bic.w	r3, r3, #32
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	2310      	movs	r3, #16
 8004c1a:	e7af      	b.n	8004b7c <_printf_i+0xfc>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	f043 0320 	orr.w	r3, r3, #32
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	2378      	movs	r3, #120	; 0x78
 8004c26:	4828      	ldr	r0, [pc, #160]	; (8004cc8 <_printf_i+0x248>)
 8004c28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c2c:	e7e3      	b.n	8004bf6 <_printf_i+0x176>
 8004c2e:	065e      	lsls	r6, r3, #25
 8004c30:	bf48      	it	mi
 8004c32:	b2ad      	uxthmi	r5, r5
 8004c34:	e7e6      	b.n	8004c04 <_printf_i+0x184>
 8004c36:	4616      	mov	r6, r2
 8004c38:	e7bb      	b.n	8004bb2 <_printf_i+0x132>
 8004c3a:	680b      	ldr	r3, [r1, #0]
 8004c3c:	6826      	ldr	r6, [r4, #0]
 8004c3e:	1d1d      	adds	r5, r3, #4
 8004c40:	6960      	ldr	r0, [r4, #20]
 8004c42:	600d      	str	r5, [r1, #0]
 8004c44:	0635      	lsls	r5, r6, #24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	d501      	bpl.n	8004c4e <_printf_i+0x1ce>
 8004c4a:	6018      	str	r0, [r3, #0]
 8004c4c:	e002      	b.n	8004c54 <_printf_i+0x1d4>
 8004c4e:	0671      	lsls	r1, r6, #25
 8004c50:	d5fb      	bpl.n	8004c4a <_printf_i+0x1ca>
 8004c52:	8018      	strh	r0, [r3, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	4616      	mov	r6, r2
 8004c58:	6123      	str	r3, [r4, #16]
 8004c5a:	e7ba      	b.n	8004bd2 <_printf_i+0x152>
 8004c5c:	680b      	ldr	r3, [r1, #0]
 8004c5e:	1d1a      	adds	r2, r3, #4
 8004c60:	600a      	str	r2, [r1, #0]
 8004c62:	681e      	ldr	r6, [r3, #0]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4630      	mov	r0, r6
 8004c68:	6862      	ldr	r2, [r4, #4]
 8004c6a:	f000 f82f 	bl	8004ccc <memchr>
 8004c6e:	b108      	cbz	r0, 8004c74 <_printf_i+0x1f4>
 8004c70:	1b80      	subs	r0, r0, r6
 8004c72:	6060      	str	r0, [r4, #4]
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	6123      	str	r3, [r4, #16]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7e:	e7a8      	b.n	8004bd2 <_printf_i+0x152>
 8004c80:	4632      	mov	r2, r6
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	47d0      	blx	sl
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d0ab      	beq.n	8004be6 <_printf_i+0x166>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	079b      	lsls	r3, r3, #30
 8004c92:	d413      	bmi.n	8004cbc <_printf_i+0x23c>
 8004c94:	68e0      	ldr	r0, [r4, #12]
 8004c96:	9b03      	ldr	r3, [sp, #12]
 8004c98:	4298      	cmp	r0, r3
 8004c9a:	bfb8      	it	lt
 8004c9c:	4618      	movlt	r0, r3
 8004c9e:	e7a4      	b.n	8004bea <_printf_i+0x16a>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4632      	mov	r2, r6
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	47d0      	blx	sl
 8004caa:	3001      	adds	r0, #1
 8004cac:	d09b      	beq.n	8004be6 <_printf_i+0x166>
 8004cae:	3501      	adds	r5, #1
 8004cb0:	68e3      	ldr	r3, [r4, #12]
 8004cb2:	9903      	ldr	r1, [sp, #12]
 8004cb4:	1a5b      	subs	r3, r3, r1
 8004cb6:	42ab      	cmp	r3, r5
 8004cb8:	dcf2      	bgt.n	8004ca0 <_printf_i+0x220>
 8004cba:	e7eb      	b.n	8004c94 <_printf_i+0x214>
 8004cbc:	2500      	movs	r5, #0
 8004cbe:	f104 0619 	add.w	r6, r4, #25
 8004cc2:	e7f5      	b.n	8004cb0 <_printf_i+0x230>
 8004cc4:	08004fc5 	.word	0x08004fc5
 8004cc8:	08004fd6 	.word	0x08004fd6

08004ccc <memchr>:
 8004ccc:	4603      	mov	r3, r0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	b2c9      	uxtb	r1, r1
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	d101      	bne.n	8004cde <memchr+0x12>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e003      	b.n	8004ce6 <memchr+0x1a>
 8004cde:	7804      	ldrb	r4, [r0, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	428c      	cmp	r4, r1
 8004ce4:	d1f6      	bne.n	8004cd4 <memchr+0x8>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <memmove>:
 8004d04:	4288      	cmp	r0, r1
 8004d06:	b510      	push	{r4, lr}
 8004d08:	eb01 0402 	add.w	r4, r1, r2
 8004d0c:	d902      	bls.n	8004d14 <memmove+0x10>
 8004d0e:	4284      	cmp	r4, r0
 8004d10:	4623      	mov	r3, r4
 8004d12:	d807      	bhi.n	8004d24 <memmove+0x20>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	42a1      	cmp	r1, r4
 8004d18:	d008      	beq.n	8004d2c <memmove+0x28>
 8004d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d22:	e7f8      	b.n	8004d16 <memmove+0x12>
 8004d24:	4601      	mov	r1, r0
 8004d26:	4402      	add	r2, r0
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d100      	bne.n	8004d2e <memmove+0x2a>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d36:	e7f7      	b.n	8004d28 <memmove+0x24>

08004d38 <_free_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4605      	mov	r5, r0
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d043      	beq.n	8004dc8 <_free_r+0x90>
 8004d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d44:	1f0c      	subs	r4, r1, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bfb8      	it	lt
 8004d4a:	18e4      	addlt	r4, r4, r3
 8004d4c:	f000 f8d0 	bl	8004ef0 <__malloc_lock>
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <_free_r+0x94>)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	4610      	mov	r0, r2
 8004d56:	b933      	cbnz	r3, 8004d66 <_free_r+0x2e>
 8004d58:	6063      	str	r3, [r4, #4]
 8004d5a:	6014      	str	r4, [r2, #0]
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d62:	f000 b8cb 	b.w	8004efc <__malloc_unlock>
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	d90a      	bls.n	8004d80 <_free_r+0x48>
 8004d6a:	6821      	ldr	r1, [r4, #0]
 8004d6c:	1862      	adds	r2, r4, r1
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	bf01      	itttt	eq
 8004d72:	681a      	ldreq	r2, [r3, #0]
 8004d74:	685b      	ldreq	r3, [r3, #4]
 8004d76:	1852      	addeq	r2, r2, r1
 8004d78:	6022      	streq	r2, [r4, #0]
 8004d7a:	6063      	str	r3, [r4, #4]
 8004d7c:	6004      	str	r4, [r0, #0]
 8004d7e:	e7ed      	b.n	8004d5c <_free_r+0x24>
 8004d80:	461a      	mov	r2, r3
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	b10b      	cbz	r3, 8004d8a <_free_r+0x52>
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	d9fa      	bls.n	8004d80 <_free_r+0x48>
 8004d8a:	6811      	ldr	r1, [r2, #0]
 8004d8c:	1850      	adds	r0, r2, r1
 8004d8e:	42a0      	cmp	r0, r4
 8004d90:	d10b      	bne.n	8004daa <_free_r+0x72>
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	4401      	add	r1, r0
 8004d96:	1850      	adds	r0, r2, r1
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	6011      	str	r1, [r2, #0]
 8004d9c:	d1de      	bne.n	8004d5c <_free_r+0x24>
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4401      	add	r1, r0
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	6053      	str	r3, [r2, #4]
 8004da8:	e7d8      	b.n	8004d5c <_free_r+0x24>
 8004daa:	d902      	bls.n	8004db2 <_free_r+0x7a>
 8004dac:	230c      	movs	r3, #12
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	e7d4      	b.n	8004d5c <_free_r+0x24>
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	1821      	adds	r1, r4, r0
 8004db6:	428b      	cmp	r3, r1
 8004db8:	bf01      	itttt	eq
 8004dba:	6819      	ldreq	r1, [r3, #0]
 8004dbc:	685b      	ldreq	r3, [r3, #4]
 8004dbe:	1809      	addeq	r1, r1, r0
 8004dc0:	6021      	streq	r1, [r4, #0]
 8004dc2:	6063      	str	r3, [r4, #4]
 8004dc4:	6054      	str	r4, [r2, #4]
 8004dc6:	e7c9      	b.n	8004d5c <_free_r+0x24>
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000154 	.word	0x20000154

08004dd0 <_malloc_r>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	1ccd      	adds	r5, r1, #3
 8004dd4:	f025 0503 	bic.w	r5, r5, #3
 8004dd8:	3508      	adds	r5, #8
 8004dda:	2d0c      	cmp	r5, #12
 8004ddc:	bf38      	it	cc
 8004dde:	250c      	movcc	r5, #12
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	4606      	mov	r6, r0
 8004de4:	db01      	blt.n	8004dea <_malloc_r+0x1a>
 8004de6:	42a9      	cmp	r1, r5
 8004de8:	d903      	bls.n	8004df2 <_malloc_r+0x22>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df2:	f000 f87d 	bl	8004ef0 <__malloc_lock>
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <_malloc_r+0xac>)
 8004df8:	680a      	ldr	r2, [r1, #0]
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	b99c      	cbnz	r4, 8004e26 <_malloc_r+0x56>
 8004dfe:	4f20      	ldr	r7, [pc, #128]	; (8004e80 <_malloc_r+0xb0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	b923      	cbnz	r3, 8004e0e <_malloc_r+0x3e>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f862 	bl	8004ed0 <_sbrk_r>
 8004e0c:	6038      	str	r0, [r7, #0]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f85d 	bl	8004ed0 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d123      	bne.n	8004e62 <_malloc_r+0x92>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	f000 f86c 	bl	8004efc <__malloc_unlock>
 8004e24:	e7e3      	b.n	8004dee <_malloc_r+0x1e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1b5b      	subs	r3, r3, r5
 8004e2a:	d417      	bmi.n	8004e5c <_malloc_r+0x8c>
 8004e2c:	2b0b      	cmp	r3, #11
 8004e2e:	d903      	bls.n	8004e38 <_malloc_r+0x68>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	441c      	add	r4, r3
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e004      	b.n	8004e42 <_malloc_r+0x72>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	bf0c      	ite	eq
 8004e3e:	600b      	streq	r3, [r1, #0]
 8004e40:	6053      	strne	r3, [r2, #4]
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 f85a 	bl	8004efc <__malloc_unlock>
 8004e48:	f104 000b 	add.w	r0, r4, #11
 8004e4c:	1d23      	adds	r3, r4, #4
 8004e4e:	f020 0007 	bic.w	r0, r0, #7
 8004e52:	1ac2      	subs	r2, r0, r3
 8004e54:	d0cc      	beq.n	8004df0 <_malloc_r+0x20>
 8004e56:	1a1b      	subs	r3, r3, r0
 8004e58:	50a3      	str	r3, [r4, r2]
 8004e5a:	e7c9      	b.n	8004df0 <_malloc_r+0x20>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	6864      	ldr	r4, [r4, #4]
 8004e60:	e7cc      	b.n	8004dfc <_malloc_r+0x2c>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d0e3      	beq.n	8004e34 <_malloc_r+0x64>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f82e 	bl	8004ed0 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1dd      	bne.n	8004e34 <_malloc_r+0x64>
 8004e78:	e7cf      	b.n	8004e1a <_malloc_r+0x4a>
 8004e7a:	bf00      	nop
 8004e7c:	20000154 	.word	0x20000154
 8004e80:	20000158 	.word	0x20000158

08004e84 <_realloc_r>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	4607      	mov	r7, r0
 8004e88:	4614      	mov	r4, r2
 8004e8a:	460e      	mov	r6, r1
 8004e8c:	b921      	cbnz	r1, 8004e98 <_realloc_r+0x14>
 8004e8e:	4611      	mov	r1, r2
 8004e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e94:	f7ff bf9c 	b.w	8004dd0 <_malloc_r>
 8004e98:	b922      	cbnz	r2, 8004ea4 <_realloc_r+0x20>
 8004e9a:	f7ff ff4d 	bl	8004d38 <_free_r>
 8004e9e:	4625      	mov	r5, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea4:	f000 f830 	bl	8004f08 <_malloc_usable_size_r>
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d20f      	bcs.n	8004ecc <_realloc_r+0x48>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f7ff ff8e 	bl	8004dd0 <_malloc_r>
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0f2      	beq.n	8004ea0 <_realloc_r+0x1c>
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	f7ff ff13 	bl	8004ce8 <memcpy>
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ff37 	bl	8004d38 <_free_r>
 8004eca:	e7e9      	b.n	8004ea0 <_realloc_r+0x1c>
 8004ecc:	4635      	mov	r5, r6
 8004ece:	e7e7      	b.n	8004ea0 <_realloc_r+0x1c>

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4d05      	ldr	r5, [pc, #20]	; (8004eec <_sbrk_r+0x1c>)
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc ff2c 	bl	8001d38 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	2000049c 	.word	0x2000049c

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f000 b811 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	200004a4 	.word	0x200004a4

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f000 b80c 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	200004a4 	.word	0x200004a4

08004f08 <_malloc_usable_size_r>:
 8004f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0c:	1f18      	subs	r0, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bfbc      	itt	lt
 8004f12:	580b      	ldrlt	r3, [r1, r0]
 8004f14:	18c0      	addlt	r0, r0, r3
 8004f16:	4770      	bx	lr

08004f18 <__retarget_lock_acquire_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <__retarget_lock_release_recursive>:
 8004f1a:	4770      	bx	lr

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
