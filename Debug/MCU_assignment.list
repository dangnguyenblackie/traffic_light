
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000511c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052fc  080052fc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080052fc  080052fc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052fc  080052fc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000094  08005398  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005398  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165b1  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  0003666e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00039500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198de  00000000  00000000  0003b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b20  00000000  00000000  0005491e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3e1  00000000  00000000  0006643e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f181f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000f1874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08005210 	.word	0x08005210

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08005210 	.word	0x08005210

0800014c <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
	switch(index){
	case 0:
		return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f002 fb60 	bl	8002838 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
	case 1:
		return HAL_GPIO_ReadPin(A1_MAN_GPIO_Port,A1_MAN_Pin);
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f002 fb5a 	bl	8002838 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
	case 2:
		return HAL_GPIO_ReadPin(A2_TUNING_GPIO_Port,A2_TUNING_Pin);
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f002 fb54 	bl	8002838 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
	case 3:
		return HAL_GPIO_ReadPin(A3_SET_GPIO_Port, A3_SET_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f002 fb4e 	bl	8002838 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 80001a0:	2301      	movs	r3, #1
	}
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess1+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	200000bc 	.word	0x200000bc

080001d4 <subKeyProcess2>:

void subKeyProcess2(int index){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <subKeyProcess2+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2101      	movs	r1, #1
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	200000cc 	.word	0x200000cc

080001f4 <getKeyInput>:

void getKeyInput(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e071      	b.n	80002e4 <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <getKeyInput+0x100>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <getKeyInput+0x104>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ff91 	bl	800014c <iKeyInput>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0x100>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	440b      	add	r3, r1
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <getKeyInput+0x108>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4927      	ldr	r1, [pc, #156]	; (80002f4 <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x10c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4923      	ldr	r1, [pc, #140]	; (80002f8 <getKeyInput+0x104>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	440b      	add	r3, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d017      	beq.n	80002a4 <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d125      	bne.n	80002de <getKeyInput+0xea>
					subKeyProcess1(i);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f7ff ff8e 	bl	80001b4 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x110>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a2:	e01c      	b.n	80002de <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0x110>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4915      	ldr	r1, [pc, #84]	; (8000304 <getKeyInput+0x110>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x110>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc0d      	bgt.n	80002de <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x104>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0xe0>
						subKeyProcess2(i);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff80 	bl	80001d4 <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <getKeyInput+0x110>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd8a      	ble.n	8000200 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	200000b8 	.word	0x200000b8
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d901      	bls.n	800031c <is_button_pressed+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e00d      	b.n	8000338 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <is_button_pressed+0x3c>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d106      	bne.n	8000336 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <is_button_pressed+0x3c>)
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed+0x30>
		}
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000bc 	.word	0x200000bc

08000348 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d901      	bls.n	800035c <is_button_pressed_1s+0x14>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	e00d      	b.n	8000378 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <is_button_pressed_1s+0x3c>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <is_button_pressed_1s+0x3c>)
 800036c:	2100      	movs	r1, #0
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000376:	2300      	movs	r3, #0
	}
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	200000cc 	.word	0x200000cc

08000388 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch(status){
 800038c:	4bc3      	ldr	r3, [pc, #780]	; (800069c <fsm_automatic_run+0x314>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b0c      	cmp	r3, #12
 8000392:	dc21      	bgt.n	80003d8 <fsm_automatic_run+0x50>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f340 8176 	ble.w	8000686 <fsm_automatic_run+0x2fe>
 800039a:	3b01      	subs	r3, #1
 800039c:	2b0b      	cmp	r3, #11
 800039e:	f200 8172 	bhi.w	8000686 <fsm_automatic_run+0x2fe>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <fsm_automatic_run+0x20>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	08000407 	.word	0x08000407
 80003ac:	0800049b 	.word	0x0800049b
 80003b0:	08000687 	.word	0x08000687
 80003b4:	08000687 	.word	0x08000687
 80003b8:	08000687 	.word	0x08000687
 80003bc:	08000687 	.word	0x08000687
 80003c0:	08000687 	.word	0x08000687
 80003c4:	08000687 	.word	0x08000687
 80003c8:	08000687 	.word	0x08000687
 80003cc:	08000687 	.word	0x08000687
 80003d0:	08000541 	.word	0x08000541
 80003d4:	080005db 	.word	0x080005db
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	f040 8154 	bne.w	8000686 <fsm_automatic_run+0x2fe>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80003de:	2003      	movs	r0, #3
 80003e0:	f000 fd98 	bl	8000f14 <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80003e4:	4bae      	ldr	r3, [pc, #696]	; (80006a0 <fsm_automatic_run+0x318>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fb91 	bl	8001b10 <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80003ee:	4bad      	ldr	r3, [pc, #692]	; (80006a4 <fsm_automatic_run+0x31c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fba8 	bl	8001b48 <setTimer4>
			setTimer2(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f001 fb6d 	bl	8001ad8 <setTimer2>
			status = AUTO_GREEN1;
 80003fe:	4ba7      	ldr	r3, [pc, #668]	; (800069c <fsm_automatic_run+0x314>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

			break;
 8000404:	e148      	b.n	8000698 <fsm_automatic_run+0x310>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fc8a 	bl	8000d20 <setRed>
			setGreen(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fd07 	bl	8000e20 <setGreen>

				// display value by UART
			sendingUART_RUN();
 8000412:	f000 ffbd 	bl	8001390 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff ff76 	bl	8000308 <is_button_pressed>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00d      	beq.n	800043e <fsm_automatic_run+0xb6>
				status_pedestrian = STOP_LIGHT;
 8000422:	4ba1      	ldr	r3, [pc, #644]	; (80006a8 <fsm_automatic_run+0x320>)
 8000424:	222d      	movs	r2, #45	; 0x2d
 8000426:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000428:	f644 6020 	movw	r0, #20000	; 0x4e20
 800042c:	f001 fb38 	bl	8001aa0 <setTimer1>

				buzzer_freq = BUZZER_FREQ_START;
 8000430:	4b9e      	ldr	r3, [pc, #632]	; (80006ac <fsm_automatic_run+0x324>)
 8000432:	2232      	movs	r2, #50	; 0x32
 8000434:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000436:	4b9e      	ldr	r3, [pc, #632]	; (80006b0 <fsm_automatic_run+0x328>)
 8000438:	f240 5214 	movw	r2, #1300	; 0x514
 800043c:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag){
 800043e:	4b9d      	ldr	r3, [pc, #628]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d007      	beq.n	8000456 <fsm_automatic_run+0xce>
				setTimer3(yellow_time);
 8000446:	4b9c      	ldr	r3, [pc, #624]	; (80006b8 <fsm_automatic_run+0x330>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fb60 	bl	8001b10 <setTimer3>
				status = AUTO_YELLOW1;
 8000450:	4b92      	ldr	r3, [pc, #584]	; (800069c <fsm_automatic_run+0x314>)
 8000452:	2202      	movs	r2, #2
 8000454:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff56 	bl	8000308 <is_button_pressed>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d009      	beq.n	8000476 <fsm_automatic_run+0xee>
				status = MAN_GREEN1;
 8000462:	4b8e      	ldr	r3, [pc, #568]	; (800069c <fsm_automatic_run+0x314>)
 8000464:	2215      	movs	r2, #21
 8000466:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000468:	f242 7010 	movw	r0, #10000	; 0x2710
 800046c:	f001 fbdc 	bl	8001c28 <setTimer8>
				setTimer2(10);
 8000470:	200a      	movs	r0, #10
 8000472:	f001 fb31 	bl	8001ad8 <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff46 	bl	8000308 <is_button_pressed>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	f000 8103 	beq.w	800068a <fsm_automatic_run+0x302>
				status = TUNING_RED;
 8000484:	4b85      	ldr	r3, [pc, #532]	; (800069c <fsm_automatic_run+0x314>)
 8000486:	221f      	movs	r2, #31
 8000488:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 800048a:	f242 7010 	movw	r0, #10000	; 0x2710
 800048e:	f001 fbcb 	bl	8001c28 <setTimer8>
				setTimer9(10);
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fbe4 	bl	8001c60 <setTimer9>
			}


			break;
 8000498:	e0f7      	b.n	800068a <fsm_automatic_run+0x302>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 800049a:	2001      	movs	r0, #1
 800049c:	f000 fc40 	bl	8000d20 <setRed>
			setYellow(0);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fc7d 	bl	8000da0 <setYellow>

				// display value by UART
			sendingUART_RUN();
 80004a6:	f000 ff73 	bl	8001390 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ff2c 	bl	8000308 <is_button_pressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00d      	beq.n	80004d2 <fsm_automatic_run+0x14a>
				status_pedestrian =	STOP_LIGHT;
 80004b6:	4b7c      	ldr	r3, [pc, #496]	; (80006a8 <fsm_automatic_run+0x320>)
 80004b8:	222d      	movs	r2, #45	; 0x2d
 80004ba:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80004bc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80004c0:	f001 faee 	bl	8001aa0 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80004c4:	4b79      	ldr	r3, [pc, #484]	; (80006ac <fsm_automatic_run+0x324>)
 80004c6:	2232      	movs	r2, #50	; 0x32
 80004c8:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80004ca:	4b79      	ldr	r3, [pc, #484]	; (80006b0 <fsm_automatic_run+0x328>)
 80004cc:	f240 5214 	movw	r2, #1300	; 0x514
 80004d0:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 80004d2:	4b78      	ldr	r3, [pc, #480]	; (80006b4 <fsm_automatic_run+0x32c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d010      	beq.n	80004fc <fsm_automatic_run+0x174>
 80004da:	4b78      	ldr	r3, [pc, #480]	; (80006bc <fsm_automatic_run+0x334>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00c      	beq.n	80004fc <fsm_automatic_run+0x174>
				setTimer3(red_time);
 80004e2:	4b77      	ldr	r3, [pc, #476]	; (80006c0 <fsm_automatic_run+0x338>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fb12 	bl	8001b10 <setTimer3>
				setTimer4(green_time_2);
 80004ec:	4b75      	ldr	r3, [pc, #468]	; (80006c4 <fsm_automatic_run+0x33c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fb29 	bl	8001b48 <setTimer4>
				status = AUTO_GREEN2;
 80004f6:	4b69      	ldr	r3, [pc, #420]	; (800069c <fsm_automatic_run+0x314>)
 80004f8:	220b      	movs	r2, #11
 80004fa:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff03 	bl	8000308 <is_button_pressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d009      	beq.n	800051c <fsm_automatic_run+0x194>
				status = MAN_YELLOW1;
 8000508:	4b64      	ldr	r3, [pc, #400]	; (800069c <fsm_automatic_run+0x314>)
 800050a:	2216      	movs	r2, #22
 800050c:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f001 fb89 	bl	8001c28 <setTimer8>
				setTimer2(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f001 fade 	bl	8001ad8 <setTimer2>
			}

			if (is_button_pressed(2)) {
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff fef3 	bl	8000308 <is_button_pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	f000 80b2 	beq.w	800068e <fsm_automatic_run+0x306>
				status = TUNING_RED;
 800052a:	4b5c      	ldr	r3, [pc, #368]	; (800069c <fsm_automatic_run+0x314>)
 800052c:	221f      	movs	r2, #31
 800052e:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000530:	f242 7010 	movw	r0, #10000	; 0x2710
 8000534:	f001 fb78 	bl	8001c28 <setTimer8>
				setTimer9(10);
 8000538:	200a      	movs	r0, #10
 800053a:	f001 fb91 	bl	8001c60 <setTimer9>
			}


			break;
 800053e:	e0a6      	b.n	800068e <fsm_automatic_run+0x306>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fbed 	bl	8000d20 <setRed>
			setGreen(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fc6a 	bl	8000e20 <setGreen>

				// display value by UART
			sendingUART_RUN();
 800054c:	f000 ff20 	bl	8001390 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fed9 	bl	8000308 <is_button_pressed>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d011      	beq.n	8000580 <fsm_automatic_run+0x1f8>
				setTimer5(BUZZER_CYCLE);
 800055c:	f240 5014 	movw	r0, #1300	; 0x514
 8000560:	f001 fb0e 	bl	8001b80 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000564:	4b50      	ldr	r3, [pc, #320]	; (80006a8 <fsm_automatic_run+0x320>)
 8000566:	222e      	movs	r2, #46	; 0x2e
 8000568:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 800056a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800056e:	f001 fa97 	bl	8001aa0 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <fsm_automatic_run+0x324>)
 8000574:	2232      	movs	r2, #50	; 0x32
 8000576:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000578:	4b4d      	ldr	r3, [pc, #308]	; (80006b0 <fsm_automatic_run+0x328>)
 800057a:	f240 5214 	movw	r2, #1300	; 0x514
 800057e:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <fsm_automatic_run+0x334>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d007      	beq.n	8000598 <fsm_automatic_run+0x210>
				setTimer4(yellow_time_2);
 8000588:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <fsm_automatic_run+0x340>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fadb 	bl	8001b48 <setTimer4>
				status = AUTO_YELLOW2;
 8000592:	4b42      	ldr	r3, [pc, #264]	; (800069c <fsm_automatic_run+0x314>)
 8000594:	220c      	movs	r2, #12
 8000596:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff feb5 	bl	8000308 <is_button_pressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d009      	beq.n	80005b8 <fsm_automatic_run+0x230>
				status = MAN_GREEN2;
 80005a4:	4b3d      	ldr	r3, [pc, #244]	; (800069c <fsm_automatic_run+0x314>)
 80005a6:	2217      	movs	r2, #23
 80005a8:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 80005aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ae:	f001 fb3b 	bl	8001c28 <setTimer8>
				setTimer2(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f001 fa90 	bl	8001ad8 <setTimer2>
			}

			if (is_button_pressed(2)) {
 80005b8:	2002      	movs	r0, #2
 80005ba:	f7ff fea5 	bl	8000308 <is_button_pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d066      	beq.n	8000692 <fsm_automatic_run+0x30a>
				status = TUNING_RED;
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <fsm_automatic_run+0x314>)
 80005c6:	221f      	movs	r2, #31
 80005c8:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 80005ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ce:	f001 fb2b 	bl	8001c28 <setTimer8>
				setTimer9(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f001 fb44 	bl	8001c60 <setTimer9>
			}



			break;
 80005d8:	e05b      	b.n	8000692 <fsm_automatic_run+0x30a>
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fba0 	bl	8000d20 <setRed>
			setYellow(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fbdd 	bl	8000da0 <setYellow>

				// display value by UART
			sendingUART_RUN();
 80005e6:	f000 fed3 	bl	8001390 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff fe8c 	bl	8000308 <is_button_pressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d011      	beq.n	800061a <fsm_automatic_run+0x292>
				setTimer5(BUZZER_CYCLE);
 80005f6:	f240 5014 	movw	r0, #1300	; 0x514
 80005fa:	f001 fac1 	bl	8001b80 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <fsm_automatic_run+0x320>)
 8000600:	222e      	movs	r2, #46	; 0x2e
 8000602:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000604:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000608:	f001 fa4a 	bl	8001aa0 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <fsm_automatic_run+0x324>)
 800060e:	2232      	movs	r2, #50	; 0x32
 8000610:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <fsm_automatic_run+0x328>)
 8000614:	f240 5214 	movw	r2, #1300	; 0x514
 8000618:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <fsm_automatic_run+0x334>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d010      	beq.n	8000644 <fsm_automatic_run+0x2bc>
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00c      	beq.n	8000644 <fsm_automatic_run+0x2bc>
				setTimer3(green_time);
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <fsm_automatic_run+0x318>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fa6e 	bl	8001b10 <setTimer3>
				setTimer4(red_time_2);
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <fsm_automatic_run+0x31c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa85 	bl	8001b48 <setTimer4>
				status = AUTO_GREEN1;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <fsm_automatic_run+0x314>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fe5f 	bl	8000308 <is_button_pressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <fsm_automatic_run+0x2dc>
				status = MAN_YELLOW2;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <fsm_automatic_run+0x314>)
 8000652:	2218      	movs	r2, #24
 8000654:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000656:	f242 7010 	movw	r0, #10000	; 0x2710
 800065a:	f001 fae5 	bl	8001c28 <setTimer8>
				setTimer2(10);
 800065e:	200a      	movs	r0, #10
 8000660:	f001 fa3a 	bl	8001ad8 <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff fe4f 	bl	8000308 <is_button_pressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d012      	beq.n	8000696 <fsm_automatic_run+0x30e>
				status = TUNING_RED;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <fsm_automatic_run+0x314>)
 8000672:	221f      	movs	r2, #31
 8000674:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000676:	f242 7010 	movw	r0, #10000	; 0x2710
 800067a:	f001 fad5 	bl	8001c28 <setTimer8>
				setTimer9(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f001 faee 	bl	8001c60 <setTimer9>
			}

			break;
 8000684:	e007      	b.n	8000696 <fsm_automatic_run+0x30e>
		default:
			break;
 8000686:	bf00      	nop
 8000688:	e006      	b.n	8000698 <fsm_automatic_run+0x310>
			break;
 800068a:	bf00      	nop
 800068c:	e004      	b.n	8000698 <fsm_automatic_run+0x310>
			break;
 800068e:	bf00      	nop
 8000690:	e002      	b.n	8000698 <fsm_automatic_run+0x310>
			break;
 8000692:	bf00      	nop
 8000694:	e000      	b.n	8000698 <fsm_automatic_run+0x310>
			break;
 8000696:	bf00      	nop
	}
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000004 	.word	0x20000004
 80006a0:	20000014 	.word	0x20000014
 80006a4:	20000018 	.word	0x20000018
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000114 	.word	0x20000114
 80006b0:	20000110 	.word	0x20000110
 80006b4:	20000128 	.word	0x20000128
 80006b8:	20000010 	.word	0x20000010
 80006bc:	20000130 	.word	0x20000130
 80006c0:	2000000c 	.word	0x2000000c
 80006c4:	20000020 	.word	0x20000020
 80006c8:	2000001c 	.word	0x2000001c

080006cc <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch(status){
 80006d0:	4ba5      	ldr	r3, [pc, #660]	; (8000968 <fsm_manual_run+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b15      	subs	r3, #21
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	f200 813a 	bhi.w	8000950 <fsm_manual_run+0x284>
 80006dc:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <fsm_manual_run+0x18>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	0800078d 	.word	0x0800078d
 80006ec:	08000825 	.word	0x08000825
 80006f0:	080008bb 	.word	0x080008bb
	case MAN_GREEN1:
		// TODO:
			// RED2 on, GREEN1 on
		setRed(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fb13 	bl	8000d20 <setRed>
		setGreen(0);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fb90 	bl	8000e20 <setGreen>

			// display value by UART
		sendingUART_RUN();
 8000700:	f000 fe46 	bl	8001390 <sendingUART_RUN>


			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fdff 	bl	8000308 <is_button_pressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00d      	beq.n	800072c <fsm_manual_run+0x60>
			status_pedestrian = STOP_LIGHT;
 8000710:	4b96      	ldr	r3, [pc, #600]	; (800096c <fsm_manual_run+0x2a0>)
 8000712:	222d      	movs	r2, #45	; 0x2d
 8000714:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 8000716:	f644 6020 	movw	r0, #20000	; 0x4e20
 800071a:	f001 f9c1 	bl	8001aa0 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 800071e:	4b94      	ldr	r3, [pc, #592]	; (8000970 <fsm_manual_run+0x2a4>)
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000724:	4b93      	ldr	r3, [pc, #588]	; (8000974 <fsm_manual_run+0x2a8>)
 8000726:	f240 5214 	movw	r2, #1300	; 0x514
 800072a:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fdeb 	bl	8000308 <is_button_pressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <fsm_manual_run+0x7a>
			setTimer8(MANUAL_TIME);
 8000738:	f242 7010 	movw	r0, #10000	; 0x2710
 800073c:	f001 fa74 	bl	8001c28 <setTimer8>
			status = MAN_YELLOW1;
 8000740:	4b89      	ldr	r3, [pc, #548]	; (8000968 <fsm_manual_run+0x29c>)
 8000742:	2216      	movs	r2, #22
 8000744:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000746:	4b8c      	ldr	r3, [pc, #560]	; (8000978 <fsm_manual_run+0x2ac>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00c      	beq.n	8000768 <fsm_manual_run+0x9c>
			status = AUTO_YELLOW1;
 800074e:	4b86      	ldr	r3, [pc, #536]	; (8000968 <fsm_manual_run+0x29c>)
 8000750:	2202      	movs	r2, #2
 8000752:	601a      	str	r2, [r3, #0]
			setTimer8(yellow_time);
 8000754:	4b89      	ldr	r3, [pc, #548]	; (800097c <fsm_manual_run+0x2b0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fa65 	bl	8001c28 <setTimer8>
			setTimer4(yellow_time);
 800075e:	4b87      	ldr	r3, [pc, #540]	; (800097c <fsm_manual_run+0x2b0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f9f0 	bl	8001b48 <setTimer4>
		}

		if (is_button_pressed(2)) {
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fdcd 	bl	8000308 <is_button_pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 80ef 	beq.w	8000954 <fsm_manual_run+0x288>
			status = TUNING_RED;
 8000776:	4b7c      	ldr	r3, [pc, #496]	; (8000968 <fsm_manual_run+0x29c>)
 8000778:	221f      	movs	r2, #31
 800077a:	601a      	str	r2, [r3, #0]
			setTimer8(TUNING_TIME);
 800077c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000780:	f001 fa52 	bl	8001c28 <setTimer8>
			setTimer9(10);
 8000784:	200a      	movs	r0, #10
 8000786:	f001 fa6b 	bl	8001c60 <setTimer9>
		}

		break;
 800078a:	e0e3      	b.n	8000954 <fsm_manual_run+0x288>
	case MAN_YELLOW1:
		// TODO:
			// RED2 still on, YELLOW1 on
		setRed(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f000 fac7 	bl	8000d20 <setRed>
		setYellow(0);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fb04 	bl	8000da0 <setYellow>

			// display value by UART
		sendingUART_RUN();
 8000798:	f000 fdfa 	bl	8001390 <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff fdb3 	bl	8000308 <is_button_pressed>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00d      	beq.n	80007c4 <fsm_manual_run+0xf8>
			status_pedestrian =	STOP_LIGHT;
 80007a8:	4b70      	ldr	r3, [pc, #448]	; (800096c <fsm_manual_run+0x2a0>)
 80007aa:	222d      	movs	r2, #45	; 0x2d
 80007ac:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80007ae:	f644 6020 	movw	r0, #20000	; 0x4e20
 80007b2:	f001 f975 	bl	8001aa0 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80007b6:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <fsm_manual_run+0x2a4>)
 80007b8:	2232      	movs	r2, #50	; 0x32
 80007ba:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80007bc:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <fsm_manual_run+0x2a8>)
 80007be:	f240 5214 	movw	r2, #1300	; 0x514
 80007c2:	601a      	str	r2, [r3, #0]
		}
		//SWITCH CASE
		if(is_button_pressed(1)){
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fd9f 	bl	8000308 <is_button_pressed>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <fsm_manual_run+0x112>
			setTimer8(MANUAL_TIME);
 80007d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007d4:	f001 fa28 	bl	8001c28 <setTimer8>
			status = MAN_GREEN2;
 80007d8:	4b63      	ldr	r3, [pc, #396]	; (8000968 <fsm_manual_run+0x29c>)
 80007da:	2217      	movs	r2, #23
 80007dc:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 80007de:	4b66      	ldr	r3, [pc, #408]	; (8000978 <fsm_manual_run+0x2ac>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00c      	beq.n	8000800 <fsm_manual_run+0x134>
			status = AUTO_GREEN2;
 80007e6:	4b60      	ldr	r3, [pc, #384]	; (8000968 <fsm_manual_run+0x29c>)
 80007e8:	220b      	movs	r2, #11
 80007ea:	601a      	str	r2, [r3, #0]
			setTimer8(red_time);
 80007ec:	4b64      	ldr	r3, [pc, #400]	; (8000980 <fsm_manual_run+0x2b4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fa19 	bl	8001c28 <setTimer8>
			setTimer4(green_time_2);
 80007f6:	4b63      	ldr	r3, [pc, #396]	; (8000984 <fsm_manual_run+0x2b8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9a4 	bl	8001b48 <setTimer4>
		}

		if (is_button_pressed(2)) {
 8000800:	2002      	movs	r0, #2
 8000802:	f7ff fd81 	bl	8000308 <is_button_pressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	f000 80a5 	beq.w	8000958 <fsm_manual_run+0x28c>
			status = TUNING_RED;
 800080e:	4b56      	ldr	r3, [pc, #344]	; (8000968 <fsm_manual_run+0x29c>)
 8000810:	221f      	movs	r2, #31
 8000812:	601a      	str	r2, [r3, #0]
			setTimer8(TUNING_TIME);
 8000814:	f242 7010 	movw	r0, #10000	; 0x2710
 8000818:	f001 fa06 	bl	8001c28 <setTimer8>
			setTimer9(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f001 fa1f 	bl	8001c60 <setTimer9>
		}

		break;
 8000822:	e099      	b.n	8000958 <fsm_manual_run+0x28c>
	case MAN_GREEN2:
		// TODO:
			// RED2 off, GREEN2 on, RED1 on
		setRed(0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fa7b 	bl	8000d20 <setRed>
		setGreen(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 faf8 	bl	8000e20 <setGreen>

			// display value by UART
		sendingUART_RUN();
 8000830:	f000 fdae 	bl	8001390 <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fd67 	bl	8000308 <is_button_pressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00d      	beq.n	800085c <fsm_manual_run+0x190>
			status_pedestrian = WALK_LIGHT;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <fsm_manual_run+0x2a0>)
 8000842:	222e      	movs	r2, #46	; 0x2e
 8000844:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 8000846:	f644 6020 	movw	r0, #20000	; 0x4e20
 800084a:	f001 f929 	bl	8001aa0 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 800084e:	4b48      	ldr	r3, [pc, #288]	; (8000970 <fsm_manual_run+0x2a4>)
 8000850:	2232      	movs	r2, #50	; 0x32
 8000852:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000854:	4b47      	ldr	r3, [pc, #284]	; (8000974 <fsm_manual_run+0x2a8>)
 8000856:	f240 5214 	movw	r2, #1300	; 0x514
 800085a:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fd53 	bl	8000308 <is_button_pressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <fsm_manual_run+0x1aa>
			setTimer8(MANUAL_TIME);
 8000868:	f242 7010 	movw	r0, #10000	; 0x2710
 800086c:	f001 f9dc 	bl	8001c28 <setTimer8>
			status = MAN_YELLOW2;
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <fsm_manual_run+0x29c>)
 8000872:	2218      	movs	r2, #24
 8000874:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <fsm_manual_run+0x2ac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00c      	beq.n	8000898 <fsm_manual_run+0x1cc>
			status = AUTO_YELLOW2;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <fsm_manual_run+0x29c>)
 8000880:	220c      	movs	r2, #12
 8000882:	601a      	str	r2, [r3, #0]
			setTimer8(yellow_time_2);
 8000884:	4b40      	ldr	r3, [pc, #256]	; (8000988 <fsm_manual_run+0x2bc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f9cd 	bl	8001c28 <setTimer8>
			setTimer3(yellow_time_2);
 800088e:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <fsm_manual_run+0x2bc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f93c 	bl	8001b10 <setTimer3>
		}

		if (is_button_pressed(2)) {
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fd35 	bl	8000308 <is_button_pressed>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d05b      	beq.n	800095c <fsm_manual_run+0x290>
			status = TUNING_RED;
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <fsm_manual_run+0x29c>)
 80008a6:	221f      	movs	r2, #31
 80008a8:	601a      	str	r2, [r3, #0]
			setTimer8(TUNING_TIME);
 80008aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ae:	f001 f9bb 	bl	8001c28 <setTimer8>
			setTimer9(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f9d4 	bl	8001c60 <setTimer9>
		}

		break;
 80008b8:	e050      	b.n	800095c <fsm_manual_run+0x290>
	case MAN_YELLOW2:
		// TODO:
			// RED1 still on, YELLOW2 on
		setRed(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fa30 	bl	8000d20 <setRed>
		setYellow(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fa6d 	bl	8000da0 <setYellow>

			// display value by UART
		sendingUART_RUN();
 80008c6:	f000 fd63 	bl	8001390 <sendingUART_RUN>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fd1c 	bl	8000308 <is_button_pressed>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <fsm_manual_run+0x226>
			status_pedestrian = WALK_LIGHT;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <fsm_manual_run+0x2a0>)
 80008d8:	222e      	movs	r2, #46	; 0x2e
 80008da:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80008dc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80008e0:	f001 f8de 	bl	8001aa0 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <fsm_manual_run+0x2a4>)
 80008e6:	2232      	movs	r2, #50	; 0x32
 80008e8:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <fsm_manual_run+0x2a8>)
 80008ec:	f240 5214 	movw	r2, #1300	; 0x514
 80008f0:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fd08 	bl	8000308 <is_button_pressed>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <fsm_manual_run+0x240>
			setTimer8(MANUAL_TIME);
 80008fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000902:	f001 f991 	bl	8001c28 <setTimer8>
			status = MAN_GREEN1;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <fsm_manual_run+0x29c>)
 8000908:	2215      	movs	r2, #21
 800090a:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <fsm_manual_run+0x2ac>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00c      	beq.n	800092e <fsm_manual_run+0x262>
			setTimer8(green_time);
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <fsm_manual_run+0x2c0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f985 	bl	8001c28 <setTimer8>
			setTimer4(red_time_2);
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <fsm_manual_run+0x2c4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f910 	bl	8001b48 <setTimer4>
			status = AUTO_GREEN1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <fsm_manual_run+0x29c>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
		}

		if (is_button_pressed(2)) {
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fcea 	bl	8000308 <is_button_pressed>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d012      	beq.n	8000960 <fsm_manual_run+0x294>
			status = TUNING_RED;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <fsm_manual_run+0x29c>)
 800093c:	221f      	movs	r2, #31
 800093e:	601a      	str	r2, [r3, #0]
			setTimer8(TUNING_TIME);
 8000940:	f242 7010 	movw	r0, #10000	; 0x2710
 8000944:	f001 f970 	bl	8001c28 <setTimer8>
			setTimer9(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f001 f989 	bl	8001c60 <setTimer9>
		}

		break;
 800094e:	e007      	b.n	8000960 <fsm_manual_run+0x294>
	default:
		break;
 8000950:	bf00      	nop
 8000952:	e006      	b.n	8000962 <fsm_manual_run+0x296>
		break;
 8000954:	bf00      	nop
 8000956:	e004      	b.n	8000962 <fsm_manual_run+0x296>
		break;
 8000958:	bf00      	nop
 800095a:	e002      	b.n	8000962 <fsm_manual_run+0x296>
		break;
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <fsm_manual_run+0x296>
		break;
 8000960:	bf00      	nop
	}
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000004 	.word	0x20000004
 800096c:	20000008 	.word	0x20000008
 8000970:	20000114 	.word	0x20000114
 8000974:	20000110 	.word	0x20000110
 8000978:	20000150 	.word	0x20000150
 800097c:	20000010 	.word	0x20000010
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000020 	.word	0x20000020
 8000988:	2000001c 	.word	0x2000001c
 800098c:	20000014 	.word	0x20000014
 8000990:	20000018 	.word	0x20000018

08000994 <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <fsm_pedestrian_run+0xc0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b2d      	cmp	r3, #45	; 0x2d
 800099e:	d002      	beq.n	80009a6 <fsm_pedestrian_run+0x12>
 80009a0:	2b2e      	cmp	r3, #46	; 0x2e
 80009a2:	d028      	beq.n	80009f6 <fsm_pedestrian_run+0x62>
			}

			break;
		default:

			break;
 80009a4:	e054      	b.n	8000a50 <fsm_pedestrian_run+0xbc>
			setPedestrian(0);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fa7a 	bl	8000ea0 <setPedestrian>
			if(timer1_flag){
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <fsm_pedestrian_run+0xc4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d010      	beq.n	80009d6 <fsm_pedestrian_run+0x42>
				status_pedestrian = -1;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <fsm_pedestrian_run+0xc0>)
 80009b6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ba:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 fa6f 	bl	8000ea0 <setPedestrian>
				buzzer_freq = 0;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <fsm_pedestrian_run+0xc8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <fsm_pedestrian_run+0xcc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <fsm_pedestrian_run+0xd0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2){
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <fsm_pedestrian_run+0xd4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b0b      	cmp	r3, #11
 80009dc:	d003      	beq.n	80009e6 <fsm_pedestrian_run+0x52>
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <fsm_pedestrian_run+0xd4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b0c      	cmp	r3, #12
 80009e4:	d131      	bne.n	8000a4a <fsm_pedestrian_run+0xb6>
				status_pedestrian = WALK_LIGHT;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <fsm_pedestrian_run+0xc0>)
 80009e8:	222e      	movs	r2, #46	; 0x2e
 80009ea:	601a      	str	r2, [r3, #0]
				setTimer5(BUZZER_CYCLE);
 80009ec:	f240 5014 	movw	r0, #1300	; 0x514
 80009f0:	f001 f8c6 	bl	8001b80 <setTimer5>
			break;
 80009f4:	e029      	b.n	8000a4a <fsm_pedestrian_run+0xb6>
			setPedestrian(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fa52 	bl	8000ea0 <setPedestrian>
			Buzzer();
 80009fc:	f000 fd74 	bl	80014e8 <Buzzer>
			if(timer1_flag){
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <fsm_pedestrian_run+0xc4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d010      	beq.n	8000a2a <fsm_pedestrian_run+0x96>
				status_pedestrian = -1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <fsm_pedestrian_run+0xc0>)
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 fa45 	bl	8000ea0 <setPedestrian>
				buzzer_freq = 0;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <fsm_pedestrian_run+0xc8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <fsm_pedestrian_run+0xcc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <fsm_pedestrian_run+0xd0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1){
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <fsm_pedestrian_run+0xd4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d003      	beq.n	8000a3a <fsm_pedestrian_run+0xa6>
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <fsm_pedestrian_run+0xd4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d109      	bne.n	8000a4e <fsm_pedestrian_run+0xba>
				status_pedestrian = STOP_LIGHT;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <fsm_pedestrian_run+0xc0>)
 8000a3c:	222d      	movs	r2, #45	; 0x2d
 8000a3e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <fsm_pedestrian_run+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000a48:	e001      	b.n	8000a4e <fsm_pedestrian_run+0xba>
			break;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <fsm_pedestrian_run+0xbc>
			break;
 8000a4e:	bf00      	nop
	}
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000118 	.word	0x20000118
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000110 	.word	0x20000110
 8000a64:	2000016c 	.word	0x2000016c
 8000a68:	20000004 	.word	0x20000004

08000a6c <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	switch(status){
 8000a70:	4ba1      	ldr	r3, [pc, #644]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b21      	cmp	r3, #33	; 0x21
 8000a76:	d06d      	beq.n	8000b54 <fsm_tuning_run+0xe8>
 8000a78:	2b21      	cmp	r3, #33	; 0x21
 8000a7a:	f300 8133 	bgt.w	8000ce4 <fsm_tuning_run+0x278>
 8000a7e:	2b1f      	cmp	r3, #31
 8000a80:	d003      	beq.n	8000a8a <fsm_tuning_run+0x1e>
 8000a82:	2b20      	cmp	r3, #32
 8000a84:	f000 80ca 	beq.w	8000c1c <fsm_tuning_run+0x1b0>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 8000a88:	e12c      	b.n	8000ce4 <fsm_tuning_run+0x278>
			if(is_button_pressed(3)){
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f7ff fc3c 	bl	8000308 <is_button_pressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <fsm_tuning_run+0x42>
				red_time += 1000;
 8000a96:	4b99      	ldr	r3, [pc, #612]	; (8000cfc <fsm_tuning_run+0x290>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a9e:	4a97      	ldr	r2, [pc, #604]	; (8000cfc <fsm_tuning_run+0x290>)
 8000aa0:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000aa2:	f000 fce5 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000aa6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aaa:	f001 f8bd 	bl	8001c28 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f7ff fc4a 	bl	8000348 <is_button_pressed_1s>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <fsm_tuning_run+0x66>
				red_time -= 1000;
 8000aba:	4b90      	ldr	r3, [pc, #576]	; (8000cfc <fsm_tuning_run+0x290>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ac2:	4a8e      	ldr	r2, [pc, #568]	; (8000cfc <fsm_tuning_run+0x290>)
 8000ac4:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000ac6:	f000 fcd3 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000aca:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ace:	f001 f8ab 	bl	8001c28 <setTimer8>
			red_time_2 = red_time;
 8000ad2:	4b8a      	ldr	r3, [pc, #552]	; (8000cfc <fsm_tuning_run+0x290>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a8a      	ldr	r2, [pc, #552]	; (8000d00 <fsm_tuning_run+0x294>)
 8000ad8:	6013      	str	r3, [r2, #0]
			if(timer9_flag){
 8000ada:	4b8a      	ldr	r3, [pc, #552]	; (8000d04 <fsm_tuning_run+0x298>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00d      	beq.n	8000afe <fsm_tuning_run+0x92>
				setRed(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f91c 	bl	8000d20 <setRed>
				setRed(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f919 	bl	8000d20 <setRed>
				setTimer9(2000);
 8000aee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000af2:	f001 f8b5 	bl	8001c60 <setTimer9>
				setTimer7(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afa:	f001 f879 	bl	8001bf0 <setTimer7>
			if(timer7_flag){
 8000afe:	4b82      	ldr	r3, [pc, #520]	; (8000d08 <fsm_tuning_run+0x29c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <fsm_tuning_run+0xa0>
				setRed(2);	// Turn off
 8000b06:	2002      	movs	r0, #2
 8000b08:	f000 f90a 	bl	8000d20 <setRed>
			if(timer8_flag){
 8000b0c:	4b7f      	ldr	r3, [pc, #508]	; (8000d0c <fsm_tuning_run+0x2a0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <fsm_tuning_run+0xb0>
				status = AUTO_INIT;
 8000b14:	4b78      	ldr	r3, [pc, #480]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	601a      	str	r2, [r3, #0]
			break;
 8000b1a:	e0e5      	b.n	8000ce8 <fsm_tuning_run+0x27c>
			else if(is_button_pressed(2)){
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fbf3 	bl	8000308 <is_button_pressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00a      	beq.n	8000b3e <fsm_tuning_run+0xd2>
				status = TUNING_YELLOW;
 8000b28:	4b73      	ldr	r3, [pc, #460]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000b2a:	2221      	movs	r2, #33	; 0x21
 8000b2c:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000b2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b32:	f001 f879 	bl	8001c28 <setTimer8>
				setTimer9(10);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f001 f892 	bl	8001c60 <setTimer9>
			break;
 8000b3c:	e0d4      	b.n	8000ce8 <fsm_tuning_run+0x27c>
			else if(is_button_pressed(1)){
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fbe2 	bl	8000308 <is_button_pressed>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80ce 	beq.w	8000ce8 <fsm_tuning_run+0x27c>
				status = AUTO_INIT;
 8000b4c:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	601a      	str	r2, [r3, #0]
			break;
 8000b52:	e0c9      	b.n	8000ce8 <fsm_tuning_run+0x27c>
			if(is_button_pressed(3)){
 8000b54:	2003      	movs	r0, #3
 8000b56:	f7ff fbd7 	bl	8000308 <is_button_pressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00b      	beq.n	8000b78 <fsm_tuning_run+0x10c>
				yellow_time += 1000;
 8000b60:	4b6b      	ldr	r3, [pc, #428]	; (8000d10 <fsm_tuning_run+0x2a4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b68:	4a69      	ldr	r2, [pc, #420]	; (8000d10 <fsm_tuning_run+0x2a4>)
 8000b6a:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000b6c:	f000 fc80 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000b70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b74:	f001 f858 	bl	8001c28 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f7ff fbe5 	bl	8000348 <is_button_pressed_1s>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00b      	beq.n	8000b9c <fsm_tuning_run+0x130>
				yellow_time -= 1000;
 8000b84:	4b62      	ldr	r3, [pc, #392]	; (8000d10 <fsm_tuning_run+0x2a4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b8c:	4a60      	ldr	r2, [pc, #384]	; (8000d10 <fsm_tuning_run+0x2a4>)
 8000b8e:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000b90:	f000 fc6e 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000b94:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b98:	f001 f846 	bl	8001c28 <setTimer8>
			yellow_time_2 = yellow_time;
 8000b9c:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <fsm_tuning_run+0x2a4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <fsm_tuning_run+0x2a8>)
 8000ba2:	6013      	str	r3, [r2, #0]
			if(timer9_flag){
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <fsm_tuning_run+0x298>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00d      	beq.n	8000bc8 <fsm_tuning_run+0x15c>
				setYellow(0);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 f8f7 	bl	8000da0 <setYellow>
				setYellow(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 f8f4 	bl	8000da0 <setYellow>
				setTimer9(2000);
 8000bb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bbc:	f001 f850 	bl	8001c60 <setTimer9>
				setTimer7(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f001 f814 	bl	8001bf0 <setTimer7>
			if(timer7_flag){
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <fsm_tuning_run+0x29c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <fsm_tuning_run+0x16a>
				setRed(2);	// Turn off
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f000 f8a5 	bl	8000d20 <setRed>
			if(timer8_flag){
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <fsm_tuning_run+0x2a0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <fsm_tuning_run+0x17a>
				status = AUTO_INIT;
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	601a      	str	r2, [r3, #0]
			break;
 8000be4:	e082      	b.n	8000cec <fsm_tuning_run+0x280>
			else if(is_button_pressed(2)){
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fb8e 	bl	8000308 <is_button_pressed>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <fsm_tuning_run+0x19c>
				status = TUNING_GREEN;
 8000bf2:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000bf8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bfc:	f001 f814 	bl	8001c28 <setTimer8>
				setTimer9(10);
 8000c00:	200a      	movs	r0, #10
 8000c02:	f001 f82d 	bl	8001c60 <setTimer9>
			break;
 8000c06:	e071      	b.n	8000cec <fsm_tuning_run+0x280>
			else if(is_button_pressed(1)){
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fb7d 	bl	8000308 <is_button_pressed>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d06b      	beq.n	8000cec <fsm_tuning_run+0x280>
				status = AUTO_INIT;
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	601a      	str	r2, [r3, #0]
			break;
 8000c1a:	e067      	b.n	8000cec <fsm_tuning_run+0x280>
			if(is_button_pressed(3)){
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f7ff fb73 	bl	8000308 <is_button_pressed>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00b      	beq.n	8000c40 <fsm_tuning_run+0x1d4>
				green_time += 1000;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <fsm_tuning_run+0x2ac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c30:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <fsm_tuning_run+0x2ac>)
 8000c32:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000c34:	f000 fc1c 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000c38:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c3c:	f000 fff4 	bl	8001c28 <setTimer8>
			if(is_button_pressed_1s(3)){
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fb81 	bl	8000348 <is_button_pressed_1s>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <fsm_tuning_run+0x1f8>
				green_time -= 1000;
 8000c4c:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <fsm_tuning_run+0x2ac>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <fsm_tuning_run+0x2ac>)
 8000c56:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000c58:	f000 fc0a 	bl	8001470 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000c5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c60:	f000 ffe2 	bl	8001c28 <setTimer8>
			green_time_2 = green_time;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <fsm_tuning_run+0x2ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <fsm_tuning_run+0x2b0>)
 8000c6a:	6013      	str	r3, [r2, #0]
			if(timer9_flag){
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <fsm_tuning_run+0x298>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00d      	beq.n	8000c90 <fsm_tuning_run+0x224>
				setGreen(0);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f8d3 	bl	8000e20 <setGreen>
				setGreen(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 f8d0 	bl	8000e20 <setGreen>
				setTimer9(2000);
 8000c80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c84:	f000 ffec 	bl	8001c60 <setTimer9>
				setTimer7(1000);
 8000c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8c:	f000 ffb0 	bl	8001bf0 <setTimer7>
			if(timer7_flag){
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <fsm_tuning_run+0x29c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <fsm_tuning_run+0x232>
				setRed(2);	// Turn off
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f841 	bl	8000d20 <setRed>
			if(timer8_flag){
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <fsm_tuning_run+0x2a0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <fsm_tuning_run+0x242>
				status = AUTO_INIT;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	601a      	str	r2, [r3, #0]
			break;
 8000cac:	e020      	b.n	8000cf0 <fsm_tuning_run+0x284>
			else if(is_button_pressed(2)){
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fb2a 	bl	8000308 <is_button_pressed>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00a      	beq.n	8000cd0 <fsm_tuning_run+0x264>
				status = TUNING_RED;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000cbc:	221f      	movs	r2, #31
 8000cbe:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000cc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cc4:	f000 ffb0 	bl	8001c28 <setTimer8>
				setTimer9(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 ffc9 	bl	8001c60 <setTimer9>
			break;
 8000cce:	e00f      	b.n	8000cf0 <fsm_tuning_run+0x284>
			else if(is_button_pressed(1)){
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fb19 	bl	8000308 <is_button_pressed>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <fsm_tuning_run+0x284>
				status = AUTO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <fsm_tuning_run+0x28c>)
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	601a      	str	r2, [r3, #0]
			break;
 8000ce2:	e005      	b.n	8000cf0 <fsm_tuning_run+0x284>
			break;
 8000ce4:	bf00      	nop
 8000ce6:	e004      	b.n	8000cf2 <fsm_tuning_run+0x286>
			break;
 8000ce8:	bf00      	nop
 8000cea:	e002      	b.n	8000cf2 <fsm_tuning_run+0x286>
			break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <fsm_tuning_run+0x286>
			break;
 8000cf0:	bf00      	nop
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	20000018 	.word	0x20000018
 8000d04:	20000158 	.word	0x20000158
 8000d08:	20000148 	.word	0x20000148
 8000d0c:	20000150 	.word	0x20000150
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000001c 	.word	0x2000001c
 8000d18:	20000014 	.word	0x20000014
 8000d1c:	20000020 	.word	0x20000020

08000d20 <setRed>:
 * Traffic light 2:
 *		Pin 1: D4 – PB5
 *		Pin 2: D5 – PB4
 */

void setRed(int index){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	switch(index){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <setRed+0x16>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d00c      	beq.n	8000d4e <setRed+0x2e>
 8000d34:	e016      	b.n	8000d64 <setRed+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3c:	4816      	ldr	r0, [pc, #88]	; (8000d98 <setRed+0x78>)
 8000d3e:	f001 fd92 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2108      	movs	r1, #8
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <setRed+0x7c>)
 8000d48:	f001 fd8d 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000d4c:	e020      	b.n	8000d90 <setRed+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <setRed+0x7c>)
 8000d54:	f001 fd87 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	480f      	ldr	r0, [pc, #60]	; (8000d9c <setRed+0x7c>)
 8000d5e:	f001 fd82 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000d62:	e015      	b.n	8000d90 <setRed+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <setRed+0x78>)
 8000d6c:	f001 fd7b 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2108      	movs	r1, #8
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <setRed+0x7c>)
 8000d76:	f001 fd76 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <setRed+0x7c>)
 8000d80:	f001 fd71 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2110      	movs	r1, #16
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <setRed+0x7c>)
 8000d8a:	f001 fd6c 	bl	8002866 <HAL_GPIO_WritePin>

			break;
 8000d8e:	bf00      	nop
	}
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00

08000da0 <setYellow>:

void setYellow(int index){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	switch(index){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <setYellow+0x16>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d00c      	beq.n	8000dce <setYellow+0x2e>
 8000db4:	e016      	b.n	8000de4 <setYellow+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <setYellow+0x78>)
 8000dbe:	f001 fd52 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <setYellow+0x7c>)
 8000dc8:	f001 fd4d 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000dcc:	e020      	b.n	8000e10 <setYellow+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <setYellow+0x7c>)
 8000dd4:	f001 fd47 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <setYellow+0x7c>)
 8000dde:	f001 fd42 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000de2:	e015      	b.n	8000e10 <setYellow+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <setYellow+0x78>)
 8000dec:	f001 fd3b 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2108      	movs	r1, #8
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <setYellow+0x7c>)
 8000df6:	f001 fd36 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <setYellow+0x7c>)
 8000e00:	f001 fd31 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2110      	movs	r1, #16
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <setYellow+0x7c>)
 8000e0a:	f001 fd2c 	bl	8002866 <HAL_GPIO_WritePin>

			break;
 8000e0e:	bf00      	nop
	}
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <setGreen>:

void setGreen(int index){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	switch(index){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <setGreen+0x16>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d00c      	beq.n	8000e4e <setGreen+0x2e>
 8000e34:	e016      	b.n	8000e64 <setGreen+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <setGreen+0x78>)
 8000e3e:	f001 fd12 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2108      	movs	r1, #8
 8000e46:	4815      	ldr	r0, [pc, #84]	; (8000e9c <setGreen+0x7c>)
 8000e48:	f001 fd0d 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000e4c:	e020      	b.n	8000e90 <setGreen+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2120      	movs	r1, #32
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <setGreen+0x7c>)
 8000e54:	f001 fd07 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <setGreen+0x7c>)
 8000e5e:	f001 fd02 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000e62:	e015      	b.n	8000e90 <setGreen+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <setGreen+0x78>)
 8000e6c:	f001 fcfb 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2108      	movs	r1, #8
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <setGreen+0x7c>)
 8000e76:	f001 fcf6 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <setGreen+0x7c>)
 8000e80:	f001 fcf1 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <setGreen+0x7c>)
 8000e8a:	f001 fcec 	bl	8002866 <HAL_GPIO_WritePin>

			break;
 8000e8e:	bf00      	nop
	}
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <setPedestrian>:
/*
 * @param: value
 * 			0:	RED
 * 			1: 	GREEN
 */
void setPedestrian(int value){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	switch(value){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <setPedestrian+0x16>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d00d      	beq.n	8000ed0 <setPedestrian+0x30>
 8000eb4:	e019      	b.n	8000eea <setPedestrian+0x4a>
		case 0:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <setPedestrian+0x6c>)
 8000ebe:	f001 fcd2 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <setPedestrian+0x70>)
 8000eca:	f001 fccc 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000ece:	e019      	b.n	8000f04 <setPedestrian+0x64>
		case 1:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <setPedestrian+0x6c>)
 8000ed8:	f001 fcc5 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <setPedestrian+0x70>)
 8000ee4:	f001 fcbf 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000ee8:	e00c      	b.n	8000f04 <setPedestrian+0x64>
		default:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <setPedestrian+0x6c>)
 8000ef2:	f001 fcb8 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <setPedestrian+0x70>)
 8000efe:	f001 fcb2 	bl	8002866 <HAL_GPIO_WritePin>

			break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40010800 	.word	0x40010800

08000f14 <clearLED>:

void clearLED(int index){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	switch(index){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <clearLED+0x16>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d00c      	beq.n	8000f42 <clearLED+0x2e>
 8000f28:	e016      	b.n	8000f58 <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <clearLED+0x78>)
 8000f32:	f001 fc98 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4815      	ldr	r0, [pc, #84]	; (8000f90 <clearLED+0x7c>)
 8000f3c:	f001 fc93 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000f40:	e020      	b.n	8000f84 <clearLED+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <clearLED+0x7c>)
 8000f48:	f001 fc8d 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <clearLED+0x7c>)
 8000f52:	f001 fc88 	bl	8002866 <HAL_GPIO_WritePin>
			break;
 8000f56:	e015      	b.n	8000f84 <clearLED+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <clearLED+0x78>)
 8000f60:	f001 fc81 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <clearLED+0x7c>)
 8000f6a:	f001 fc7c 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <clearLED+0x7c>)
 8000f74:	f001 fc77 	bl	8002866 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <clearLED+0x7c>)
 8000f7e:	f001 fc72 	bl	8002866 <HAL_GPIO_WritePin>


			break;
 8000f82:	bf00      	nop
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f001 f8aa 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f840 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 f96c 	bl	800127c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa4:	f000 f87e 	bl	80010a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f8c8 	bl	800113c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 f93c 	bl	8001228 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <main+0x6c>)
 8000fb2:	f002 f8db 	bl	800316c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <main+0x70>)
 8000fba:	f002 f981 	bl	80032c0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <main+0x74>)
 8000fc4:	f000 fafc 	bl	80015c0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8000fc8:	220a      	movs	r2, #10
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <main+0x78>)
 8000fce:	f000 faf7 	bl	80015c0 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <main+0x7c>)
 8000fd8:	f000 faf2 	bl	80015c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000fdc:	220a      	movs	r2, #10
 8000fde:	2100      	movs	r1, #0
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <main+0x80>)
 8000fe2:	f000 faed 	bl	80015c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 8000fe6:	220a      	movs	r2, #10
 8000fe8:	2100      	movs	r1, #0
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <main+0x84>)
 8000fec:	f000 fae8 	bl	80015c0 <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <main+0x88>)
 8000ff6:	f000 fae3 	bl	80015c0 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000ffa:	f000 fd3b 	bl	8001a74 <SCH_Dispatch_Tasks>
 8000ffe:	e7fc      	b.n	8000ffa <main+0x66>
 8001000:	200001b4 	.word	0x200001b4
 8001004:	2000016c 	.word	0x2000016c
 8001008:	08001c99 	.word	0x08001c99
 800100c:	080001f5 	.word	0x080001f5
 8001010:	08000389 	.word	0x08000389
 8001014:	080006cd 	.word	0x080006cd
 8001018:	08000a6d 	.word	0x08000a6d
 800101c:	08000995 	.word	0x08000995

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fcac 	bl	800498c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001056:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fc19 	bl	8002898 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800106c:	f000 f98a 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2102      	movs	r1, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fe84 	bl	8002d98 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001096:	f000 f975 	bl	8001384 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3740      	adds	r7, #64	; 0x40
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_TIM2_Init+0x94>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_TIM2_Init+0x94>)
 80010ca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_TIM2_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM2_Init+0x94>)
 80010d8:	224f      	movs	r2, #79	; 0x4f
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM2_Init+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM2_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM2_Init+0x94>)
 80010ea:	f001 ffef 	bl	80030cc <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010f4:	f000 f946 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM2_Init+0x94>)
 8001106:	f002 fb43 	bl	8003790 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001110:	f000 f938 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_TIM2_Init+0x94>)
 8001122:	f002 fec1 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f92a 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001b4 	.word	0x200001b4

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_TIM3_Init+0xe4>)
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <MX_TIM3_Init+0xe8>)
 8001170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001174:	223f      	movs	r2, #63	; 0x3f
 8001176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_TIM3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_TIM3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001194:	f001 ff9a 	bl	80030cc <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800119e:	f000 f8f1 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011b0:	f002 faee 	bl	8003790 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 f8e3 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011c0:	f002 f826 	bl	8003210 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ca:	f000 f8db 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011de:	f002 fe63 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011e8:	f000 f8cc 	bl	8001384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001204:	f002 fa06 	bl	8003614 <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800120e:	f000 f8b9 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001214:	f000 fe4a 	bl	8001eac <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000016c 	.word	0x2000016c
 8001224:	40000400 	.word	0x40000400

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001260:	f002 fe92 	bl	8003f88 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 f88b 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001fc 	.word	0x200001fc
 8001278:	40004400 	.word	0x40004400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <MX_GPIO_Init+0xe8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a33      	ldr	r2, [pc, #204]	; (8001364 <MX_GPIO_Init+0xe8>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <MX_GPIO_Init+0xe8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <MX_GPIO_Init+0xe8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_GPIO_Init+0xe8>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_GPIO_Init+0xe8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80012c6:	4828      	ldr	r0, [pc, #160]	; (8001368 <MX_GPIO_Init+0xec>)
 80012c8:	f001 facd 	bl	8002866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80012d2:	4826      	ldr	r0, [pc, #152]	; (800136c <MX_GPIO_Init+0xf0>)
 80012d4:	f001 fac7 	bl	8002866 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 80012d8:	2303      	movs	r3, #3
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	4820      	ldr	r0, [pc, #128]	; (800136c <MX_GPIO_Init+0xf0>)
 80012ec:	f001 f920 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 80012f0:	2310      	movs	r3, #16
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4619      	mov	r1, r3
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_GPIO_Init+0xf0>)
 8001304:	f001 f914 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 8001308:	2301      	movs	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4619      	mov	r1, r3
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_GPIO_Init+0xec>)
 800131c:	f001 f908 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 8001320:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <MX_GPIO_Init+0xec>)
 800133a:	f001 f8f9 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 800133e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_GPIO_Init+0xf0>)
 8001358:	f001 f8ea 	bl	8002530 <HAL_GPIO_Init>

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800

08001370 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001378:	f000 fb44 	bl	8001a04 <SCH_Update>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <sendingUART_RUN>:
 *      Author: PC
 */

#include "perihersal.h"

void sendingUART_RUN(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <sendingUART_RUN+0xb0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04f      	beq.n	800143c <sendingUART_RUN+0xac>
		if(!timer3_flag){
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <sendingUART_RUN+0xb4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d115      	bne.n	80013d0 <sendingUART_RUN+0x40>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#\r\n", timer3_counter/100), 1000);
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <sendingUART_RUN+0xb8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a28      	ldr	r2, [pc, #160]	; (800144c <sendingUART_RUN+0xbc>)
 80013aa:	fb82 1203 	smull	r1, r2, r2, r3
 80013ae:	1152      	asrs	r2, r2, #5
 80013b0:	17db      	asrs	r3, r3, #31
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4926      	ldr	r1, [pc, #152]	; (8001450 <sendingUART_RUN+0xc0>)
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <sendingUART_RUN+0xc4>)
 80013ba:	f003 faef 	bl	800499c <siprintf>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	4923      	ldr	r1, [pc, #140]	; (8001454 <sendingUART_RUN+0xc4>)
 80013c8:	4823      	ldr	r0, [pc, #140]	; (8001458 <sendingUART_RUN+0xc8>)
 80013ca:	f002 fe2a 	bl	8004022 <HAL_UART_Transmit>
 80013ce:	e00b      	b.n	80013e8 <sendingUART_RUN+0x58>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#\r\n"), 1000);
 80013d0:	4922      	ldr	r1, [pc, #136]	; (800145c <sendingUART_RUN+0xcc>)
 80013d2:	4820      	ldr	r0, [pc, #128]	; (8001454 <sendingUART_RUN+0xc4>)
 80013d4:	f003 fae2 	bl	800499c <siprintf>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	491c      	ldr	r1, [pc, #112]	; (8001454 <sendingUART_RUN+0xc4>)
 80013e2:	481d      	ldr	r0, [pc, #116]	; (8001458 <sendingUART_RUN+0xc8>)
 80013e4:	f002 fe1d 	bl	8004022 <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <sendingUART_RUN+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d115      	bne.n	800141c <sendingUART_RUN+0x8c>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#\r\n", timer4_counter/100), 1000);
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <sendingUART_RUN+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <sendingUART_RUN+0xbc>)
 80013f6:	fb82 1203 	smull	r1, r2, r2, r3
 80013fa:	1152      	asrs	r2, r2, #5
 80013fc:	17db      	asrs	r3, r3, #31
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4919      	ldr	r1, [pc, #100]	; (8001468 <sendingUART_RUN+0xd8>)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <sendingUART_RUN+0xc4>)
 8001406:	f003 fac9 	bl	800499c <siprintf>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	4910      	ldr	r1, [pc, #64]	; (8001454 <sendingUART_RUN+0xc4>)
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <sendingUART_RUN+0xc8>)
 8001416:	f002 fe04 	bl	8004022 <HAL_UART_Transmit>
 800141a:	e00b      	b.n	8001434 <sendingUART_RUN+0xa4>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#\r\n"), 1000);
 800141c:	4913      	ldr	r1, [pc, #76]	; (800146c <sendingUART_RUN+0xdc>)
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <sendingUART_RUN+0xc4>)
 8001420:	f003 fabc 	bl	800499c <siprintf>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	4909      	ldr	r1, [pc, #36]	; (8001454 <sendingUART_RUN+0xc4>)
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <sendingUART_RUN+0xc8>)
 8001430:	f002 fdf7 	bl	8004022 <HAL_UART_Transmit>
		}
		setTimer2(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001438:	f000 fb4e 	bl	8001ad8 <setTimer2>
	}
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000120 	.word	0x20000120
 8001444:	20000128 	.word	0x20000128
 8001448:	2000012c 	.word	0x2000012c
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	08005228 	.word	0x08005228
 8001454:	200000f0 	.word	0x200000f0
 8001458:	200001fc 	.word	0x200001fc
 800145c:	0800523c 	.word	0x0800523c
 8001460:	20000130 	.word	0x20000130
 8001464:	20000134 	.word	0x20000134
 8001468:	08005254 	.word	0x08005254
 800146c:	08005268 	.word	0x08005268

08001470 <sendingUART_SETTING>:

void sendingUART_SETTING(){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8
		HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!RED:%d:YELLOW:%d:GREEN:%d#\r\n", red_time/1000, yellow_time/1000, green_time/1000), 1000);
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <sendingUART_SETTING+0x5c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <sendingUART_SETTING+0x60>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	1192      	asrs	r2, r2, #6
 8001482:	17db      	asrs	r3, r3, #31
 8001484:	1ad1      	subs	r1, r2, r3
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <sendingUART_SETTING+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <sendingUART_SETTING+0x60>)
 800148c:	fb82 0203 	smull	r0, r2, r2, r3
 8001490:	1192      	asrs	r2, r2, #6
 8001492:	17db      	asrs	r3, r3, #31
 8001494:	1ad0      	subs	r0, r2, r3
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <sendingUART_SETTING+0x68>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <sendingUART_SETTING+0x60>)
 800149c:	fb82 c203 	smull	ip, r2, r2, r3
 80014a0:	1192      	asrs	r2, r2, #6
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4603      	mov	r3, r0
 80014aa:	460a      	mov	r2, r1
 80014ac:	490b      	ldr	r1, [pc, #44]	; (80014dc <sendingUART_SETTING+0x6c>)
 80014ae:	480c      	ldr	r0, [pc, #48]	; (80014e0 <sendingUART_SETTING+0x70>)
 80014b0:	f003 fa74 	bl	800499c <siprintf>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	4908      	ldr	r1, [pc, #32]	; (80014e0 <sendingUART_SETTING+0x70>)
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <sendingUART_SETTING+0x74>)
 80014c0:	f002 fdaf 	bl	8004022 <HAL_UART_Transmit>
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	10624dd3 	.word	0x10624dd3
 80014d4:	20000010 	.word	0x20000010
 80014d8:	20000014 	.word	0x20000014
 80014dc:	08005280 	.word	0x08005280
 80014e0:	200000f0 	.word	0x200000f0
 80014e4:	200001fc 	.word	0x200001fc

080014e8 <Buzzer>:

void Buzzer(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if(timer5_flag){
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <Buzzer+0xbc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d04c      	beq.n	800158e <Buzzer+0xa6>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <Buzzer+0xc0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <Buzzer+0xc4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(buzzer_time/2);
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <Buzzer+0xc8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0fda      	lsrs	r2, r3, #31
 8001504:	4413      	add	r3, r2
 8001506:	105b      	asrs	r3, r3, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fb55 	bl	8001bb8 <setTimer6>
		if(timer3_counter<2000){
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <Buzzer+0xcc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001516:	da1b      	bge.n	8001550 <Buzzer+0x68>
			buzzer_freq *= 3;
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <Buzzer+0xc0>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <Buzzer+0xc0>)
 8001524:	6013      	str	r3, [r2, #0]
			buzzer_time = (timer3_counter>0)? timer3_counter/4 : buzzer_time/3;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <Buzzer+0xcc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dd06      	ble.n	800153c <Buzzer+0x54>
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <Buzzer+0xcc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da00      	bge.n	8001538 <Buzzer+0x50>
 8001536:	3303      	adds	r3, #3
 8001538:	109b      	asrs	r3, r3, #2
 800153a:	e006      	b.n	800154a <Buzzer+0x62>
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <Buzzer+0xc8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <Buzzer+0xd0>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <Buzzer+0xc8>)
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e009      	b.n	8001564 <Buzzer+0x7c>
		}else{
			buzzer_freq += 100;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <Buzzer+0xc0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3364      	adds	r3, #100	; 0x64
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <Buzzer+0xc0>)
 8001558:	6013      	str	r3, [r2, #0]
			buzzer_time -= 100;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <Buzzer+0xc8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b64      	subs	r3, #100	; 0x64
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <Buzzer+0xc8>)
 8001562:	6013      	str	r3, [r2, #0]
		}


		if(buzzer_freq >= 1000) buzzer_freq = 1000;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <Buzzer+0xc0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156c:	db03      	blt.n	8001576 <Buzzer+0x8e>
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <Buzzer+0xc0>)
 8001570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001574:	601a      	str	r2, [r3, #0]
		if(buzzer_time <= 100)	buzzer_time = 100;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <Buzzer+0xc8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	dc02      	bgt.n	8001584 <Buzzer+0x9c>
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <Buzzer+0xc8>)
 8001580:	2264      	movs	r2, #100	; 0x64
 8001582:	601a      	str	r2, [r3, #0]
		setTimer5(buzzer_time);
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <Buzzer+0xc8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 faf9 	bl	8001b80 <setTimer5>
	}
	if(timer6_flag){
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <Buzzer+0xd4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <Buzzer+0xb6>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <Buzzer+0xc4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000138 	.word	0x20000138
 80015a8:	20000114 	.word	0x20000114
 80015ac:	2000016c 	.word	0x2000016c
 80015b0:	20000110 	.word	0x20000110
 80015b4:	2000012c 	.word	0x2000012c
 80015b8:	55555556 	.word	0x55555556
 80015bc:	20000140 	.word	0x20000140

080015c0 <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80015c0:	b4b0      	push	{r4, r5, r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <SCH_Add_Task+0x24c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b1d      	cmp	r3, #29
 80015d2:	f300 81bd 	bgt.w	8001950 <SCH_Add_Task+0x390>

        if(len == 0){
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <SCH_Add_Task+0x24c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 80015de:	4a8c      	ldr	r2, [pc, #560]	; (8001810 <SCH_Add_Task+0x250>)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4a8b      	ldr	r2, [pc, #556]	; (8001814 <SCH_Add_Task+0x254>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	4a88      	ldr	r2, [pc, #544]	; (8001810 <SCH_Add_Task+0x250>)
 80015f0:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a87      	ldr	r2, [pc, #540]	; (8001814 <SCH_Add_Task+0x254>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b84      	ldr	r3, [pc, #528]	; (8001810 <SCH_Add_Task+0x250>)
 8001600:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 8001602:	4b83      	ldr	r3, [pc, #524]	; (8001810 <SCH_Add_Task+0x250>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <SCH_Add_Task+0x258>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e196      	b.n	800193e <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 8001610:	4b81      	ldr	r3, [pc, #516]	; (8001818 <SCH_Add_Task+0x258>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	497e      	ldr	r1, [pc, #504]	; (8001810 <SCH_Add_Task+0x250>)
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	429a      	cmp	r2, r3
 8001628:	f0c0 80ba 	bcc.w	80017a0 <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 800162c:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <SCH_Add_Task+0x258>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e002      	b.n	800163a <SCH_Add_Task+0x7a>
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	4b78      	ldr	r3, [pc, #480]	; (800181c <SCH_Add_Task+0x25c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	da0f      	bge.n	8001664 <SCH_Add_Task+0xa4>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4a73      	ldr	r2, [pc, #460]	; (8001814 <SCH_Add_Task+0x254>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	08d9      	lsrs	r1, r3, #3
 800164e:	4870      	ldr	r0, [pc, #448]	; (8001810 <SCH_Add_Task+0x250>)
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4403      	add	r3, r0
 800165c:	3304      	adds	r3, #4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4299      	cmp	r1, r3
 8001662:	d2e7      	bcs.n	8001634 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <SCH_Add_Task+0x25c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	429a      	cmp	r2, r3
 800166c:	d144      	bne.n	80016f8 <SCH_Add_Task+0x138>
 800166e:	4968      	ldr	r1, [pc, #416]	; (8001810 <SCH_Add_Task+0x250>)
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3304      	adds	r3, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d338      	bcc.n	80016f8 <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4961      	ldr	r1, [pc, #388]	; (8001810 <SCH_Add_Task+0x250>)
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	495c      	ldr	r1, [pc, #368]	; (8001814 <SCH_Add_Task+0x254>)
 80016a2:	fba1 1303 	umull	r1, r3, r1, r3
 80016a6:	08d9      	lsrs	r1, r3, #3
 80016a8:	4859      	ldr	r0, [pc, #356]	; (8001810 <SCH_Add_Task+0x250>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4403      	add	r3, r0
 80016b4:	3304      	adds	r3, #4
 80016b6:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a56      	ldr	r2, [pc, #344]	; (8001814 <SCH_Add_Task+0x254>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	08d9      	lsrs	r1, r3, #3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	4608      	mov	r0, r1
 80016c8:	4951      	ldr	r1, [pc, #324]	; (8001810 <SCH_Add_Task+0x250>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3308      	adds	r3, #8
 80016d6:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	494c      	ldr	r1, [pc, #304]	; (8001810 <SCH_Add_Task+0x250>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	330c      	adds	r3, #12
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <SCH_Add_Task+0x25c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a49      	ldr	r2, [pc, #292]	; (8001818 <SCH_Add_Task+0x258>)
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e122      	b.n	800193e <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 80016f8:	4b44      	ldr	r3, [pc, #272]	; (800180c <SCH_Add_Task+0x24c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e017      	b.n	8001730 <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	4842      	ldr	r0, [pc, #264]	; (8001810 <SCH_Add_Task+0x250>)
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4418      	add	r0, r3
 8001712:	493f      	ldr	r1, [pc, #252]	; (8001810 <SCH_Add_Task+0x250>)
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	4604      	mov	r4, r0
 8001720:	461d      	mov	r5, r3
 8001722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3b01      	subs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	dce3      	bgt.n	8001700 <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <SCH_Add_Task+0x250>)
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <SCH_Add_Task+0x254>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	08d9      	lsrs	r1, r3, #3
 8001754:	482e      	ldr	r0, [pc, #184]	; (8001810 <SCH_Add_Task+0x250>)
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4403      	add	r3, r0
 8001762:	3304      	adds	r3, #4
 8001764:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <SCH_Add_Task+0x254>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	4618      	mov	r0, r3
 8001772:	4927      	ldr	r1, [pc, #156]	; (8001810 <SCH_Add_Task+0x250>)
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3308      	adds	r3, #8
 8001782:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001784:	4922      	ldr	r1, [pc, #136]	; (8001810 <SCH_Add_Task+0x250>)
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	330c      	adds	r3, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <SCH_Add_Task+0x258>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e0ce      	b.n	800193e <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <SCH_Add_Task+0x258>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e002      	b.n	80017ae <SCH_Add_Task+0x1ee>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <SCH_Add_Task+0x260>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dd0f      	ble.n	80017d8 <SCH_Add_Task+0x218>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <SCH_Add_Task+0x254>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	08d9      	lsrs	r1, r3, #3
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <SCH_Add_Task+0x250>)
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4403      	add	r3, r0
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4299      	cmp	r1, r3
 80017d6:	d3e7      	bcc.n	80017a8 <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <SCH_Add_Task+0x260>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d156      	bne.n	8001890 <SCH_Add_Task+0x2d0>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <SCH_Add_Task+0x254>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	08d9      	lsrs	r1, r3, #3
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <SCH_Add_Task+0x250>)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4403      	add	r3, r0
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4299      	cmp	r1, r3
 8001800:	d246      	bcs.n	8001890 <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 8001802:	4b02      	ldr	r3, [pc, #8]	; (800180c <SCH_Add_Task+0x24c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	e024      	b.n	8001854 <SCH_Add_Task+0x294>
 800180a:	bf00      	nop
 800180c:	200004a4 	.word	0x200004a4
 8001810:	2000024c 	.word	0x2000024c
 8001814:	cccccccd 	.word	0xcccccccd
 8001818:	20000248 	.word	0x20000248
 800181c:	20000240 	.word	0x20000240
 8001820:	20000244 	.word	0x20000244
                        sTask[j] = sTask[j-1];
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	484c      	ldr	r0, [pc, #304]	; (800195c <SCH_Add_Task+0x39c>)
 800182a:	6939      	ldr	r1, [r7, #16]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4418      	add	r0, r3
 8001836:	4949      	ldr	r1, [pc, #292]	; (800195c <SCH_Add_Task+0x39c>)
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	4604      	mov	r4, r0
 8001844:	461d      	mov	r5, r3
 8001846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	3b01      	subs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <SCH_Add_Task+0x3a0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	429a      	cmp	r2, r3
 800185c:	dce2      	bgt.n	8001824 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <SCH_Add_Task+0x39c>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a3f      	ldr	r2, [pc, #252]	; (8001964 <SCH_Add_Task+0x3a4>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	4a3b      	ldr	r2, [pc, #236]	; (800195c <SCH_Add_Task+0x39c>)
 8001870:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <SCH_Add_Task+0x3a4>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	461a      	mov	r2, r3
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <SCH_Add_Task+0x39c>)
 8001880:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <SCH_Add_Task+0x39c>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <SCH_Add_Task+0x3a8>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e056      	b.n	800193e <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <SCH_Add_Task+0x3ac>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e017      	b.n	80018c8 <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	482f      	ldr	r0, [pc, #188]	; (800195c <SCH_Add_Task+0x39c>)
 800189e:	6939      	ldr	r1, [r7, #16]
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4418      	add	r0, r3
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <SCH_Add_Task+0x39c>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	4604      	mov	r4, r0
 80018b8:	461d      	mov	r5, r3
 80018ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dce2      	bgt.n	8001898 <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 80018d8:	4920      	ldr	r1, [pc, #128]	; (800195c <SCH_Add_Task+0x39c>)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <SCH_Add_Task+0x3a4>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	08d9      	lsrs	r1, r3, #3
 80018f4:	4819      	ldr	r0, [pc, #100]	; (800195c <SCH_Add_Task+0x39c>)
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4403      	add	r3, r0
 8001902:	3304      	adds	r3, #4
 8001904:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <SCH_Add_Task+0x3a4>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	4618      	mov	r0, r3
 8001912:	4912      	ldr	r1, [pc, #72]	; (800195c <SCH_Add_Task+0x39c>)
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3308      	adds	r3, #8
 8001922:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001924:	490d      	ldr	r1, [pc, #52]	; (800195c <SCH_Add_Task+0x39c>)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	330c      	adds	r3, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <SCH_Add_Task+0x3a8>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <SCH_Add_Task+0x3ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <SCH_Add_Task+0x3b0>)
 8001944:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <SCH_Add_Task+0x3ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <SCH_Add_Task+0x3ac>)
 800194e:	6013      	str	r3, [r2, #0]

	}

}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	bcb0      	pop	{r4, r5, r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2000024c 	.word	0x2000024c
 8001960:	20000244 	.word	0x20000244
 8001964:	cccccccd 	.word	0xcccccccd
 8001968:	20000248 	.word	0x20000248
 800196c:	200004a4 	.word	0x200004a4
 8001970:	20000240 	.word	0x20000240

08001974 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <SCH_Delete_Then_Add_Task+0x84>)
 800197c:	463c      	mov	r4, r7
 800197e:	461d      	mov	r5, r3
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e017      	b.n	80019be <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <SCH_Delete_Then_Add_Task+0x84>)
 8001994:	6979      	ldr	r1, [r7, #20]
 8001996:	460b      	mov	r3, r1
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4418      	add	r0, r3
 80019a0:	4915      	ldr	r1, [pc, #84]	; (80019f8 <SCH_Delete_Then_Add_Task+0x84>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	4604      	mov	r4, r0
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	682b      	ldr	r3, [r5, #0]
 80019b6:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <SCH_Delete_Then_Add_Task+0x88>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbe1      	blt.n	800198e <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <SCH_Delete_Then_Add_Task+0x88>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SCH_Delete_Then_Add_Task+0x88>)
 80019d2:	6013      	str	r3, [r2, #0]
		tail -= 1;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <SCH_Delete_Then_Add_Task+0x8c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <SCH_Delete_Then_Add_Task+0x8c>)
 80019dc:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4413      	add	r3, r2
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff fde9 	bl	80015c0 <SCH_Add_Task>

}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdb0      	pop	{r4, r5, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000024c 	.word	0x2000024c
 80019fc:	200004a4 	.word	0x200004a4
 8001a00:	20000240 	.word	0x20000240

08001a04 <SCH_Update>:


void SCH_Update(void) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001a0e:	e015      	b.n	8001a3c <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <SCH_Update+0x68>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	330c      	adds	r3, #12
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <SCH_Update+0x68>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4403      	add	r3, r0
 8001a32:	330c      	adds	r3, #12
 8001a34:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001a3c:	490b      	ldr	r1, [pc, #44]	; (8001a6c <SCH_Update+0x68>)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <SCH_Update+0x6c>)
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d9dc      	bls.n	8001a10 <SCH_Update+0xc>
	}

	counter+=1;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SCH_Update+0x6c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <SCH_Update+0x6c>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000024c 	.word	0x2000024c
 8001a70:	200000ec 	.word	0x200000ec

08001a74 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 8001a78:	e009      	b.n	8001a8e <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <SCH_Dispatch_Tasks+0x28>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <SCH_Dispatch_Tasks+0x28>)
 8001a82:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SCH_Dispatch_Tasks+0x28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 8001a8a:	f7ff ff73 	bl	8001974 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <SCH_Dispatch_Tasks+0x28>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f1      	bne.n	8001a7a <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000024c 	.word	0x2000024c

08001aa0 <setTimer1>:
int timer8_counter = 0;

int timer9_flag = 0;
int timer9_counter = 0;

void setTimer1(int time){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	timer1_counter = time/10;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <setTimer1+0x2c>)
 8001aac:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab0:	1092      	asrs	r2, r2, #2
 8001ab2:	17db      	asrs	r3, r3, #31
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <setTimer1+0x30>)
 8001ab8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <setTimer1+0x34>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	66666667 	.word	0x66666667
 8001ad0:	2000011c 	.word	0x2000011c
 8001ad4:	20000118 	.word	0x20000118

08001ad8 <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int time){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	timer2_counter = time/10;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <setTimer2+0x2c>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	1092      	asrs	r2, r2, #2
 8001aea:	17db      	asrs	r3, r3, #31
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <setTimer2+0x30>)
 8001af0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <setTimer2+0x34>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	66666667 	.word	0x66666667
 8001b08:	20000124 	.word	0x20000124
 8001b0c:	20000120 	.word	0x20000120

08001b10 <setTimer3>:
void clearTimer2(){
	timer2_counter = 0;
	timer2_flag = 0;
}

void setTimer3(int time){
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	timer3_counter = time/10;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <setTimer3+0x2c>)
 8001b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b20:	1092      	asrs	r2, r2, #2
 8001b22:	17db      	asrs	r3, r3, #31
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <setTimer3+0x30>)
 8001b28:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <setTimer3+0x34>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	66666667 	.word	0x66666667
 8001b40:	2000012c 	.word	0x2000012c
 8001b44:	20000128 	.word	0x20000128

08001b48 <setTimer4>:
void clearTimer3(){
	timer3_counter = 0;
	timer3_flag = 0;
}

void setTimer4(int time){
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	timer4_counter = time/10;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <setTimer4+0x2c>)
 8001b54:	fb82 1203 	smull	r1, r2, r2, r3
 8001b58:	1092      	asrs	r2, r2, #2
 8001b5a:	17db      	asrs	r3, r3, #31
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <setTimer4+0x30>)
 8001b60:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <setTimer4+0x34>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	66666667 	.word	0x66666667
 8001b78:	20000134 	.word	0x20000134
 8001b7c:	20000130 	.word	0x20000130

08001b80 <setTimer5>:
void clearTimer4(){
	timer4_counter = 0;
	timer4_flag = 0;
}

void setTimer5(int time){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	timer5_counter = time/10;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <setTimer5+0x2c>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	1092      	asrs	r2, r2, #2
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <setTimer5+0x30>)
 8001b98:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <setTimer5+0x34>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	66666667 	.word	0x66666667
 8001bb0:	2000013c 	.word	0x2000013c
 8001bb4:	20000138 	.word	0x20000138

08001bb8 <setTimer6>:
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 0;
}

void setTimer6(int time){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	timer6_counter = time/10;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <setTimer6+0x2c>)
 8001bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc8:	1092      	asrs	r2, r2, #2
 8001bca:	17db      	asrs	r3, r3, #31
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <setTimer6+0x30>)
 8001bd0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <setTimer6+0x34>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	66666667 	.word	0x66666667
 8001be8:	20000144 	.word	0x20000144
 8001bec:	20000140 	.word	0x20000140

08001bf0 <setTimer7>:
void clearTimer6(){
	timer6_counter = 0;
	timer6_flag = 0;
}

void setTimer7(int time){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	timer7_counter = time/10;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <setTimer7+0x2c>)
 8001bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8001c00:	1092      	asrs	r2, r2, #2
 8001c02:	17db      	asrs	r3, r3, #31
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <setTimer7+0x30>)
 8001c08:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <setTimer7+0x34>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	66666667 	.word	0x66666667
 8001c20:	2000014c 	.word	0x2000014c
 8001c24:	20000148 	.word	0x20000148

08001c28 <setTimer8>:
void clearTimer7(){
	timer7_counter = 0;
	timer7_flag = 0;
}

void setTimer8(int time){
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	timer8_counter = time/10;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <setTimer8+0x2c>)
 8001c34:	fb82 1203 	smull	r1, r2, r2, r3
 8001c38:	1092      	asrs	r2, r2, #2
 8001c3a:	17db      	asrs	r3, r3, #31
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <setTimer8+0x30>)
 8001c40:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <setTimer8+0x34>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	66666667 	.word	0x66666667
 8001c58:	20000154 	.word	0x20000154
 8001c5c:	20000150 	.word	0x20000150

08001c60 <setTimer9>:
void clearTimer8(){
	timer8_counter = 0;
	timer8_flag = 0;
}

void setTimer9(int time){
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	timer9_counter = time/10;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <setTimer9+0x2c>)
 8001c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c70:	1092      	asrs	r2, r2, #2
 8001c72:	17db      	asrs	r3, r3, #31
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <setTimer9+0x30>)
 8001c78:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <setTimer9+0x34>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	66666667 	.word	0x66666667
 8001c90:	2000015c 	.word	0x2000015c
 8001c94:	20000158 	.word	0x20000158

08001c98 <TimerRun>:
void clearTimer9(){
	timer9_counter = 0;
	timer9_flag = 0;
}

void TimerRun(){
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <TimerRun+0xf8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	dd05      	ble.n	8001cb0 <TimerRun+0x18>
		timer1_counter -= 1;
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <TimerRun+0xf8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <TimerRun+0xf8>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e002      	b.n	8001cb6 <TimerRun+0x1e>
	}
	else{
		timer1_flag = 1;
 8001cb0:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <TimerRun+0xfc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <TimerRun+0x100>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	dd05      	ble.n	8001cca <TimerRun+0x32>
		timer2_counter -= 1;
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <TimerRun+0x100>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <TimerRun+0x100>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e002      	b.n	8001cd0 <TimerRun+0x38>
	}
	else{
		timer2_flag = 1;
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <TimerRun+0x104>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001cd0:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <TimerRun+0x108>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dd05      	ble.n	8001ce4 <TimerRun+0x4c>
		timer3_counter -= 1;
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <TimerRun+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <TimerRun+0x108>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e002      	b.n	8001cea <TimerRun+0x52>
	}
	else{
		timer3_flag = 1;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <TimerRun+0x10c>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001cea:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <TimerRun+0x110>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dd05      	ble.n	8001cfe <TimerRun+0x66>
		timer4_counter -= 1;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <TimerRun+0x110>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <TimerRun+0x110>)
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e002      	b.n	8001d04 <TimerRun+0x6c>
	}
	else{
		timer4_flag = 1;
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <TimerRun+0x114>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <TimerRun+0x118>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dd05      	ble.n	8001d18 <TimerRun+0x80>
		timer5_counter -= 1;
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <TimerRun+0x118>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <TimerRun+0x118>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e002      	b.n	8001d1e <TimerRun+0x86>
	}
	else{
		timer5_flag = 1;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <TimerRun+0x11c>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <TimerRun+0x120>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd05      	ble.n	8001d32 <TimerRun+0x9a>
		timer6_counter -= 1;
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <TimerRun+0x120>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <TimerRun+0x120>)
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e002      	b.n	8001d38 <TimerRun+0xa0>
	}
	else{
		timer6_flag = 1;
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <TimerRun+0x124>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <TimerRun+0x128>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd05      	ble.n	8001d4c <TimerRun+0xb4>
		timer7_counter -= 1;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <TimerRun+0x128>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <TimerRun+0x128>)
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e002      	b.n	8001d52 <TimerRun+0xba>
	}
	else{
		timer7_flag = 1;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <TimerRun+0x12c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0){
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <TimerRun+0x130>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dd05      	ble.n	8001d66 <TimerRun+0xce>
		timer8_counter -= 1;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <TimerRun+0x130>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <TimerRun+0x130>)
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e002      	b.n	8001d6c <TimerRun+0xd4>
	}
	else{
		timer8_flag = 1;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <TimerRun+0x134>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0){
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <TimerRun+0x138>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dd05      	ble.n	8001d80 <TimerRun+0xe8>
		timer9_counter -= 1;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <TimerRun+0x138>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <TimerRun+0x138>)
 8001d7c:	6013      	str	r3, [r2, #0]
	}
	else{
		timer9_flag = 1;
	}
}
 8001d7e:	e002      	b.n	8001d86 <TimerRun+0xee>
		timer9_flag = 1;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <TimerRun+0x13c>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	2000011c 	.word	0x2000011c
 8001d94:	20000118 	.word	0x20000118
 8001d98:	20000124 	.word	0x20000124
 8001d9c:	20000120 	.word	0x20000120
 8001da0:	2000012c 	.word	0x2000012c
 8001da4:	20000128 	.word	0x20000128
 8001da8:	20000134 	.word	0x20000134
 8001dac:	20000130 	.word	0x20000130
 8001db0:	2000013c 	.word	0x2000013c
 8001db4:	20000138 	.word	0x20000138
 8001db8:	20000144 	.word	0x20000144
 8001dbc:	20000140 	.word	0x20000140
 8001dc0:	2000014c 	.word	0x2000014c
 8001dc4:	20000148 	.word	0x20000148
 8001dc8:	20000154 	.word	0x20000154
 8001dcc:	20000150 	.word	0x20000150
 8001dd0:	2000015c 	.word	0x2000015c
 8001dd4:	20000158 	.word	0x20000158

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_MspInit+0x5c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_MspInit+0x5c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_MspInit+0x5c>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_MspInit+0x5c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_MspInit+0x5c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_MspInit+0x5c>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_MspInit+0x60>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_MspInit+0x60>)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000

08001e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d114      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	201c      	movs	r0, #28
 8001e6c:	f000 fa79 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e70:	201c      	movs	r0, #28
 8001e72:	f000 fa92 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e76:	e010      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_TIM_Base_MspInit+0x6c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10b      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_TIM_Base_MspInit+0x68>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40000400 	.word	0x40000400

08001eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_TIM_MspPostInit+0x58>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d117      	bne.n	8001efc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_TIM_MspPostInit+0x5c>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_TIM_MspPostInit+0x5c>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_TIM_MspPostInit+0x5c>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee4:	2340      	movs	r3, #64	; 0x40
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_TIM_MspPostInit+0x60>)
 8001ef8:	f000 fb1a 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010800 	.word	0x40010800

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_UART_MspInit+0x98>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d137      	bne.n	8001fa0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3a:	61d3      	str	r3, [r2, #28]
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f60:	2304      	movs	r3, #4
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f74:	f000 fadc 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f8c:	f000 fad0 	bl	8002530 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2026      	movs	r0, #38	; 0x26
 8001f96:	f000 f9e4 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f9a:	2026      	movs	r0, #38	; 0x26
 8001f9c:	f000 f9fd 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010800 	.word	0x40010800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffa:	f000 f8bf 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM2_IRQHandler+0x10>)
 800200a:	f001 f9fb 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200001b4 	.word	0x200001b4

08002018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART2_IRQHandler+0x10>)
 800201e:	f002 f893 	bl	8004148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200001fc 	.word	0x200001fc

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f002 fc6c 	bl	8004938 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20005000 	.word	0x20005000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000160 	.word	0x20000160
 8002094:	200004c0 	.word	0x200004c0

08002098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	; (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	; (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ca:	f7ff ffe5 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ce:	f002 fc39 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d2:	f7fe ff5f 	bl	8000f94 <main>
  bx lr
 80020d6:	4770      	bx	lr
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80020e0:	08005304 	.word	0x08005304
  ldr r2, =_sbss
 80020e4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80020e8:	200004bc 	.word	0x200004bc

080020ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC1_2_IRQHandler>
	...

080020f0 <HAL_Init>:
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_Init+0x28>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_Init+0x28>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	2003      	movs	r0, #3
 8002102:	f000 f923 	bl	800234c <HAL_NVIC_SetPriorityGrouping>
 8002106:	200f      	movs	r0, #15
 8002108:	f000 f808 	bl	800211c <HAL_InitTick>
 800210c:	f7ff fe64 	bl	8001dd8 <HAL_MspInit>
 8002110:	2300      	movs	r3, #0
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000

0800211c <HAL_InitTick>:
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x54>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x58>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	fbb3 f3f1 	udiv	r3, r3, r1
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f93b 	bl	80023b6 <HAL_SYSTICK_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_InitTick+0x2e>
 8002146:	2301      	movs	r3, #1
 8002148:	e00e      	b.n	8002168 <HAL_InitTick+0x4c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d80a      	bhi.n	8002166 <HAL_InitTick+0x4a>
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f000 f903 	bl	8002362 <HAL_NVIC_SetPriority>
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_InitTick+0x5c>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_InitTick+0x4c>
 8002166:	2301      	movs	r3, #1
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000024 	.word	0x20000024
 8002174:	2000002c 	.word	0x2000002c
 8002178:	20000028 	.word	0x20000028

0800217c <HAL_IncTick>:
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_IncTick+0x1c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_IncTick+0x20>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a03      	ldr	r2, [pc, #12]	; (800219c <HAL_IncTick+0x20>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	2000002c 	.word	0x2000002c
 800219c:	200004a8 	.word	0x200004a8

080021a0 <HAL_GetTick>:
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <HAL_GetTick+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	200004a8 	.word	0x200004a8

080021b4 <__NVIC_SetPriorityGrouping>:
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4906      	ldr	r1, [pc, #24]	; (800224c <__NVIC_EnableIRQ+0x34>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <SysTick_Config>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff90 	bl	8002250 <__NVIC_SetPriority>
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff2d 	bl	80021b4 <__NVIC_SetPriorityGrouping>
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	f7ff ff42 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff90 	bl	80022a4 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5f 	bl	8002250 <__NVIC_SetPriority>
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff35 	bl	8002218 <__NVIC_EnableIRQ>
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DMA_Abort>:
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Abort+0x28>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]
 80023f2:	2301      	movs	r3, #1
 80023f4:	e020      	b.n	8002438 <HAL_DMA_Abort+0x6a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 020e 	bic.w	r2, r2, #14
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2020 	strb.w	r2, [r3, #32]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
	...

08002444 <HAL_DMA_Abort_IT>:
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002456:	2b02      	cmp	r3, #2
 8002458:	d005      	beq.n	8002466 <HAL_DMA_Abort_IT+0x22>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e051      	b.n	800250a <HAL_DMA_Abort_IT+0xc6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 020e 	bic.w	r2, r2, #14
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_DMA_Abort_IT+0xd0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d029      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xa0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <HAL_DMA_Abort_IT+0xd4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x9c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_DMA_Abort_IT+0xd8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01a      	beq.n	80024da <HAL_DMA_Abort_IT+0x96>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_DMA_Abort_IT+0xdc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d012      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x90>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_DMA_Abort_IT+0xe0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00a      	beq.n	80024ce <HAL_DMA_Abort_IT+0x8a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_DMA_Abort_IT+0xe4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d102      	bne.n	80024c8 <HAL_DMA_Abort_IT+0x84>
 80024c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024c6:	e00e      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024cc:	e00b      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d2:	e008      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	e005      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024de:	e002      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024e0:	2310      	movs	r3, #16
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_Abort_IT+0xa2>
 80024e4:	2301      	movs	r3, #1
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_DMA_Abort_IT+0xe8>)
 80024e8:	6053      	str	r3, [r2, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2020 	strb.w	r2, [r3, #32]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_DMA_Abort_IT+0xc6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40020008 	.word	0x40020008
 8002518:	4002001c 	.word	0x4002001c
 800251c:	40020030 	.word	0x40020030
 8002520:	40020044 	.word	0x40020044
 8002524:	40020058 	.word	0x40020058
 8002528:	4002006c 	.word	0x4002006c
 800252c:	40020000 	.word	0x40020000

08002530 <HAL_GPIO_Init>:
 8002530:	b480      	push	{r7}
 8002532:	b08b      	sub	sp, #44	; 0x2c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	e169      	b.n	8002818 <HAL_GPIO_Init+0x2e8>
 8002544:	2201      	movs	r2, #1
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 8158 	bne.w	8002812 <HAL_GPIO_Init+0x2e2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a9a      	ldr	r2, [pc, #616]	; (80027d0 <HAL_GPIO_Init+0x2a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d05e      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 800256c:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2a0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d875      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 8002572:	4a98      	ldr	r2, [pc, #608]	; (80027d4 <HAL_GPIO_Init+0x2a4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d058      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002578:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2a4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d86f      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 800257e:	4a96      	ldr	r2, [pc, #600]	; (80027d8 <HAL_GPIO_Init+0x2a8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d052      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002584:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_GPIO_Init+0x2a8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d869      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 800258a:	4a94      	ldr	r2, [pc, #592]	; (80027dc <HAL_GPIO_Init+0x2ac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d04c      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002590:	4a92      	ldr	r2, [pc, #584]	; (80027dc <HAL_GPIO_Init+0x2ac>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d863      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 8002596:	4a92      	ldr	r2, [pc, #584]	; (80027e0 <HAL_GPIO_Init+0x2b0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d046      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 800259c:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_GPIO_Init+0x2b0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d85d      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d82a      	bhi.n	80025fc <HAL_GPIO_Init+0xcc>
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d859      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <HAL_GPIO_Init+0x80>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	0800262b 	.word	0x0800262b
 80025b4:	08002605 	.word	0x08002605
 80025b8:	08002617 	.word	0x08002617
 80025bc:	08002659 	.word	0x08002659
 80025c0:	0800265f 	.word	0x0800265f
 80025c4:	0800265f 	.word	0x0800265f
 80025c8:	0800265f 	.word	0x0800265f
 80025cc:	0800265f 	.word	0x0800265f
 80025d0:	0800265f 	.word	0x0800265f
 80025d4:	0800265f 	.word	0x0800265f
 80025d8:	0800265f 	.word	0x0800265f
 80025dc:	0800265f 	.word	0x0800265f
 80025e0:	0800265f 	.word	0x0800265f
 80025e4:	0800265f 	.word	0x0800265f
 80025e8:	0800265f 	.word	0x0800265f
 80025ec:	0800265f 	.word	0x0800265f
 80025f0:	0800265f 	.word	0x0800265f
 80025f4:	0800260d 	.word	0x0800260d
 80025f8:	08002621 	.word	0x08002621
 80025fc:	4a79      	ldr	r2, [pc, #484]	; (80027e4 <HAL_GPIO_Init+0x2b4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002602:	e02c      	b.n	800265e <HAL_GPIO_Init+0x12e>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	e029      	b.n	8002660 <HAL_GPIO_Init+0x130>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	3304      	adds	r3, #4
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	e024      	b.n	8002660 <HAL_GPIO_Init+0x130>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	3308      	adds	r3, #8
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	e01f      	b.n	8002660 <HAL_GPIO_Init+0x130>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	330c      	adds	r3, #12
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	e01a      	b.n	8002660 <HAL_GPIO_Init+0x130>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_GPIO_Init+0x108>
 8002632:	2304      	movs	r3, #4
 8002634:	623b      	str	r3, [r7, #32]
 8002636:	e013      	b.n	8002660 <HAL_GPIO_Init+0x130>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_GPIO_Init+0x11c>
 8002640:	2308      	movs	r3, #8
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	e009      	b.n	8002660 <HAL_GPIO_Init+0x130>
 800264c:	2308      	movs	r3, #8
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	e003      	b.n	8002660 <HAL_GPIO_Init+0x130>
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x130>
 800265e:	bf00      	nop
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d801      	bhi.n	800266a <HAL_GPIO_Init+0x13a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	e001      	b.n	800266e <HAL_GPIO_Init+0x13e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d802      	bhi.n	800267c <HAL_GPIO_Init+0x14c>
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	e002      	b.n	8002682 <HAL_GPIO_Init+0x152>
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	3b08      	subs	r3, #8
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	210f      	movs	r1, #15
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	401a      	ands	r2, r3
 8002694:	6a39      	ldr	r1, [r7, #32]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80b1 	beq.w	8002812 <HAL_GPIO_Init+0x2e2>
 80026b0:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a48      	ldr	r2, [pc, #288]	; (80027ec <HAL_GPIO_Init+0x2bc>)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_GPIO_Init+0x2c0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_GPIO_Init+0x1ec>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_GPIO_Init+0x2c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00d      	beq.n	8002718 <HAL_GPIO_Init+0x1e8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3e      	ldr	r2, [pc, #248]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x1e4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_GPIO_Init+0x1e0>
 800270c:	2303      	movs	r3, #3
 800270e:	e006      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002710:	2304      	movs	r3, #4
 8002712:	e004      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002714:	2302      	movs	r3, #2
 8002716:	e002      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 800271c:	2300      	movs	r3, #0
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	f002 0203 	and.w	r2, r2, #3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4093      	lsls	r3, r2
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	492f      	ldr	r1, [pc, #188]	; (80027ec <HAL_GPIO_Init+0x2bc>)
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_GPIO_Init+0x226>
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	492c      	ldr	r1, [pc, #176]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x234>
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	43db      	mvns	r3, r3
 800275e:	4928      	ldr	r1, [pc, #160]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002760:	4013      	ands	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_GPIO_Init+0x24e>
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4922      	ldr	r1, [pc, #136]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x25c>
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	43db      	mvns	r3, r3
 8002786:	491e      	ldr	r1, [pc, #120]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002788:	4013      	ands	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_GPIO_Init+0x276>
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4918      	ldr	r1, [pc, #96]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x284>
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4914      	ldr	r1, [pc, #80]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d021      	beq.n	8002804 <HAL_GPIO_Init+0x2d4>
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e021      	b.n	8002812 <HAL_GPIO_Init+0x2e2>
 80027ce:	bf00      	nop
 80027d0:	10320000 	.word	0x10320000
 80027d4:	10310000 	.word	0x10310000
 80027d8:	10220000 	.word	0x10220000
 80027dc:	10210000 	.word	0x10210000
 80027e0:	10120000 	.word	0x10120000
 80027e4:	10110000 	.word	0x10110000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	40010400 	.word	0x40010400
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_GPIO_Init+0x304>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	43db      	mvns	r3, r3
 800280c:	4909      	ldr	r1, [pc, #36]	; (8002834 <HAL_GPIO_Init+0x304>)
 800280e:	4013      	ands	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f ae8e 	bne.w	8002544 <HAL_GPIO_Init+0x14>
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	372c      	adds	r7, #44	; 0x2c
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_ReadPin>:
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_GPIO_ReadPin+0x1e>
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e001      	b.n	800285a <HAL_GPIO_ReadPin+0x22>
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_GPIO_WritePin>:
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]
 8002872:	4613      	mov	r3, r2
 8002874:	707b      	strb	r3, [r7, #1]
 8002876:	787b      	ldrb	r3, [r7, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_WritePin+0x1e>
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	e003      	b.n	800288c <HAL_GPIO_WritePin+0x26>
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <HAL_RCC_OscConfig>:
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e26c      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x12e>
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00c      	beq.n	80028de <HAL_RCC_OscConfig+0x46>
 80028c4:	4b8f      	ldr	r3, [pc, #572]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d112      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028de:	4b89      	ldr	r3, [pc, #548]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x12c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <HAL_RCC_OscConfig+0x12c>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e246      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x76>
 8002900:	4b80      	ldr	r3, [pc, #512]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b78      	ldr	r3, [pc, #480]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a77      	ldr	r2, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xbc>
 800293a:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002954:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6a      	ldr	r2, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x104>
 8002974:	f7ff fc14 	bl	80021a0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xf6>
 800297c:	f7ff fc10 	bl	80021a0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xf6>
 800298a:	2303      	movs	r3, #3
 800298c:	e1fa      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe4>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
 800299c:	f7ff fc00 	bl	80021a0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x11e>
 80029a4:	f7ff fbfc 	bl	80021a0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x11e>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1e6      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x10c>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
 80029c4:	bf00      	nop
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x202>
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x15e>
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
 80029ea:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
 80029f6:	4b43      	ldr	r3, [pc, #268]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1ba      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1d6>
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f7ff fbb5 	bl	80021a0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
 8002a3a:	f7ff fbb1 	bl	80021a0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e19b      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1a2>
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4927      	ldr	r1, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f7ff fb94 	bl	80021a0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
 8002a7c:	f7ff fb90 	bl	80021a0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e17a      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03a      	beq.n	8002b1c <HAL_RCC_OscConfig+0x284>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x24a>
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f7ff fb74 	bl	80021a0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x236>
 8002abc:	f7ff fb70 	bl	80021a0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x236>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e15a      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x224>
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 fad8 	bl	8003090 <RCC_Delay>
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x284>
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f7ff fb5a 	bl	80021a0 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]
 8002aee:	e00f      	b.n	8002b10 <HAL_RCC_OscConfig+0x278>
 8002af0:	f7ff fb56 	bl	80021a0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_OscConfig+0x278>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e140      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	42420000 	.word	0x42420000
 8002b0c:	42420480 	.word	0x42420480
 8002b10:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e9      	bne.n	8002af0 <HAL_RCC_OscConfig+0x258>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a6 	beq.w	8002c76 <HAL_RCC_OscConfig+0x3de>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
 8002b2e:	4b97      	ldr	r3, [pc, #604]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2be>
 8002b3a:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a93      	ldr	r2, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b91      	ldr	r3, [pc, #580]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
 8002b56:	4b8e      	ldr	r3, [pc, #568]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2fc>
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	f7ff fb17 	bl	80021a0 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
 8002b76:	f7ff fb13 	bl	80021a0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0fd      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2de>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x312>
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x356>
 8002bd4:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a6c      	ldr	r2, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4a69      	ldr	r2, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6213      	str	r3, [r2, #32]
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bee:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a63      	ldr	r2, [pc, #396]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6213      	str	r3, [r2, #32]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3a2>
 8002c0e:	f7ff fac7 	bl	80021a0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x394>
 8002c16:	f7ff fac3 	bl	80021a0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x394>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0ab      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCC_OscConfig+0x37e>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
 8002c3a:	f7ff fab1 	bl	80021a0 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
 8002c42:	f7ff faad 	bl	80021a0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
 8002c54:	2303      	movs	r3, #3
 8002c56:	e095      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3aa>
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3de>
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8081 	beq.w	8002d82 <HAL_RCC_OscConfig+0x4ea>
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d061      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4b8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d146      	bne.n	8002d22 <HAL_RCC_OscConfig+0x48a>
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f7ff fa81 	bl	80021a0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
 8002ca2:	f7ff fa7d 	bl	80021a0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e067      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x40a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	492d      	ldr	r1, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a19      	ldr	r1, [r3, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	430b      	orrs	r3, r1
 8002cee:	4927      	ldr	r1, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f7ff fa51 	bl	80021a0 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x47c>
 8002d02:	f7ff fa4d 	bl	80021a0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x47c>
 8002d10:	2303      	movs	r3, #3
 8002d12:	e037      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46a>
 8002d20:	e02f      	b.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f7ff fa3a 	bl	80021a0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
 8002d30:	f7ff fa36 	bl	80021a0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e020      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x498>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e013      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4e6>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002d82:	2300      	movs	r3, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42420060 	.word	0x42420060

08002d98 <HAL_RCC_ClockConfig>:
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x44>
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x92>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x68>
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfe:	6053      	str	r3, [r2, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x80>
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e16:	6053      	str	r3, [r2, #4]
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	f7ff f98a 	bl	80021a0 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
 8002e90:	f7ff f986 	bl	80021a0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x16e>
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x18e>
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f8e8 	bl	800211c <HAL_InitTick>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	080052b0 	.word	0x080052b0
 8002f64:	20000024 	.word	0x20000024
 8002f68:	20000028 	.word	0x20000028

08002f6c <HAL_RCC_GetSysClockFreq>:
 8002f6c:	b490      	push	{r4, r7}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f74:	1d3c      	adds	r4, r7, #4
 8002f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f7c:	f240 2301 	movw	r3, #513	; 0x201
 8002f80:	803b      	strh	r3, [r7, #0]
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002faa:	e02d      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x9c>
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	e02d      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xa2>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c5b      	lsrs	r3, r3, #17
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fde:	4413      	add	r3, r2
 8002fe0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fea:	fb02 f203 	mul.w	r2, r2, r3
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	e004      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x96>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xa2>
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	bf00      	nop
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc90      	pop	{r4, r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	080052a0 	.word	0x080052a0
 8003020:	40021000 	.word	0x40021000
 8003024:	007a1200 	.word	0x007a1200
 8003028:	003d0900 	.word	0x003d0900

0800302c <HAL_RCC_GetHCLKFreq>:
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_RCC_GetHCLKFreq+0x10>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000024 	.word	0x20000024

08003040 <HAL_RCC_GetPCLK1Freq>:
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
 8003044:	f7ff fff2 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	080052c0 	.word	0x080052c0

08003068 <HAL_RCC_GetPCLK2Freq>:
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
 800306c:	f7ff ffde 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	0adb      	lsrs	r3, r3, #11
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	080052c0 	.word	0x080052c0

08003090 <RCC_Delay>:
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <RCC_Delay+0x34>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <RCC_Delay+0x38>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0a5b      	lsrs	r3, r3, #9
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	bf00      	nop
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f9      	bne.n	80030ac <RCC_Delay+0x1c>
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	20000024 	.word	0x20000024
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_TIM_Base_Init>:
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_TIM_Base_Init+0x12>
 80030da:	2301      	movs	r3, #1
 80030dc:	e041      	b.n	8003162 <HAL_TIM_Base_Init+0x96>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_Base_Init+0x2c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fea2 	bl	8001e3c <HAL_TIM_Base_MspInit>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 fc28 	bl	8003960 <TIM_Base_SetConfig>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003160:	2300      	movs	r3, #0
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_TIM_Base_Start_IT>:
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d001      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e03a      	b.n	80031fa <HAL_TIM_Base_Start_IT+0x8e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIM_Base_Start_IT+0x98>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x58>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x58>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_TIM_Base_Start_IT+0x9c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x58>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_TIM_Base_Start_IT+0xa0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIM_Base_Start_IT+0x7c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d010      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x8c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <HAL_TIM_Base_Start_IT+0x8c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	2300      	movs	r3, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800

08003210 <HAL_TIM_PWM_Init>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_Init+0x12>
 800321e:	2301      	movs	r3, #1
 8003220:	e041      	b.n	80032a6 <HAL_TIM_PWM_Init+0x96>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_PWM_Init+0x2c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f839 	bl	80032ae <HAL_TIM_PWM_MspInit>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 fb86 	bl	8003960 <TIM_Base_SetConfig>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032a4:	2300      	movs	r3, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_TIM_PWM_MspInit>:
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_PWM_Start>:
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x24>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e022      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d109      	bne.n	80032fe <HAL_TIM_PWM_Start+0x3e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e015      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d109      	bne.n	8003318 <HAL_TIM_PWM_Start+0x58>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e008      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_TIM_PWM_Start+0x72>
 800332e:	2301      	movs	r3, #1
 8003330:	e05e      	b.n	80033f0 <HAL_TIM_PWM_Start+0x130>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <HAL_TIM_PWM_Start+0x82>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	e013      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d104      	bne.n	8003352 <HAL_TIM_PWM_Start+0x92>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003350:	e00b      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0xa2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003360:	e003      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd74 	bl	8003e60 <TIM_CCxChannelCmd>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_TIM_PWM_Start+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d107      	bne.n	8003392 <HAL_TIM_PWM_Start+0xd2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_TIM_PWM_Start+0x138>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00e      	beq.n	80033ba <HAL_TIM_PWM_Start+0xfa>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d009      	beq.n	80033ba <HAL_TIM_PWM_Start+0xfa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_TIM_PWM_Start+0x13c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_TIM_PWM_Start+0xfa>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_TIM_PWM_Start+0x140>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d111      	bne.n	80033de <HAL_TIM_PWM_Start+0x11e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d010      	beq.n	80033ee <HAL_TIM_PWM_Start+0x12e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_TIM_PWM_Start+0x12e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <HAL_TIM_IRQHandler>:
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x4a>
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa6f 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x56>
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa62 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa71 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0204 	mvn.w	r2, #4
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	771a      	strb	r2, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x9e>
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa45 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xaa>
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa38 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fa47 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0208 	mvn.w	r2, #8
 80034d8:	611a      	str	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	771a      	strb	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xf2>
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa1b 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xfe>
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa0e 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fa1d 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0210 	mvn.w	r2, #16
 800352c:	611a      	str	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2208      	movs	r2, #8
 8003532:	771a      	strb	r2, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x146>
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9f1 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x152>
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9e4 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f9f3 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fef4 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fce1 	bl	8003f76 <HAL_TIMEx_BreakCallback>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9b7 	bl	800394e <HAL_TIM_TriggerCallback>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0220 	mvn.w	r2, #32
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fcac 	bl	8003f64 <HAL_TIMEx_CommutCallback>
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_PWM_ConfigChannel>:
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800362a:	2302      	movs	r3, #2
 800362c:	e0ac      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x174>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	f200 809f 	bhi.w	800377c <HAL_TIM_PWM_ConfigChannel+0x168>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003679 	.word	0x08003679
 8003648:	0800377d 	.word	0x0800377d
 800364c:	0800377d 	.word	0x0800377d
 8003650:	0800377d 	.word	0x0800377d
 8003654:	080036b9 	.word	0x080036b9
 8003658:	0800377d 	.word	0x0800377d
 800365c:	0800377d 	.word	0x0800377d
 8003660:	0800377d 	.word	0x0800377d
 8003664:	080036fb 	.word	0x080036fb
 8003668:	0800377d 	.word	0x0800377d
 800366c:	0800377d 	.word	0x0800377d
 8003670:	0800377d 	.word	0x0800377d
 8003674:	0800373b 	.word	0x0800373b
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f9d0 	bl	8003a24 <TIM_OC1_SetConfig>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	619a      	str	r2, [r3, #24]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6999      	ldr	r1, [r3, #24]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	619a      	str	r2, [r3, #24]
 80036b6:	e062      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fa16 	bl	8003af0 <TIM_OC2_SetConfig>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d2:	619a      	str	r2, [r3, #24]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	619a      	str	r2, [r3, #24]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	e041      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa5f 	bl	8003bc4 <TIM_OC3_SetConfig>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0208 	orr.w	r2, r2, #8
 8003714:	61da      	str	r2, [r3, #28]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0204 	bic.w	r2, r2, #4
 8003724:	61da      	str	r2, [r3, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69d9      	ldr	r1, [r3, #28]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
 8003738:	e021      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x16a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 faa9 	bl	8003c98 <TIM_OC4_SetConfig>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003754:	61da      	str	r2, [r3, #28]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	61da      	str	r2, [r3, #28]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	e000      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x16a>
 800377c:	bf00      	nop
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003786:	2300      	movs	r3, #0
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_ConfigClockSource>:
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_ConfigClockSource+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0b3      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x180>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e0:	d03e      	beq.n	8003860 <HAL_TIM_ConfigClockSource+0xd0>
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e6:	f200 8087 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	f000 8085 	beq.w	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f6:	d87f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d01a      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0xa2>
 80037fc:	2b70      	cmp	r3, #112	; 0x70
 80037fe:	d87b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d050      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x116>
 8003804:	2b60      	cmp	r3, #96	; 0x60
 8003806:	d877      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d03c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0xf6>
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d873      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d058      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x136>
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d86f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d064      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x156>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d86b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d060      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x156>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d867      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05c      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x156>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d05a      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x156>
 8003830:	e062      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x168>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6899      	ldr	r1, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f000 faee 	bl	8003e22 <TIM_ETR_SetConfig>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e04e      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f000 fad7 	bl	8003e22 <TIM_ETR_SetConfig>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e03b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fa4e 	bl	8003d34 <TIM_TI1_ConfigInputStage>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2150      	movs	r1, #80	; 0x50
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 faa5 	bl	8003dee <TIM_ITRx_SetConfig>
 80038a4:	e02b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 fa6c 	bl	8003d90 <TIM_TI2_ConfigInputStage>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2160      	movs	r1, #96	; 0x60
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa95 	bl	8003dee <TIM_ITRx_SetConfig>
 80038c4:	e01b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 fa2e 	bl	8003d34 <TIM_TI1_ConfigInputStage>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fa85 	bl	8003dee <TIM_ITRx_SetConfig>
 80038e4:	e00b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f000 fa7c 	bl	8003dee <TIM_ITRx_SetConfig>
 80038f6:	e002      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x16e>
 80038fc:	bf00      	nop
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800390e:	2300      	movs	r3, #0
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_PWM_PulseFinishedCallback>:
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_TriggerCallback>:
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <TIM_Base_SetConfig>:
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <TIM_Base_SetConfig+0xbc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <TIM_Base_SetConfig+0xc0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x42>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <TIM_Base_SetConfig+0xbc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <TIM_Base_SetConfig+0xc0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x74>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d103      	bne.n	8003a08 <TIM_Base_SetConfig+0xa8>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <TIM_OC1_SetConfig>:
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0302 	bic.w	r3, r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0x76>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <TIM_OC1_SetConfig+0xa2>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <TIM_OC2_SetConfig>:
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <TIM_OC2_SetConfig+0xd0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC2_SetConfig+0x7c>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <TIM_OC2_SetConfig+0xd0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xac>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00

08003bc4 <TIM_OC3_SetConfig>:
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <TIM_OC3_SetConfig+0xd0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10d      	bne.n	8003c3e <TIM_OC3_SetConfig+0x7a>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <TIM_OC3_SetConfig+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d113      	bne.n	8003c6e <TIM_OC3_SetConfig+0xaa>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00

08003c98 <TIM_OC4_SetConfig>:
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <TIM_OC4_SetConfig+0x98>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d109      	bne.n	8003d0c <TIM_OC4_SetConfig+0x74>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	61da      	str	r2, [r3, #28]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	621a      	str	r2, [r3, #32]
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00

08003d34 <TIM_TI1_ConfigInputStage>:
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0201 	bic.w	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 030a 	bic.w	r3, r3, #10
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	619a      	str	r2, [r3, #24]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_TI2_ConfigInputStage>:
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0210 	bic.w	r2, r3, #16
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	031b      	lsls	r3, r3, #12
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	619a      	str	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	621a      	str	r2, [r3, #32]
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <TIM_ITRx_SetConfig>:
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f043 0307 	orr.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <TIM_ETR_SetConfig>:
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_MasterConfigSynchronization>:
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e046      	b.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800

08003f64 <HAL_TIMEx_CommutCallback>:
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIMEx_BreakCallback>:
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_UART_Init>:
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e03f      	b.n	800401a <HAL_UART_Init+0x92>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x2c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd ffae 	bl	8001f10 <HAL_UART_MspInit>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fc25 	bl	800481c <UART_SetConfig>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff0:	615a      	str	r2, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	2300      	movs	r3, #0
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_UART_Transmit>:
 8004022:	b580      	push	{r7, lr}
 8004024:	b08a      	sub	sp, #40	; 0x28
 8004026:	af02      	add	r7, sp, #8
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	d17c      	bne.n	800413c <HAL_UART_Transmit+0x11a>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Transmit+0x2c>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x30>
 800404e:	2301      	movs	r3, #1
 8004050:	e075      	b.n	800413e <HAL_UART_Transmit+0x11c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_UART_Transmit+0x3e>
 800405c:	2302      	movs	r3, #2
 800405e:	e06e      	b.n	800413e <HAL_UART_Transmit+0x11c>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004076:	f7fe f893 	bl	80021a0 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	849a      	strh	r2, [r3, #36]	; 0x24
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	84da      	strh	r2, [r3, #38]	; 0x26
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d108      	bne.n	80040a4 <HAL_UART_Transmit+0x82>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <HAL_UART_Transmit+0x82>
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e003      	b.n	80040ac <HAL_UART_Transmit+0x8a>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040b4:	e02a      	b.n	800410c <HAL_UART_Transmit+0xea>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa11 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0xae>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e036      	b.n	800413e <HAL_UART_Transmit+0x11c>
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_UART_Transmit+0xcc>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3302      	adds	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e007      	b.n	80040fe <HAL_UART_Transmit+0xdc>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	84da      	strh	r2, [r3, #38]	; 0x26
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1cf      	bne.n	80040b6 <HAL_UART_Transmit+0x94>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f9e1 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_UART_Transmit+0x10e>
 800412c:	2303      	movs	r3, #3
 800412e:	e006      	b.n	800413e <HAL_UART_Transmit+0x11c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_UART_Transmit+0x11c>
 800413c:	2302      	movs	r3, #2
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_UART_IRQHandler>:
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <HAL_UART_IRQHandler+0x52>
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_UART_IRQHandler+0x52>
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_UART_IRQHandler+0x52>
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa99 	bl	80046ca <UART_Receive_IT>
 8004198:	e17b      	b.n	8004492 <HAL_UART_IRQHandler+0x34a>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80b1 	beq.w	8004304 <HAL_UART_IRQHandler+0x1bc>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_UART_IRQHandler+0x70>
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80a6 	beq.w	8004304 <HAL_UART_IRQHandler+0x1bc>
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_UART_IRQHandler+0x90>
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_UART_IRQHandler+0x90>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_UART_IRQHandler+0xb0>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_UART_IRQHandler+0xb0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0202 	orr.w	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_UART_IRQHandler+0xd0>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_UART_IRQHandler+0xd0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00f      	beq.n	8004242 <HAL_UART_IRQHandler+0xfa>
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_UART_IRQHandler+0xee>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_UART_IRQHandler+0xfa>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0208 	orr.w	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 811e 	beq.w	8004488 <HAL_UART_IRQHandler+0x340>
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_UART_IRQHandler+0x11e>
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_UART_IRQHandler+0x11e>
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fa32 	bl	80046ca <UART_Receive_IT>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <HAL_UART_IRQHandler+0x146>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d031      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1aa>
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f974 	bl	800457c <UART_EndRxTransfer>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d023      	beq.n	80042ea <HAL_UART_IRQHandler+0x1a2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b0:	615a      	str	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d013      	beq.n	80042e2 <HAL_UART_IRQHandler+0x19a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4a76      	ldr	r2, [pc, #472]	; (8004498 <HAL_UART_IRQHandler+0x350>)
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe f8bc 	bl	8002444 <HAL_DMA_Abort_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <HAL_UART_IRQHandler+0x1b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
 80042e0:	e00e      	b.n	8004300 <HAL_UART_IRQHandler+0x1b8>
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8ec 	bl	80044c0 <HAL_UART_ErrorCallback>
 80042e8:	e00a      	b.n	8004300 <HAL_UART_IRQHandler+0x1b8>
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8e8 	bl	80044c0 <HAL_UART_ErrorCallback>
 80042f0:	e006      	b.n	8004300 <HAL_UART_IRQHandler+0x1b8>
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8e4 	bl	80044c0 <HAL_UART_ErrorCallback>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
 80042fe:	e0c3      	b.n	8004488 <HAL_UART_IRQHandler+0x340>
 8004300:	bf00      	nop
 8004302:	e0c1      	b.n	8004488 <HAL_UART_IRQHandler+0x340>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	f040 80a1 	bne.w	8004450 <HAL_UART_IRQHandler+0x308>
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 809b 	beq.w	8004450 <HAL_UART_IRQHandler+0x308>
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8095 	beq.w	8004450 <HAL_UART_IRQHandler+0x308>
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04e      	beq.n	80043e8 <HAL_UART_IRQHandler+0x2a0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	823b      	strh	r3, [r7, #16]
 8004354:	8a3b      	ldrh	r3, [r7, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8098 	beq.w	800448c <HAL_UART_IRQHandler+0x344>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004360:	8a3a      	ldrh	r2, [r7, #16]
 8004362:	429a      	cmp	r2, r3
 8004364:	f080 8092 	bcs.w	800448c <HAL_UART_IRQHandler+0x344>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8a3a      	ldrh	r2, [r7, #16]
 800436c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b20      	cmp	r3, #32
 8004376:	d02b      	beq.n	80043d0 <HAL_UART_IRQHandler+0x288>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	615a      	str	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0210 	bic.w	r2, r2, #16
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd ffff 	bl	80023ce <HAL_DMA_Abort>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f876 	bl	80044d2 <HAL_UARTEx_RxEventCallback>
 80043e6:	e051      	b.n	800448c <HAL_UART_IRQHandler+0x344>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	827b      	strh	r3, [r7, #18]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d047      	beq.n	8004490 <HAL_UART_IRQHandler+0x348>
 8004400:	8a7b      	ldrh	r3, [r7, #18]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d044      	beq.n	8004490 <HAL_UART_IRQHandler+0x348>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	615a      	str	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0210 	bic.w	r2, r2, #16
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	8a7b      	ldrh	r3, [r7, #18]
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f842 	bl	80044d2 <HAL_UARTEx_RxEventCallback>
 800444e:	e01f      	b.n	8004490 <HAL_UART_IRQHandler+0x348>
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_UART_IRQHandler+0x324>
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_UART_IRQHandler+0x324>
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8c9 	bl	80045fc <UART_Transmit_IT>
 800446a:	e012      	b.n	8004492 <HAL_UART_IRQHandler+0x34a>
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_UART_IRQHandler+0x34a>
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x34a>
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f90a 	bl	800469a <UART_EndTransmit_IT>
 8004486:	e004      	b.n	8004492 <HAL_UART_IRQHandler+0x34a>
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_UART_IRQHandler+0x34a>
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_UART_IRQHandler+0x34a>
 8004490:	bf00      	nop
 8004492:	3728      	adds	r7, #40	; 0x28
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	080045d5 	.word	0x080045d5

0800449c <HAL_UART_TxCpltCallback>:
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_UART_RxCpltCallback>:
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_UART_ErrorCallback>:
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr

080044d2 <HAL_UARTEx_RxEventCallback>:
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	807b      	strh	r3, [r7, #2]
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <UART_WaitOnFlagUntilTimeout>:
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	71fb      	strb	r3, [r7, #7]
 80044f8:	e02c      	b.n	8004554 <UART_WaitOnFlagUntilTimeout+0x6c>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d028      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <UART_WaitOnFlagUntilTimeout+0x30>
 8004508:	f7fd fe4a 	bl	80021a0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d21d      	bcs.n	8004554 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	615a      	str	r2, [r3, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004550:	2303      	movs	r3, #3
 8004552:	e00f      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0x8c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	d0c3      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x12>
 8004572:	2300      	movs	r3, #0
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_EndRxTransfer>:
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	615a      	str	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <UART_EndRxTransfer+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0210 	bic.w	r2, r2, #16
 80045ba:	60da      	str	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <UART_DMAAbortOnError>:
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	84da      	strh	r2, [r3, #38]	; 0x26
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff ff66 	bl	80044c0 <HAL_UART_ErrorCallback>
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_Transmit_IT>:
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b21      	cmp	r3, #33	; 0x21
 800460e:	d13e      	bne.n	800468e <UART_Transmit_IT+0x92>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d114      	bne.n	8004644 <UART_Transmit_IT+0x48>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d110      	bne.n	8004644 <UART_Transmit_IT+0x48>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]
 8004642:	e008      	b.n	8004656 <UART_Transmit_IT+0x5a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6211      	str	r1, [r2, #32]
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29b      	uxth	r3, r3
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4619      	mov	r1, r3
 8004664:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <UART_Transmit_IT+0x8e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <UART_Transmit_IT+0x94>
 800468e:	2302      	movs	r3, #2
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <UART_EndTransmit_IT>:
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff feee 	bl	800449c <HAL_UART_TxCpltCallback>
 80046c0:	2300      	movs	r3, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_Receive_IT>:
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b22      	cmp	r3, #34	; 0x22
 80046dc:	f040 8099 	bne.w	8004812 <UART_Receive_IT+0x148>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d117      	bne.n	800471a <UART_Receive_IT+0x50>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d113      	bne.n	800471a <UART_Receive_IT+0x50>
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	b29a      	uxth	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
 8004718:	e026      	b.n	8004768 <UART_Receive_IT+0x9e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d007      	beq.n	800473e <UART_Receive_IT+0x74>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <UART_Receive_IT+0x82>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <UART_Receive_IT+0x82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e008      	b.n	800475e <UART_Receive_IT+0x94>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	b2da      	uxtb	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4619      	mov	r1, r3
 8004776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004778:	2b00      	cmp	r3, #0
 800477a:	d148      	bne.n	800480e <UART_Receive_IT+0x144>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0220 	bic.w	r2, r2, #32
 800478a:	60da      	str	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479a:	60da      	str	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	615a      	str	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d123      	bne.n	8004804 <UART_Receive_IT+0x13a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0210 	bic.w	r2, r2, #16
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d10a      	bne.n	80047f6 <UART_Receive_IT+0x12c>
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fe68 	bl	80044d2 <HAL_UARTEx_RxEventCallback>
 8004802:	e002      	b.n	800480a <UART_Receive_IT+0x140>
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fe52 	bl	80044ae <HAL_UART_RxCpltCallback>
 800480a:	2300      	movs	r3, #0
 800480c:	e002      	b.n	8004814 <UART_Receive_IT+0x14a>
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <UART_Receive_IT+0x14a>
 8004812:	2302      	movs	r3, #2
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	611a      	str	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004856:	f023 030c 	bic.w	r3, r3, #12
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	430b      	orrs	r3, r1
 8004862:	60d3      	str	r3, [r2, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	615a      	str	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <UART_SetConfig+0x114>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d103      	bne.n	800488c <UART_SetConfig+0x70>
 8004884:	f7fe fbf0 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	e002      	b.n	8004892 <UART_SetConfig+0x76>
 800488c:	f7fe fbd8 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <UART_SetConfig+0x118>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	0119      	lsls	r1, r3, #4
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <UART_SetConfig+0x118>)
 80048ca:	fba3 0302 	umull	r0, r3, r3, r2
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2064      	movs	r0, #100	; 0x64
 80048d2:	fb00 f303 	mul.w	r3, r0, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	3332      	adds	r3, #50	; 0x32
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <UART_SetConfig+0x118>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e8:	4419      	add	r1, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009a      	lsls	r2, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <UART_SetConfig+0x118>)
 8004902:	fba3 0302 	umull	r0, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	2064      	movs	r0, #100	; 0x64
 800490a:	fb00 f303 	mul.w	r3, r0, r3
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	3332      	adds	r3, #50	; 0x32
 8004914:	4a07      	ldr	r2, [pc, #28]	; (8004934 <UART_SetConfig+0x118>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	440a      	add	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40013800 	.word	0x40013800
 8004934:	51eb851f 	.word	0x51eb851f

08004938 <__errno>:
 8004938:	4b01      	ldr	r3, [pc, #4]	; (8004940 <__errno+0x8>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000030 	.word	0x20000030

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	2600      	movs	r6, #0
 8004948:	4d0c      	ldr	r5, [pc, #48]	; (800497c <__libc_init_array+0x38>)
 800494a:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	f000 fc5c 	bl	8005210 <_init>
 8004958:	2600      	movs	r6, #0
 800495a:	4d0a      	ldr	r5, [pc, #40]	; (8004984 <__libc_init_array+0x40>)
 800495c:	4c0a      	ldr	r4, [pc, #40]	; (8004988 <__libc_init_array+0x44>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	080052fc 	.word	0x080052fc
 8004980:	080052fc 	.word	0x080052fc
 8004984:	080052fc 	.word	0x080052fc
 8004988:	08005300 	.word	0x08005300

0800498c <memset>:
 800498c:	4603      	mov	r3, r0
 800498e:	4402      	add	r2, r0
 8004990:	4293      	cmp	r3, r2
 8004992:	d100      	bne.n	8004996 <memset+0xa>
 8004994:	4770      	bx	lr
 8004996:	f803 1b01 	strb.w	r1, [r3], #1
 800499a:	e7f9      	b.n	8004990 <memset+0x4>

0800499c <siprintf>:
 800499c:	b40e      	push	{r1, r2, r3}
 800499e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a2:	b500      	push	{lr}
 80049a4:	b09c      	sub	sp, #112	; 0x70
 80049a6:	ab1d      	add	r3, sp, #116	; 0x74
 80049a8:	9002      	str	r0, [sp, #8]
 80049aa:	9006      	str	r0, [sp, #24]
 80049ac:	9107      	str	r1, [sp, #28]
 80049ae:	9104      	str	r1, [sp, #16]
 80049b0:	4808      	ldr	r0, [pc, #32]	; (80049d4 <siprintf+0x38>)
 80049b2:	4909      	ldr	r1, [pc, #36]	; (80049d8 <siprintf+0x3c>)
 80049b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b8:	9105      	str	r1, [sp, #20]
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	a902      	add	r1, sp, #8
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f000 f868 	bl	8004a94 <_svfiprintf_r>
 80049c4:	2200      	movs	r2, #0
 80049c6:	9b02      	ldr	r3, [sp, #8]
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	b01c      	add	sp, #112	; 0x70
 80049cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049d0:	b003      	add	sp, #12
 80049d2:	4770      	bx	lr
 80049d4:	20000030 	.word	0x20000030
 80049d8:	ffff0208 	.word	0xffff0208

080049dc <__ssputs_r>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	688e      	ldr	r6, [r1, #8]
 80049e2:	4682      	mov	sl, r0
 80049e4:	429e      	cmp	r6, r3
 80049e6:	460c      	mov	r4, r1
 80049e8:	4690      	mov	r8, r2
 80049ea:	461f      	mov	r7, r3
 80049ec:	d838      	bhi.n	8004a60 <__ssputs_r+0x84>
 80049ee:	898a      	ldrh	r2, [r1, #12]
 80049f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049f4:	d032      	beq.n	8004a5c <__ssputs_r+0x80>
 80049f6:	6825      	ldr	r5, [r4, #0]
 80049f8:	6909      	ldr	r1, [r1, #16]
 80049fa:	3301      	adds	r3, #1
 80049fc:	eba5 0901 	sub.w	r9, r5, r1
 8004a00:	6965      	ldr	r5, [r4, #20]
 8004a02:	444b      	add	r3, r9
 8004a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a0c:	106d      	asrs	r5, r5, #1
 8004a0e:	429d      	cmp	r5, r3
 8004a10:	bf38      	it	cc
 8004a12:	461d      	movcc	r5, r3
 8004a14:	0553      	lsls	r3, r2, #21
 8004a16:	d531      	bpl.n	8004a7c <__ssputs_r+0xa0>
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f000 fb53 	bl	80050c4 <_malloc_r>
 8004a1e:	4606      	mov	r6, r0
 8004a20:	b950      	cbnz	r0, 8004a38 <__ssputs_r+0x5c>
 8004a22:	230c      	movs	r3, #12
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	f8ca 3000 	str.w	r3, [sl]
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	464a      	mov	r2, r9
 8004a3a:	6921      	ldr	r1, [r4, #16]
 8004a3c:	f000 face 	bl	8004fdc <memcpy>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	6126      	str	r6, [r4, #16]
 8004a4e:	444e      	add	r6, r9
 8004a50:	6026      	str	r6, [r4, #0]
 8004a52:	463e      	mov	r6, r7
 8004a54:	6165      	str	r5, [r4, #20]
 8004a56:	eba5 0509 	sub.w	r5, r5, r9
 8004a5a:	60a5      	str	r5, [r4, #8]
 8004a5c:	42be      	cmp	r6, r7
 8004a5e:	d900      	bls.n	8004a62 <__ssputs_r+0x86>
 8004a60:	463e      	mov	r6, r7
 8004a62:	4632      	mov	r2, r6
 8004a64:	4641      	mov	r1, r8
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	f000 fac6 	bl	8004ff8 <memmove>
 8004a6c:	68a3      	ldr	r3, [r4, #8]
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	1b9b      	subs	r3, r3, r6
 8004a72:	4432      	add	r2, r6
 8004a74:	2000      	movs	r0, #0
 8004a76:	60a3      	str	r3, [r4, #8]
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	e7db      	b.n	8004a34 <__ssputs_r+0x58>
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	f000 fb7b 	bl	8005178 <_realloc_r>
 8004a82:	4606      	mov	r6, r0
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d1e1      	bne.n	8004a4c <__ssputs_r+0x70>
 8004a88:	4650      	mov	r0, sl
 8004a8a:	6921      	ldr	r1, [r4, #16]
 8004a8c:	f000 face 	bl	800502c <_free_r>
 8004a90:	e7c7      	b.n	8004a22 <__ssputs_r+0x46>
	...

08004a94 <_svfiprintf_r>:
 8004a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a98:	4698      	mov	r8, r3
 8004a9a:	898b      	ldrh	r3, [r1, #12]
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	b09d      	sub	sp, #116	; 0x74
 8004aa6:	d50e      	bpl.n	8004ac6 <_svfiprintf_r+0x32>
 8004aa8:	690b      	ldr	r3, [r1, #16]
 8004aaa:	b963      	cbnz	r3, 8004ac6 <_svfiprintf_r+0x32>
 8004aac:	2140      	movs	r1, #64	; 0x40
 8004aae:	f000 fb09 	bl	80050c4 <_malloc_r>
 8004ab2:	6028      	str	r0, [r5, #0]
 8004ab4:	6128      	str	r0, [r5, #16]
 8004ab6:	b920      	cbnz	r0, 8004ac2 <_svfiprintf_r+0x2e>
 8004ab8:	230c      	movs	r3, #12
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e0d1      	b.n	8004c66 <_svfiprintf_r+0x1d2>
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	616b      	str	r3, [r5, #20]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aca:	2320      	movs	r3, #32
 8004acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ad0:	2330      	movs	r3, #48	; 0x30
 8004ad2:	f04f 0901 	mov.w	r9, #1
 8004ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c80 <_svfiprintf_r+0x1ec>
 8004ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	469a      	mov	sl, r3
 8004ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aea:	b10a      	cbz	r2, 8004af0 <_svfiprintf_r+0x5c>
 8004aec:	2a25      	cmp	r2, #37	; 0x25
 8004aee:	d1f9      	bne.n	8004ae4 <_svfiprintf_r+0x50>
 8004af0:	ebba 0b04 	subs.w	fp, sl, r4
 8004af4:	d00b      	beq.n	8004b0e <_svfiprintf_r+0x7a>
 8004af6:	465b      	mov	r3, fp
 8004af8:	4622      	mov	r2, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	4638      	mov	r0, r7
 8004afe:	f7ff ff6d 	bl	80049dc <__ssputs_r>
 8004b02:	3001      	adds	r0, #1
 8004b04:	f000 80aa 	beq.w	8004c5c <_svfiprintf_r+0x1c8>
 8004b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b0a:	445a      	add	r2, fp
 8004b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80a2 	beq.w	8004c5c <_svfiprintf_r+0x1c8>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b22:	f10a 0a01 	add.w	sl, sl, #1
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	9307      	str	r3, [sp, #28]
 8004b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b30:	4654      	mov	r4, sl
 8004b32:	2205      	movs	r2, #5
 8004b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b38:	4851      	ldr	r0, [pc, #324]	; (8004c80 <_svfiprintf_r+0x1ec>)
 8004b3a:	f000 fa41 	bl	8004fc0 <memchr>
 8004b3e:	9a04      	ldr	r2, [sp, #16]
 8004b40:	b9d8      	cbnz	r0, 8004b7a <_svfiprintf_r+0xe6>
 8004b42:	06d0      	lsls	r0, r2, #27
 8004b44:	bf44      	itt	mi
 8004b46:	2320      	movmi	r3, #32
 8004b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4c:	0711      	lsls	r1, r2, #28
 8004b4e:	bf44      	itt	mi
 8004b50:	232b      	movmi	r3, #43	; 0x2b
 8004b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b56:	f89a 3000 	ldrb.w	r3, [sl]
 8004b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5c:	d015      	beq.n	8004b8a <_svfiprintf_r+0xf6>
 8004b5e:	4654      	mov	r4, sl
 8004b60:	2000      	movs	r0, #0
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	9a07      	ldr	r2, [sp, #28]
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b6e:	3b30      	subs	r3, #48	; 0x30
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	d94e      	bls.n	8004c12 <_svfiprintf_r+0x17e>
 8004b74:	b1b0      	cbz	r0, 8004ba4 <_svfiprintf_r+0x110>
 8004b76:	9207      	str	r2, [sp, #28]
 8004b78:	e014      	b.n	8004ba4 <_svfiprintf_r+0x110>
 8004b7a:	eba0 0308 	sub.w	r3, r0, r8
 8004b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b82:	4313      	orrs	r3, r2
 8004b84:	46a2      	mov	sl, r4
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	e7d2      	b.n	8004b30 <_svfiprintf_r+0x9c>
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	1d19      	adds	r1, r3, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	9103      	str	r1, [sp, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bfbb      	ittet	lt
 8004b96:	425b      	neglt	r3, r3
 8004b98:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9c:	9307      	strge	r3, [sp, #28]
 8004b9e:	9307      	strlt	r3, [sp, #28]
 8004ba0:	bfb8      	it	lt
 8004ba2:	9204      	strlt	r2, [sp, #16]
 8004ba4:	7823      	ldrb	r3, [r4, #0]
 8004ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba8:	d10c      	bne.n	8004bc4 <_svfiprintf_r+0x130>
 8004baa:	7863      	ldrb	r3, [r4, #1]
 8004bac:	2b2a      	cmp	r3, #42	; 0x2a
 8004bae:	d135      	bne.n	8004c1c <_svfiprintf_r+0x188>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	3402      	adds	r4, #2
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	9203      	str	r2, [sp, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bfb8      	it	lt
 8004bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bc2:	9305      	str	r3, [sp, #20]
 8004bc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c90 <_svfiprintf_r+0x1fc>
 8004bc8:	2203      	movs	r2, #3
 8004bca:	4650      	mov	r0, sl
 8004bcc:	7821      	ldrb	r1, [r4, #0]
 8004bce:	f000 f9f7 	bl	8004fc0 <memchr>
 8004bd2:	b140      	cbz	r0, 8004be6 <_svfiprintf_r+0x152>
 8004bd4:	2340      	movs	r3, #64	; 0x40
 8004bd6:	eba0 000a 	sub.w	r0, r0, sl
 8004bda:	fa03 f000 	lsl.w	r0, r3, r0
 8004bde:	9b04      	ldr	r3, [sp, #16]
 8004be0:	3401      	adds	r4, #1
 8004be2:	4303      	orrs	r3, r0
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bea:	2206      	movs	r2, #6
 8004bec:	4825      	ldr	r0, [pc, #148]	; (8004c84 <_svfiprintf_r+0x1f0>)
 8004bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bf2:	f000 f9e5 	bl	8004fc0 <memchr>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d038      	beq.n	8004c6c <_svfiprintf_r+0x1d8>
 8004bfa:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <_svfiprintf_r+0x1f4>)
 8004bfc:	bb1b      	cbnz	r3, 8004c46 <_svfiprintf_r+0x1b2>
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	3307      	adds	r3, #7
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	3308      	adds	r3, #8
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0c:	4433      	add	r3, r6
 8004c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c10:	e767      	b.n	8004ae2 <_svfiprintf_r+0x4e>
 8004c12:	460c      	mov	r4, r1
 8004c14:	2001      	movs	r0, #1
 8004c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c1a:	e7a5      	b.n	8004b68 <_svfiprintf_r+0xd4>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f04f 0c0a 	mov.w	ip, #10
 8004c22:	4619      	mov	r1, r3
 8004c24:	3401      	adds	r4, #1
 8004c26:	9305      	str	r3, [sp, #20]
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c2e:	3a30      	subs	r2, #48	; 0x30
 8004c30:	2a09      	cmp	r2, #9
 8004c32:	d903      	bls.n	8004c3c <_svfiprintf_r+0x1a8>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0c5      	beq.n	8004bc4 <_svfiprintf_r+0x130>
 8004c38:	9105      	str	r1, [sp, #20]
 8004c3a:	e7c3      	b.n	8004bc4 <_svfiprintf_r+0x130>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	2301      	movs	r3, #1
 8004c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c44:	e7f0      	b.n	8004c28 <_svfiprintf_r+0x194>
 8004c46:	ab03      	add	r3, sp, #12
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <_svfiprintf_r+0x1f8>)
 8004c50:	a904      	add	r1, sp, #16
 8004c52:	f3af 8000 	nop.w
 8004c56:	1c42      	adds	r2, r0, #1
 8004c58:	4606      	mov	r6, r0
 8004c5a:	d1d6      	bne.n	8004c0a <_svfiprintf_r+0x176>
 8004c5c:	89ab      	ldrh	r3, [r5, #12]
 8004c5e:	065b      	lsls	r3, r3, #25
 8004c60:	f53f af2c 	bmi.w	8004abc <_svfiprintf_r+0x28>
 8004c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c66:	b01d      	add	sp, #116	; 0x74
 8004c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6c:	ab03      	add	r3, sp, #12
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	462a      	mov	r2, r5
 8004c72:	4638      	mov	r0, r7
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <_svfiprintf_r+0x1f8>)
 8004c76:	a904      	add	r1, sp, #16
 8004c78:	f000 f87c 	bl	8004d74 <_printf_i>
 8004c7c:	e7eb      	b.n	8004c56 <_svfiprintf_r+0x1c2>
 8004c7e:	bf00      	nop
 8004c80:	080052c8 	.word	0x080052c8
 8004c84:	080052d2 	.word	0x080052d2
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	080049dd 	.word	0x080049dd
 8004c90:	080052ce 	.word	0x080052ce

08004c94 <_printf_common>:
 8004c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	4616      	mov	r6, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	688a      	ldr	r2, [r1, #8]
 8004c9e:	690b      	ldr	r3, [r1, #16]
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfb8      	it	lt
 8004ca6:	4613      	movlt	r3, r2
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cb4:	b10a      	cbz	r2, 8004cba <_printf_common+0x26>
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	0699      	lsls	r1, r3, #26
 8004cbe:	bf42      	ittt	mi
 8004cc0:	6833      	ldrmi	r3, [r6, #0]
 8004cc2:	3302      	addmi	r3, #2
 8004cc4:	6033      	strmi	r3, [r6, #0]
 8004cc6:	6825      	ldr	r5, [r4, #0]
 8004cc8:	f015 0506 	ands.w	r5, r5, #6
 8004ccc:	d106      	bne.n	8004cdc <_printf_common+0x48>
 8004cce:	f104 0a19 	add.w	sl, r4, #25
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	6832      	ldr	r2, [r6, #0]
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dc28      	bgt.n	8004d2e <_printf_common+0x9a>
 8004cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ce0:	1e13      	subs	r3, r2, #0
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	bf18      	it	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	0692      	lsls	r2, r2, #26
 8004cea:	d42d      	bmi.n	8004d48 <_printf_common+0xb4>
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf4:	47c0      	blx	r8
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d020      	beq.n	8004d3c <_printf_common+0xa8>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	68e5      	ldr	r5, [r4, #12]
 8004cfe:	f003 0306 	and.w	r3, r3, #6
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf18      	it	ne
 8004d06:	2500      	movne	r5, #0
 8004d08:	6832      	ldr	r2, [r6, #0]
 8004d0a:	f04f 0600 	mov.w	r6, #0
 8004d0e:	68a3      	ldr	r3, [r4, #8]
 8004d10:	bf08      	it	eq
 8004d12:	1aad      	subeq	r5, r5, r2
 8004d14:	6922      	ldr	r2, [r4, #16]
 8004d16:	bf08      	it	eq
 8004d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfc4      	itt	gt
 8004d20:	1a9b      	subgt	r3, r3, r2
 8004d22:	18ed      	addgt	r5, r5, r3
 8004d24:	341a      	adds	r4, #26
 8004d26:	42b5      	cmp	r5, r6
 8004d28:	d11a      	bne.n	8004d60 <_printf_common+0xcc>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e008      	b.n	8004d40 <_printf_common+0xac>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4652      	mov	r2, sl
 8004d32:	4649      	mov	r1, r9
 8004d34:	4638      	mov	r0, r7
 8004d36:	47c0      	blx	r8
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d103      	bne.n	8004d44 <_printf_common+0xb0>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d44:	3501      	adds	r5, #1
 8004d46:	e7c4      	b.n	8004cd2 <_printf_common+0x3e>
 8004d48:	2030      	movs	r0, #48	; 0x30
 8004d4a:	18e1      	adds	r1, r4, r3
 8004d4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d56:	4422      	add	r2, r4
 8004d58:	3302      	adds	r3, #2
 8004d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d5e:	e7c5      	b.n	8004cec <_printf_common+0x58>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4622      	mov	r2, r4
 8004d64:	4649      	mov	r1, r9
 8004d66:	4638      	mov	r0, r7
 8004d68:	47c0      	blx	r8
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d0e6      	beq.n	8004d3c <_printf_common+0xa8>
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7d9      	b.n	8004d26 <_printf_common+0x92>
	...

08004d74 <_printf_i>:
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	460c      	mov	r4, r1
 8004d7a:	7e27      	ldrb	r7, [r4, #24]
 8004d7c:	4691      	mov	r9, r2
 8004d7e:	2f78      	cmp	r7, #120	; 0x78
 8004d80:	4680      	mov	r8, r0
 8004d82:	469a      	mov	sl, r3
 8004d84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d8a:	d807      	bhi.n	8004d9c <_printf_i+0x28>
 8004d8c:	2f62      	cmp	r7, #98	; 0x62
 8004d8e:	d80a      	bhi.n	8004da6 <_printf_i+0x32>
 8004d90:	2f00      	cmp	r7, #0
 8004d92:	f000 80d9 	beq.w	8004f48 <_printf_i+0x1d4>
 8004d96:	2f58      	cmp	r7, #88	; 0x58
 8004d98:	f000 80a4 	beq.w	8004ee4 <_printf_i+0x170>
 8004d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da4:	e03a      	b.n	8004e1c <_printf_i+0xa8>
 8004da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004daa:	2b15      	cmp	r3, #21
 8004dac:	d8f6      	bhi.n	8004d9c <_printf_i+0x28>
 8004dae:	a001      	add	r0, pc, #4	; (adr r0, 8004db4 <_printf_i+0x40>)
 8004db0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004db4:	08004e0d 	.word	0x08004e0d
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004d9d 	.word	0x08004d9d
 8004dc0:	08004d9d 	.word	0x08004d9d
 8004dc4:	08004d9d 	.word	0x08004d9d
 8004dc8:	08004d9d 	.word	0x08004d9d
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004d9d 	.word	0x08004d9d
 8004dd4:	08004d9d 	.word	0x08004d9d
 8004dd8:	08004d9d 	.word	0x08004d9d
 8004ddc:	08004d9d 	.word	0x08004d9d
 8004de0:	08004f2f 	.word	0x08004f2f
 8004de4:	08004e51 	.word	0x08004e51
 8004de8:	08004f11 	.word	0x08004f11
 8004dec:	08004d9d 	.word	0x08004d9d
 8004df0:	08004d9d 	.word	0x08004d9d
 8004df4:	08004f51 	.word	0x08004f51
 8004df8:	08004d9d 	.word	0x08004d9d
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004d9d 	.word	0x08004d9d
 8004e04:	08004d9d 	.word	0x08004d9d
 8004e08:	08004f19 	.word	0x08004f19
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	600a      	str	r2, [r1, #0]
 8004e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0a4      	b.n	8004f6a <_printf_i+0x1f6>
 8004e20:	6825      	ldr	r5, [r4, #0]
 8004e22:	6808      	ldr	r0, [r1, #0]
 8004e24:	062e      	lsls	r6, r5, #24
 8004e26:	f100 0304 	add.w	r3, r0, #4
 8004e2a:	d50a      	bpl.n	8004e42 <_printf_i+0xce>
 8004e2c:	6805      	ldr	r5, [r0, #0]
 8004e2e:	600b      	str	r3, [r1, #0]
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	da03      	bge.n	8004e3c <_printf_i+0xc8>
 8004e34:	232d      	movs	r3, #45	; 0x2d
 8004e36:	426d      	negs	r5, r5
 8004e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3c:	230a      	movs	r3, #10
 8004e3e:	485e      	ldr	r0, [pc, #376]	; (8004fb8 <_printf_i+0x244>)
 8004e40:	e019      	b.n	8004e76 <_printf_i+0x102>
 8004e42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e46:	6805      	ldr	r5, [r0, #0]
 8004e48:	600b      	str	r3, [r1, #0]
 8004e4a:	bf18      	it	ne
 8004e4c:	b22d      	sxthne	r5, r5
 8004e4e:	e7ef      	b.n	8004e30 <_printf_i+0xbc>
 8004e50:	680b      	ldr	r3, [r1, #0]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	1d18      	adds	r0, r3, #4
 8004e56:	6008      	str	r0, [r1, #0]
 8004e58:	0628      	lsls	r0, r5, #24
 8004e5a:	d501      	bpl.n	8004e60 <_printf_i+0xec>
 8004e5c:	681d      	ldr	r5, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <_printf_i+0xf2>
 8004e60:	0669      	lsls	r1, r5, #25
 8004e62:	d5fb      	bpl.n	8004e5c <_printf_i+0xe8>
 8004e64:	881d      	ldrh	r5, [r3, #0]
 8004e66:	2f6f      	cmp	r7, #111	; 0x6f
 8004e68:	bf0c      	ite	eq
 8004e6a:	2308      	moveq	r3, #8
 8004e6c:	230a      	movne	r3, #10
 8004e6e:	4852      	ldr	r0, [pc, #328]	; (8004fb8 <_printf_i+0x244>)
 8004e70:	2100      	movs	r1, #0
 8004e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e76:	6866      	ldr	r6, [r4, #4]
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	bfa8      	it	ge
 8004e7c:	6821      	ldrge	r1, [r4, #0]
 8004e7e:	60a6      	str	r6, [r4, #8]
 8004e80:	bfa4      	itt	ge
 8004e82:	f021 0104 	bicge.w	r1, r1, #4
 8004e86:	6021      	strge	r1, [r4, #0]
 8004e88:	b90d      	cbnz	r5, 8004e8e <_printf_i+0x11a>
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	d04d      	beq.n	8004f2a <_printf_i+0x1b6>
 8004e8e:	4616      	mov	r6, r2
 8004e90:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e94:	fb03 5711 	mls	r7, r3, r1, r5
 8004e98:	5dc7      	ldrb	r7, [r0, r7]
 8004e9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e9e:	462f      	mov	r7, r5
 8004ea0:	42bb      	cmp	r3, r7
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	d9f4      	bls.n	8004e90 <_printf_i+0x11c>
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d10b      	bne.n	8004ec2 <_printf_i+0x14e>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	07df      	lsls	r7, r3, #31
 8004eae:	d508      	bpl.n	8004ec2 <_printf_i+0x14e>
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	6861      	ldr	r1, [r4, #4]
 8004eb4:	4299      	cmp	r1, r3
 8004eb6:	bfde      	ittt	le
 8004eb8:	2330      	movle	r3, #48	; 0x30
 8004eba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ebe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ec2:	1b92      	subs	r2, r2, r6
 8004ec4:	6122      	str	r2, [r4, #16]
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f8cd a000 	str.w	sl, [sp]
 8004ed0:	aa03      	add	r2, sp, #12
 8004ed2:	f7ff fedf 	bl	8004c94 <_printf_common>
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d14c      	bne.n	8004f74 <_printf_i+0x200>
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	b004      	add	sp, #16
 8004ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee4:	4834      	ldr	r0, [pc, #208]	; (8004fb8 <_printf_i+0x244>)
 8004ee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eea:	680e      	ldr	r6, [r1, #0]
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ef2:	061f      	lsls	r7, r3, #24
 8004ef4:	600e      	str	r6, [r1, #0]
 8004ef6:	d514      	bpl.n	8004f22 <_printf_i+0x1ae>
 8004ef8:	07d9      	lsls	r1, r3, #31
 8004efa:	bf44      	itt	mi
 8004efc:	f043 0320 	orrmi.w	r3, r3, #32
 8004f00:	6023      	strmi	r3, [r4, #0]
 8004f02:	b91d      	cbnz	r5, 8004f0c <_printf_i+0x198>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	e7af      	b.n	8004e70 <_printf_i+0xfc>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	f043 0320 	orr.w	r3, r3, #32
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	2378      	movs	r3, #120	; 0x78
 8004f1a:	4828      	ldr	r0, [pc, #160]	; (8004fbc <_printf_i+0x248>)
 8004f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f20:	e7e3      	b.n	8004eea <_printf_i+0x176>
 8004f22:	065e      	lsls	r6, r3, #25
 8004f24:	bf48      	it	mi
 8004f26:	b2ad      	uxthmi	r5, r5
 8004f28:	e7e6      	b.n	8004ef8 <_printf_i+0x184>
 8004f2a:	4616      	mov	r6, r2
 8004f2c:	e7bb      	b.n	8004ea6 <_printf_i+0x132>
 8004f2e:	680b      	ldr	r3, [r1, #0]
 8004f30:	6826      	ldr	r6, [r4, #0]
 8004f32:	1d1d      	adds	r5, r3, #4
 8004f34:	6960      	ldr	r0, [r4, #20]
 8004f36:	600d      	str	r5, [r1, #0]
 8004f38:	0635      	lsls	r5, r6, #24
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	d501      	bpl.n	8004f42 <_printf_i+0x1ce>
 8004f3e:	6018      	str	r0, [r3, #0]
 8004f40:	e002      	b.n	8004f48 <_printf_i+0x1d4>
 8004f42:	0671      	lsls	r1, r6, #25
 8004f44:	d5fb      	bpl.n	8004f3e <_printf_i+0x1ca>
 8004f46:	8018      	strh	r0, [r3, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4616      	mov	r6, r2
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	e7ba      	b.n	8004ec6 <_printf_i+0x152>
 8004f50:	680b      	ldr	r3, [r1, #0]
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	600a      	str	r2, [r1, #0]
 8004f56:	681e      	ldr	r6, [r3, #0]
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	6862      	ldr	r2, [r4, #4]
 8004f5e:	f000 f82f 	bl	8004fc0 <memchr>
 8004f62:	b108      	cbz	r0, 8004f68 <_printf_i+0x1f4>
 8004f64:	1b80      	subs	r0, r0, r6
 8004f66:	6060      	str	r0, [r4, #4]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	6123      	str	r3, [r4, #16]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f72:	e7a8      	b.n	8004ec6 <_printf_i+0x152>
 8004f74:	4632      	mov	r2, r6
 8004f76:	4649      	mov	r1, r9
 8004f78:	4640      	mov	r0, r8
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	47d0      	blx	sl
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d0ab      	beq.n	8004eda <_printf_i+0x166>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	079b      	lsls	r3, r3, #30
 8004f86:	d413      	bmi.n	8004fb0 <_printf_i+0x23c>
 8004f88:	68e0      	ldr	r0, [r4, #12]
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	4298      	cmp	r0, r3
 8004f8e:	bfb8      	it	lt
 8004f90:	4618      	movlt	r0, r3
 8004f92:	e7a4      	b.n	8004ede <_printf_i+0x16a>
 8004f94:	2301      	movs	r3, #1
 8004f96:	4632      	mov	r2, r6
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	47d0      	blx	sl
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d09b      	beq.n	8004eda <_printf_i+0x166>
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	68e3      	ldr	r3, [r4, #12]
 8004fa6:	9903      	ldr	r1, [sp, #12]
 8004fa8:	1a5b      	subs	r3, r3, r1
 8004faa:	42ab      	cmp	r3, r5
 8004fac:	dcf2      	bgt.n	8004f94 <_printf_i+0x220>
 8004fae:	e7eb      	b.n	8004f88 <_printf_i+0x214>
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	f104 0619 	add.w	r6, r4, #25
 8004fb6:	e7f5      	b.n	8004fa4 <_printf_i+0x230>
 8004fb8:	080052d9 	.word	0x080052d9
 8004fbc:	080052ea 	.word	0x080052ea

08004fc0 <memchr>:
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	b510      	push	{r4, lr}
 8004fc4:	b2c9      	uxtb	r1, r1
 8004fc6:	4402      	add	r2, r0
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	d101      	bne.n	8004fd2 <memchr+0x12>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e003      	b.n	8004fda <memchr+0x1a>
 8004fd2:	7804      	ldrb	r4, [r0, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	428c      	cmp	r4, r1
 8004fd8:	d1f6      	bne.n	8004fc8 <memchr+0x8>
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <memcpy>:
 8004fdc:	440a      	add	r2, r1
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe4:	d100      	bne.n	8004fe8 <memcpy+0xc>
 8004fe6:	4770      	bx	lr
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fee:	4291      	cmp	r1, r2
 8004ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff4:	d1f9      	bne.n	8004fea <memcpy+0xe>
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <memmove>:
 8004ff8:	4288      	cmp	r0, r1
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	eb01 0402 	add.w	r4, r1, r2
 8005000:	d902      	bls.n	8005008 <memmove+0x10>
 8005002:	4284      	cmp	r4, r0
 8005004:	4623      	mov	r3, r4
 8005006:	d807      	bhi.n	8005018 <memmove+0x20>
 8005008:	1e43      	subs	r3, r0, #1
 800500a:	42a1      	cmp	r1, r4
 800500c:	d008      	beq.n	8005020 <memmove+0x28>
 800500e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005016:	e7f8      	b.n	800500a <memmove+0x12>
 8005018:	4601      	mov	r1, r0
 800501a:	4402      	add	r2, r0
 800501c:	428a      	cmp	r2, r1
 800501e:	d100      	bne.n	8005022 <memmove+0x2a>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800502a:	e7f7      	b.n	800501c <memmove+0x24>

0800502c <_free_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	d043      	beq.n	80050bc <_free_r+0x90>
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f0c      	subs	r4, r1, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	18e4      	addlt	r4, r4, r3
 8005040:	f000 f8d0 	bl	80051e4 <__malloc_lock>
 8005044:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <_free_r+0x94>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	4610      	mov	r0, r2
 800504a:	b933      	cbnz	r3, 800505a <_free_r+0x2e>
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	6014      	str	r4, [r2, #0]
 8005050:	4628      	mov	r0, r5
 8005052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005056:	f000 b8cb 	b.w	80051f0 <__malloc_unlock>
 800505a:	42a3      	cmp	r3, r4
 800505c:	d90a      	bls.n	8005074 <_free_r+0x48>
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	1862      	adds	r2, r4, r1
 8005062:	4293      	cmp	r3, r2
 8005064:	bf01      	itttt	eq
 8005066:	681a      	ldreq	r2, [r3, #0]
 8005068:	685b      	ldreq	r3, [r3, #4]
 800506a:	1852      	addeq	r2, r2, r1
 800506c:	6022      	streq	r2, [r4, #0]
 800506e:	6063      	str	r3, [r4, #4]
 8005070:	6004      	str	r4, [r0, #0]
 8005072:	e7ed      	b.n	8005050 <_free_r+0x24>
 8005074:	461a      	mov	r2, r3
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	b10b      	cbz	r3, 800507e <_free_r+0x52>
 800507a:	42a3      	cmp	r3, r4
 800507c:	d9fa      	bls.n	8005074 <_free_r+0x48>
 800507e:	6811      	ldr	r1, [r2, #0]
 8005080:	1850      	adds	r0, r2, r1
 8005082:	42a0      	cmp	r0, r4
 8005084:	d10b      	bne.n	800509e <_free_r+0x72>
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	4401      	add	r1, r0
 800508a:	1850      	adds	r0, r2, r1
 800508c:	4283      	cmp	r3, r0
 800508e:	6011      	str	r1, [r2, #0]
 8005090:	d1de      	bne.n	8005050 <_free_r+0x24>
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4401      	add	r1, r0
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	6053      	str	r3, [r2, #4]
 800509c:	e7d8      	b.n	8005050 <_free_r+0x24>
 800509e:	d902      	bls.n	80050a6 <_free_r+0x7a>
 80050a0:	230c      	movs	r3, #12
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	e7d4      	b.n	8005050 <_free_r+0x24>
 80050a6:	6820      	ldr	r0, [r4, #0]
 80050a8:	1821      	adds	r1, r4, r0
 80050aa:	428b      	cmp	r3, r1
 80050ac:	bf01      	itttt	eq
 80050ae:	6819      	ldreq	r1, [r3, #0]
 80050b0:	685b      	ldreq	r3, [r3, #4]
 80050b2:	1809      	addeq	r1, r1, r0
 80050b4:	6021      	streq	r1, [r4, #0]
 80050b6:	6063      	str	r3, [r4, #4]
 80050b8:	6054      	str	r4, [r2, #4]
 80050ba:	e7c9      	b.n	8005050 <_free_r+0x24>
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000164 	.word	0x20000164

080050c4 <_malloc_r>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	1ccd      	adds	r5, r1, #3
 80050c8:	f025 0503 	bic.w	r5, r5, #3
 80050cc:	3508      	adds	r5, #8
 80050ce:	2d0c      	cmp	r5, #12
 80050d0:	bf38      	it	cc
 80050d2:	250c      	movcc	r5, #12
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	4606      	mov	r6, r0
 80050d8:	db01      	blt.n	80050de <_malloc_r+0x1a>
 80050da:	42a9      	cmp	r1, r5
 80050dc:	d903      	bls.n	80050e6 <_malloc_r+0x22>
 80050de:	230c      	movs	r3, #12
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	2000      	movs	r0, #0
 80050e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e6:	f000 f87d 	bl	80051e4 <__malloc_lock>
 80050ea:	4921      	ldr	r1, [pc, #132]	; (8005170 <_malloc_r+0xac>)
 80050ec:	680a      	ldr	r2, [r1, #0]
 80050ee:	4614      	mov	r4, r2
 80050f0:	b99c      	cbnz	r4, 800511a <_malloc_r+0x56>
 80050f2:	4f20      	ldr	r7, [pc, #128]	; (8005174 <_malloc_r+0xb0>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	b923      	cbnz	r3, 8005102 <_malloc_r+0x3e>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 f862 	bl	80051c4 <_sbrk_r>
 8005100:	6038      	str	r0, [r7, #0]
 8005102:	4629      	mov	r1, r5
 8005104:	4630      	mov	r0, r6
 8005106:	f000 f85d 	bl	80051c4 <_sbrk_r>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	d123      	bne.n	8005156 <_malloc_r+0x92>
 800510e:	230c      	movs	r3, #12
 8005110:	4630      	mov	r0, r6
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f000 f86c 	bl	80051f0 <__malloc_unlock>
 8005118:	e7e3      	b.n	80050e2 <_malloc_r+0x1e>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	1b5b      	subs	r3, r3, r5
 800511e:	d417      	bmi.n	8005150 <_malloc_r+0x8c>
 8005120:	2b0b      	cmp	r3, #11
 8005122:	d903      	bls.n	800512c <_malloc_r+0x68>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	441c      	add	r4, r3
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	e004      	b.n	8005136 <_malloc_r+0x72>
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	42a2      	cmp	r2, r4
 8005130:	bf0c      	ite	eq
 8005132:	600b      	streq	r3, [r1, #0]
 8005134:	6053      	strne	r3, [r2, #4]
 8005136:	4630      	mov	r0, r6
 8005138:	f000 f85a 	bl	80051f0 <__malloc_unlock>
 800513c:	f104 000b 	add.w	r0, r4, #11
 8005140:	1d23      	adds	r3, r4, #4
 8005142:	f020 0007 	bic.w	r0, r0, #7
 8005146:	1ac2      	subs	r2, r0, r3
 8005148:	d0cc      	beq.n	80050e4 <_malloc_r+0x20>
 800514a:	1a1b      	subs	r3, r3, r0
 800514c:	50a3      	str	r3, [r4, r2]
 800514e:	e7c9      	b.n	80050e4 <_malloc_r+0x20>
 8005150:	4622      	mov	r2, r4
 8005152:	6864      	ldr	r4, [r4, #4]
 8005154:	e7cc      	b.n	80050f0 <_malloc_r+0x2c>
 8005156:	1cc4      	adds	r4, r0, #3
 8005158:	f024 0403 	bic.w	r4, r4, #3
 800515c:	42a0      	cmp	r0, r4
 800515e:	d0e3      	beq.n	8005128 <_malloc_r+0x64>
 8005160:	1a21      	subs	r1, r4, r0
 8005162:	4630      	mov	r0, r6
 8005164:	f000 f82e 	bl	80051c4 <_sbrk_r>
 8005168:	3001      	adds	r0, #1
 800516a:	d1dd      	bne.n	8005128 <_malloc_r+0x64>
 800516c:	e7cf      	b.n	800510e <_malloc_r+0x4a>
 800516e:	bf00      	nop
 8005170:	20000164 	.word	0x20000164
 8005174:	20000168 	.word	0x20000168

08005178 <_realloc_r>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	4607      	mov	r7, r0
 800517c:	4614      	mov	r4, r2
 800517e:	460e      	mov	r6, r1
 8005180:	b921      	cbnz	r1, 800518c <_realloc_r+0x14>
 8005182:	4611      	mov	r1, r2
 8005184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005188:	f7ff bf9c 	b.w	80050c4 <_malloc_r>
 800518c:	b922      	cbnz	r2, 8005198 <_realloc_r+0x20>
 800518e:	f7ff ff4d 	bl	800502c <_free_r>
 8005192:	4625      	mov	r5, r4
 8005194:	4628      	mov	r0, r5
 8005196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005198:	f000 f830 	bl	80051fc <_malloc_usable_size_r>
 800519c:	42a0      	cmp	r0, r4
 800519e:	d20f      	bcs.n	80051c0 <_realloc_r+0x48>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4638      	mov	r0, r7
 80051a4:	f7ff ff8e 	bl	80050c4 <_malloc_r>
 80051a8:	4605      	mov	r5, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0f2      	beq.n	8005194 <_realloc_r+0x1c>
 80051ae:	4631      	mov	r1, r6
 80051b0:	4622      	mov	r2, r4
 80051b2:	f7ff ff13 	bl	8004fdc <memcpy>
 80051b6:	4631      	mov	r1, r6
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ff37 	bl	800502c <_free_r>
 80051be:	e7e9      	b.n	8005194 <_realloc_r+0x1c>
 80051c0:	4635      	mov	r5, r6
 80051c2:	e7e7      	b.n	8005194 <_realloc_r+0x1c>

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	2300      	movs	r3, #0
 80051c8:	4d05      	ldr	r5, [pc, #20]	; (80051e0 <_sbrk_r+0x1c>)
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f7fc ff2c 	bl	800202c <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	200004ac 	.word	0x200004ac

080051e4 <__malloc_lock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__malloc_lock+0x8>)
 80051e6:	f000 b811 	b.w	800520c <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	200004b4 	.word	0x200004b4

080051f0 <__malloc_unlock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__malloc_unlock+0x8>)
 80051f2:	f000 b80c 	b.w	800520e <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	200004b4 	.word	0x200004b4

080051fc <_malloc_usable_size_r>:
 80051fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005200:	1f18      	subs	r0, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	bfbc      	itt	lt
 8005206:	580b      	ldrlt	r3, [r1, r0]
 8005208:	18c0      	addlt	r0, r0, r3
 800520a:	4770      	bx	lr

0800520c <__retarget_lock_acquire_recursive>:
 800520c:	4770      	bx	lr

0800520e <__retarget_lock_release_recursive>:
 800520e:	4770      	bx	lr

08005210 <_init>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr

0800521c <_fini>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr
