
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004c00  08004c00  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c00  08004c00  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000094  08004c9c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08004c9c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcc  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  00030e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000346f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950a  00000000  00000000  000353a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee4  00000000  00000000  0004e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2c5  00000000  00000000  0005f78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eaa53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  000eaaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b3c 	.word	0x08004b3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004b3c 	.word	0x08004b3c

0800014c <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
	switch(index){
	case 0:
		return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f001 fff6 	bl	8002164 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
	case 1:
		return HAL_GPIO_ReadPin(A1_MAN_GPIO_Port,A1_MAN_Pin);
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f001 fff0 	bl	8002164 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
	case 2:
		return HAL_GPIO_ReadPin(A2_TUNING_GPIO_Port,A2_TUNING_Pin);
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f001 ffea 	bl	8002164 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
	case 3:
		return HAL_GPIO_ReadPin(A3_SET_GPIO_Port, A3_SET_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f001 ffe4 	bl	8002164 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 80001a0:	2301      	movs	r3, #1
	}
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess1+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	200000bc 	.word	0x200000bc

080001d4 <subKeyProcess2>:

void subKeyProcess2(int index){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <subKeyProcess2+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2101      	movs	r1, #1
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	200000cc 	.word	0x200000cc

080001f4 <getKeyInput>:

void getKeyInput(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e071      	b.n	80002e4 <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <getKeyInput+0x100>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <getKeyInput+0x104>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ff91 	bl	800014c <iKeyInput>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0x100>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	440b      	add	r3, r1
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <getKeyInput+0x108>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4927      	ldr	r1, [pc, #156]	; (80002f4 <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x10c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4923      	ldr	r1, [pc, #140]	; (80002f8 <getKeyInput+0x104>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	440b      	add	r3, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d017      	beq.n	80002a4 <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d125      	bne.n	80002de <getKeyInput+0xea>
					subKeyProcess1(i);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f7ff ff8e 	bl	80001b4 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x110>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a2:	e01c      	b.n	80002de <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0x110>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4915      	ldr	r1, [pc, #84]	; (8000304 <getKeyInput+0x110>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x110>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc0d      	bgt.n	80002de <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x104>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0xe0>
						subKeyProcess2(i);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff80 	bl	80001d4 <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <getKeyInput+0x110>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd8a      	ble.n	8000200 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	200000b8 	.word	0x200000b8
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d901      	bls.n	800031c <is_button_pressed+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e00d      	b.n	8000338 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <is_button_pressed+0x3c>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d106      	bne.n	8000336 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <is_button_pressed+0x3c>)
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed+0x30>
		}
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000bc 	.word	0x200000bc

08000348 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d901      	bls.n	800035c <is_button_pressed_1s+0x14>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	e00d      	b.n	8000378 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <is_button_pressed_1s+0x3c>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <is_button_pressed_1s+0x3c>)
 800036c:	2100      	movs	r1, #0
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000376:	2300      	movs	r3, #0
	}
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	200000cc 	.word	0x200000cc

08000388 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch(status){
 800038c:	4b7b      	ldr	r3, [pc, #492]	; (800057c <fsm_automatic_run+0x1f4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b0c      	cmp	r3, #12
 8000392:	dc21      	bgt.n	80003d8 <fsm_automatic_run+0x50>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f340 80e5 	ble.w	8000564 <fsm_automatic_run+0x1dc>
 800039a:	3b01      	subs	r3, #1
 800039c:	2b0b      	cmp	r3, #11
 800039e:	f200 80e1 	bhi.w	8000564 <fsm_automatic_run+0x1dc>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <fsm_automatic_run+0x20>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	08000407 	.word	0x08000407
 80003ac:	08000457 	.word	0x08000457
 80003b0:	08000565 	.word	0x08000565
 80003b4:	08000565 	.word	0x08000565
 80003b8:	08000565 	.word	0x08000565
 80003bc:	08000565 	.word	0x08000565
 80003c0:	08000565 	.word	0x08000565
 80003c4:	08000565 	.word	0x08000565
 80003c8:	08000565 	.word	0x08000565
 80003cc:	08000565 	.word	0x08000565
 80003d0:	080004b7 	.word	0x080004b7
 80003d4:	08000505 	.word	0x08000505
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	f040 80c3 	bne.w	8000564 <fsm_automatic_run+0x1dc>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80003de:	2003      	movs	r0, #3
 80003e0:	f000 fb54 	bl	8000a8c <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80003e4:	4b66      	ldr	r3, [pc, #408]	; (8000580 <fsm_automatic_run+0x1f8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f8db 	bl	80015a4 <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80003ee:	4b65      	ldr	r3, [pc, #404]	; (8000584 <fsm_automatic_run+0x1fc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 f8f2 	bl	80015dc <setTimer4>
			timer2_flag = 1;
 80003f8:	4b63      	ldr	r3, [pc, #396]	; (8000588 <fsm_automatic_run+0x200>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN1;
 80003fe:	4b5f      	ldr	r3, [pc, #380]	; (800057c <fsm_automatic_run+0x1f4>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

			break;
 8000404:	e0b7      	b.n	8000576 <fsm_automatic_run+0x1ee>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fa46 	bl	8000898 <setRed>
			setGreen(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fac3 	bl	8000998 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff ff78 	bl	8000308 <is_button_pressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00d      	beq.n	800043a <fsm_automatic_run+0xb2>
				status_pedestrian = STOP_LIGHT;
 800041e:	4b5b      	ldr	r3, [pc, #364]	; (800058c <fsm_automatic_run+0x204>)
 8000420:	222d      	movs	r2, #45	; 0x2d
 8000422:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000424:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000428:	f001 f884 	bl	8001534 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800042c:	4b58      	ldr	r3, [pc, #352]	; (8000590 <fsm_automatic_run+0x208>)
 800042e:	2232      	movs	r2, #50	; 0x32
 8000430:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000432:	4b58      	ldr	r3, [pc, #352]	; (8000594 <fsm_automatic_run+0x20c>)
 8000434:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000438:	601a      	str	r2, [r3, #0]
			}


			//SWITCH CASE
			if(timer3_flag){
 800043a:	4b57      	ldr	r3, [pc, #348]	; (8000598 <fsm_automatic_run+0x210>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	f000 8092 	beq.w	8000568 <fsm_automatic_run+0x1e0>
				setTimer3(yellow_time);
 8000444:	4b55      	ldr	r3, [pc, #340]	; (800059c <fsm_automatic_run+0x214>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f001 f8ab 	bl	80015a4 <setTimer3>
				status = AUTO_YELLOW1;
 800044e:	4b4b      	ldr	r3, [pc, #300]	; (800057c <fsm_automatic_run+0x1f4>)
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
			}
			break;
 8000454:	e088      	b.n	8000568 <fsm_automatic_run+0x1e0>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fa1e 	bl	8000898 <setRed>
			setYellow(0);
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fa5b 	bl	8000918 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ff50 	bl	8000308 <is_button_pressed>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00d      	beq.n	800048a <fsm_automatic_run+0x102>
				status_pedestrian =	STOP_LIGHT;
 800046e:	4b47      	ldr	r3, [pc, #284]	; (800058c <fsm_automatic_run+0x204>)
 8000470:	222d      	movs	r2, #45	; 0x2d
 8000472:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000474:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000478:	f001 f85c 	bl	8001534 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800047c:	4b44      	ldr	r3, [pc, #272]	; (8000590 <fsm_automatic_run+0x208>)
 800047e:	2232      	movs	r2, #50	; 0x32
 8000480:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000482:	4b44      	ldr	r3, [pc, #272]	; (8000594 <fsm_automatic_run+0x20c>)
 8000484:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000488:	601a      	str	r2, [r3, #0]
			}
			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 800048a:	4b43      	ldr	r3, [pc, #268]	; (8000598 <fsm_automatic_run+0x210>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d06c      	beq.n	800056c <fsm_automatic_run+0x1e4>
 8000492:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <fsm_automatic_run+0x218>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d068      	beq.n	800056c <fsm_automatic_run+0x1e4>
				setTimer3(red_time);
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <fsm_automatic_run+0x21c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f880 	bl	80015a4 <setTimer3>
				setTimer4(green_time_2);
 80004a4:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <fsm_automatic_run+0x220>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 f897 	bl	80015dc <setTimer4>
				status = AUTO_GREEN2;
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <fsm_automatic_run+0x1f4>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	601a      	str	r2, [r3, #0]
			}

			break;
 80004b4:	e05a      	b.n	800056c <fsm_automatic_run+0x1e4>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 f9ee 	bl	8000898 <setRed>
			setGreen(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f000 fa6b 	bl	8000998 <setGreen>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff20 	bl	8000308 <is_button_pressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00d      	beq.n	80004ea <fsm_automatic_run+0x162>
				status_pedestrian = WALK_LIGHT;
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <fsm_automatic_run+0x204>)
 80004d0:	222e      	movs	r2, #46	; 0x2e
 80004d2:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80004d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80004d8:	f001 f82c 	bl	8001534 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <fsm_automatic_run+0x208>)
 80004de:	2232      	movs	r2, #50	; 0x32
 80004e0:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <fsm_automatic_run+0x20c>)
 80004e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004e8:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <fsm_automatic_run+0x218>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d03e      	beq.n	8000570 <fsm_automatic_run+0x1e8>
				setTimer4(yellow_time_2);
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <fsm_automatic_run+0x224>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f870 	bl	80015dc <setTimer4>
				status = AUTO_YELLOW2;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <fsm_automatic_run+0x1f4>)
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
			}

			break;
 8000502:	e035      	b.n	8000570 <fsm_automatic_run+0x1e8>
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f9c7 	bl	8000898 <setRed>
			setYellow(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fa04 	bl	8000918 <setYellow>
				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff fef9 	bl	8000308 <is_button_pressed>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00d      	beq.n	8000538 <fsm_automatic_run+0x1b0>
				status_pedestrian = WALK_LIGHT;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <fsm_automatic_run+0x204>)
 800051e:	222e      	movs	r2, #46	; 0x2e
 8000520:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000522:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000526:	f001 f805 	bl	8001534 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <fsm_automatic_run+0x208>)
 800052c:	2232      	movs	r2, #50	; 0x32
 800052e:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <fsm_automatic_run+0x20c>)
 8000532:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000536:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <fsm_automatic_run+0x218>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d019      	beq.n	8000574 <fsm_automatic_run+0x1ec>
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <fsm_automatic_run+0x210>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d015      	beq.n	8000574 <fsm_automatic_run+0x1ec>
				setTimer3(green_time);
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <fsm_automatic_run+0x1f8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f829 	bl	80015a4 <setTimer3>
				setTimer4(red_time_2);
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <fsm_automatic_run+0x1fc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f840 	bl	80015dc <setTimer4>
				status = AUTO_GREEN1;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <fsm_automatic_run+0x1f4>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
			}

			break;
 8000562:	e007      	b.n	8000574 <fsm_automatic_run+0x1ec>
		default:
			break;
 8000564:	bf00      	nop
 8000566:	e006      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000568:	bf00      	nop
 800056a:	e004      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 800056c:	bf00      	nop
 800056e:	e002      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <fsm_automatic_run+0x1ee>
			break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000004 	.word	0x20000004
 8000580:	20000014 	.word	0x20000014
 8000584:	20000018 	.word	0x20000018
 8000588:	20000120 	.word	0x20000120
 800058c:	20000008 	.word	0x20000008
 8000590:	20000114 	.word	0x20000114
 8000594:	20000110 	.word	0x20000110
 8000598:	20000128 	.word	0x20000128
 800059c:	20000010 	.word	0x20000010
 80005a0:	20000130 	.word	0x20000130
 80005a4:	2000000c 	.word	0x2000000c
 80005a8:	20000020 	.word	0x20000020
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	switch(status){
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <fsm_manual_run+0x30>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b17      	cmp	r3, #23
 80005ba:	d006      	beq.n	80005ca <fsm_manual_run+0x1a>
 80005bc:	2b17      	cmp	r3, #23
 80005be:	dc06      	bgt.n	80005ce <fsm_manual_run+0x1e>
 80005c0:	2b15      	cmp	r3, #21
 80005c2:	d006      	beq.n	80005d2 <fsm_manual_run+0x22>
 80005c4:	2b16      	cmp	r3, #22
 80005c6:	d006      	beq.n	80005d6 <fsm_manual_run+0x26>

			//SWITCH CASE

			break;
		default:
			break;
 80005c8:	e001      	b.n	80005ce <fsm_manual_run+0x1e>
			break;
 80005ca:	bf00      	nop
 80005cc:	e004      	b.n	80005d8 <fsm_manual_run+0x28>
			break;
 80005ce:	bf00      	nop
 80005d0:	e002      	b.n	80005d8 <fsm_manual_run+0x28>
			break;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <fsm_manual_run+0x28>
			break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000004 	.word	0x20000004

080005e4 <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <fsm_pedestrian_run+0x9c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b2d      	cmp	r3, #45	; 0x2d
 80005ee:	d002      	beq.n	80005f6 <fsm_pedestrian_run+0x12>
 80005f0:	2b2e      	cmp	r3, #46	; 0x2e
 80005f2:	d020      	beq.n	8000636 <fsm_pedestrian_run+0x52>
			}

			break;
		default:

			break;
 80005f4:	e042      	b.n	800067c <fsm_pedestrian_run+0x98>
			setPedestrian(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fa0e 	bl	8000a18 <setPedestrian>
			if(timer1_flag){
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <fsm_pedestrian_run+0xa0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <fsm_pedestrian_run+0x3a>
				status_pedestrian = -1;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <fsm_pedestrian_run+0x9c>)
 8000606:	f04f 32ff 	mov.w	r2, #4294967295
 800060a:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 800060c:	2003      	movs	r0, #3
 800060e:	f000 fa03 	bl	8000a18 <setPedestrian>
				buzzer_freq = 0;
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <fsm_pedestrian_run+0xa4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <fsm_pedestrian_run+0xa8>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2){
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <fsm_pedestrian_run+0xac>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b0b      	cmp	r3, #11
 8000624:	d003      	beq.n	800062e <fsm_pedestrian_run+0x4a>
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <fsm_pedestrian_run+0xac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b0c      	cmp	r3, #12
 800062c:	d123      	bne.n	8000676 <fsm_pedestrian_run+0x92>
				status_pedestrian = WALK_LIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <fsm_pedestrian_run+0x9c>)
 8000630:	222e      	movs	r2, #46	; 0x2e
 8000632:	601a      	str	r2, [r3, #0]
			break;
 8000634:	e01f      	b.n	8000676 <fsm_pedestrian_run+0x92>
			setPedestrian(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f9ee 	bl	8000a18 <setPedestrian>
			if(timer1_flag){
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <fsm_pedestrian_run+0xa0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00c      	beq.n	800065e <fsm_pedestrian_run+0x7a>
				status_pedestrian = -1;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <fsm_pedestrian_run+0x9c>)
 8000646:	f04f 32ff 	mov.w	r2, #4294967295
 800064a:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f9e3 	bl	8000a18 <setPedestrian>
				buzzer_freq = 0;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <fsm_pedestrian_run+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <fsm_pedestrian_run+0xa8>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1){
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <fsm_pedestrian_run+0xac>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d003      	beq.n	800066e <fsm_pedestrian_run+0x8a>
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <fsm_pedestrian_run+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d105      	bne.n	800067a <fsm_pedestrian_run+0x96>
				status_pedestrian = STOP_LIGHT;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <fsm_pedestrian_run+0x9c>)
 8000670:	222d      	movs	r2, #45	; 0x2d
 8000672:	601a      	str	r2, [r3, #0]
			break;
 8000674:	e001      	b.n	800067a <fsm_pedestrian_run+0x96>
			break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <fsm_pedestrian_run+0x98>
			break;
 800067a:	bf00      	nop
	}
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000008 	.word	0x20000008
 8000684:	20000118 	.word	0x20000118
 8000688:	20000114 	.word	0x20000114
 800068c:	20000110 	.word	0x20000110
 8000690:	20000004 	.word	0x20000004

08000694 <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	switch(status){
 8000698:	4b76      	ldr	r3, [pc, #472]	; (8000874 <fsm_tuning_run+0x1e0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b21      	cmp	r3, #33	; 0x21
 800069e:	d04d      	beq.n	800073c <fsm_tuning_run+0xa8>
 80006a0:	2b21      	cmp	r3, #33	; 0x21
 80006a2:	f300 80dd 	bgt.w	8000860 <fsm_tuning_run+0x1cc>
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	d003      	beq.n	80006b2 <fsm_tuning_run+0x1e>
 80006aa:	2b20      	cmp	r3, #32
 80006ac:	f000 808f 	beq.w	80007ce <fsm_tuning_run+0x13a>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 80006b0:	e0d6      	b.n	8000860 <fsm_tuning_run+0x1cc>
			if(is_button_pressed(3)){
 80006b2:	2003      	movs	r0, #3
 80006b4:	f7ff fe28 	bl	8000308 <is_button_pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <fsm_tuning_run+0x34>
				red_time += 1;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <fsm_tuning_run+0x1e4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	4a6c      	ldr	r2, [pc, #432]	; (8000878 <fsm_tuning_run+0x1e4>)
 80006c6:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 80006c8:	2003      	movs	r0, #3
 80006ca:	f7ff fe3d 	bl	8000348 <is_button_pressed_1s>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <fsm_tuning_run+0x4a>
				red_time -= 1;
 80006d4:	4b68      	ldr	r3, [pc, #416]	; (8000878 <fsm_tuning_run+0x1e4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a67      	ldr	r2, [pc, #412]	; (8000878 <fsm_tuning_run+0x1e4>)
 80006dc:	6013      	str	r3, [r2, #0]
			red_time_2 = red_time;
 80006de:	4b66      	ldr	r3, [pc, #408]	; (8000878 <fsm_tuning_run+0x1e4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a66      	ldr	r2, [pc, #408]	; (800087c <fsm_tuning_run+0x1e8>)
 80006e4:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 80006e6:	4b66      	ldr	r3, [pc, #408]	; (8000880 <fsm_tuning_run+0x1ec>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d005      	beq.n	80006fa <fsm_tuning_run+0x66>
				setRed(0);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f8d2 	bl	8000898 <setRed>
				setRed(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 f8cf 	bl	8000898 <setRed>
			if(timer3_flag){
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <fsm_tuning_run+0x1f0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <fsm_tuning_run+0x76>
				status = AUTO_INIT;
 8000702:	4b5c      	ldr	r3, [pc, #368]	; (8000874 <fsm_tuning_run+0x1e0>)
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	601a      	str	r2, [r3, #0]
			break;
 8000708:	e0ac      	b.n	8000864 <fsm_tuning_run+0x1d0>
			else if(is_button_pressed(2)){
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fdfc 	bl	8000308 <is_button_pressed>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <fsm_tuning_run+0x92>
				status = TUNING_YELLOW;
 8000716:	4b57      	ldr	r3, [pc, #348]	; (8000874 <fsm_tuning_run+0x1e0>)
 8000718:	2221      	movs	r2, #33	; 0x21
 800071a:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 800071c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000720:	f000 ff40 	bl	80015a4 <setTimer3>
			break;
 8000724:	e09e      	b.n	8000864 <fsm_tuning_run+0x1d0>
			else if(is_button_pressed(1)){
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fdee 	bl	8000308 <is_button_pressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 8098 	beq.w	8000864 <fsm_tuning_run+0x1d0>
				status = AUTO_INIT;
 8000734:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <fsm_tuning_run+0x1e0>)
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	601a      	str	r2, [r3, #0]
			break;
 800073a:	e093      	b.n	8000864 <fsm_tuning_run+0x1d0>
			if(is_button_pressed(3)){
 800073c:	2003      	movs	r0, #3
 800073e:	f7ff fde3 	bl	8000308 <is_button_pressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <fsm_tuning_run+0xbe>
				yellow_time += 1;
 8000748:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <fsm_tuning_run+0x1f4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a4e      	ldr	r2, [pc, #312]	; (8000888 <fsm_tuning_run+0x1f4>)
 8000750:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 8000752:	2003      	movs	r0, #3
 8000754:	f7ff fdf8 	bl	8000348 <is_button_pressed_1s>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d004      	beq.n	8000768 <fsm_tuning_run+0xd4>
				yellow_time -= 1;
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <fsm_tuning_run+0x1f4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	4a48      	ldr	r2, [pc, #288]	; (8000888 <fsm_tuning_run+0x1f4>)
 8000766:	6013      	str	r3, [r2, #0]
			yellow_time_2 = yellow_time;
 8000768:	4b47      	ldr	r3, [pc, #284]	; (8000888 <fsm_tuning_run+0x1f4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a47      	ldr	r2, [pc, #284]	; (800088c <fsm_tuning_run+0x1f8>)
 800076e:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 8000770:	4b43      	ldr	r3, [pc, #268]	; (8000880 <fsm_tuning_run+0x1ec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <fsm_tuning_run+0xf0>
				setYellow(0);
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f8cd 	bl	8000918 <setYellow>
				setYellow(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f8ca 	bl	8000918 <setYellow>
			if(timer3_flag){
 8000784:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <fsm_tuning_run+0x1f0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d008      	beq.n	800079e <fsm_tuning_run+0x10a>
				setTimer3(green_time);
 800078c:	4b40      	ldr	r3, [pc, #256]	; (8000890 <fsm_tuning_run+0x1fc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ff07 	bl	80015a4 <setTimer3>
				status = AUTO_GREEN2;
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <fsm_tuning_run+0x1e0>)
 8000798:	220b      	movs	r2, #11
 800079a:	601a      	str	r2, [r3, #0]
			break;
 800079c:	e064      	b.n	8000868 <fsm_tuning_run+0x1d4>
			else if(is_button_pressed(2)){
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff fdb2 	bl	8000308 <is_button_pressed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d007      	beq.n	80007ba <fsm_tuning_run+0x126>
				status = TUNING_GREEN;
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <fsm_tuning_run+0x1e0>)
 80007ac:	2220      	movs	r2, #32
 80007ae:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 80007b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007b4:	f000 fef6 	bl	80015a4 <setTimer3>
			break;
 80007b8:	e056      	b.n	8000868 <fsm_tuning_run+0x1d4>
			else if(is_button_pressed(1)){
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fda4 	bl	8000308 <is_button_pressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d050      	beq.n	8000868 <fsm_tuning_run+0x1d4>
				status = AUTO_INIT;
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <fsm_tuning_run+0x1e0>)
 80007c8:	22ff      	movs	r2, #255	; 0xff
 80007ca:	601a      	str	r2, [r3, #0]
			break;
 80007cc:	e04c      	b.n	8000868 <fsm_tuning_run+0x1d4>
			if(is_button_pressed(3)){
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff fd9a 	bl	8000308 <is_button_pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <fsm_tuning_run+0x150>
				green_time += 1;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <fsm_tuning_run+0x1fc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <fsm_tuning_run+0x1fc>)
 80007e2:	6013      	str	r3, [r2, #0]
			if(is_button_pressed_1s(3)){
 80007e4:	2003      	movs	r0, #3
 80007e6:	f7ff fdaf 	bl	8000348 <is_button_pressed_1s>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d004      	beq.n	80007fa <fsm_tuning_run+0x166>
				green_time -= 1;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <fsm_tuning_run+0x1fc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a26      	ldr	r2, [pc, #152]	; (8000890 <fsm_tuning_run+0x1fc>)
 80007f8:	6013      	str	r3, [r2, #0]
			green_time_2 = green_time;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <fsm_tuning_run+0x1fc>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a25      	ldr	r2, [pc, #148]	; (8000894 <fsm_tuning_run+0x200>)
 8000800:	6013      	str	r3, [r2, #0]
			if(timer2_flag){
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <fsm_tuning_run+0x1ec>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <fsm_tuning_run+0x182>
				setGreen(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f8c4 	bl	8000998 <setGreen>
				setGreen(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 f8c1 	bl	8000998 <setGreen>
			if(timer3_flag){
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <fsm_tuning_run+0x1f0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <fsm_tuning_run+0x19c>
				setTimer3(yellow_time);
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <fsm_tuning_run+0x1f4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 febe 	bl	80015a4 <setTimer3>
				status = AUTO_YELLOW2;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <fsm_tuning_run+0x1e0>)
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
			break;
 800082e:	e01d      	b.n	800086c <fsm_tuning_run+0x1d8>
			else if(is_button_pressed(2)){
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff fd69 	bl	8000308 <is_button_pressed>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <fsm_tuning_run+0x1b8>
				status = TUNING_RED;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <fsm_tuning_run+0x1e0>)
 800083e:	221f      	movs	r2, #31
 8000840:	601a      	str	r2, [r3, #0]
				setTimer3(TUNING_TIME);
 8000842:	f242 7010 	movw	r0, #10000	; 0x2710
 8000846:	f000 fead 	bl	80015a4 <setTimer3>
			break;
 800084a:	e00f      	b.n	800086c <fsm_tuning_run+0x1d8>
			else if(is_button_pressed(1)){
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff fd5b 	bl	8000308 <is_button_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d009      	beq.n	800086c <fsm_tuning_run+0x1d8>
				status = AUTO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <fsm_tuning_run+0x1e0>)
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	601a      	str	r2, [r3, #0]
			break;
 800085e:	e005      	b.n	800086c <fsm_tuning_run+0x1d8>
			break;
 8000860:	bf00      	nop
 8000862:	e004      	b.n	800086e <fsm_tuning_run+0x1da>
			break;
 8000864:	bf00      	nop
 8000866:	e002      	b.n	800086e <fsm_tuning_run+0x1da>
			break;
 8000868:	bf00      	nop
 800086a:	e000      	b.n	800086e <fsm_tuning_run+0x1da>
			break;
 800086c:	bf00      	nop
	}
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000004 	.word	0x20000004
 8000878:	2000000c 	.word	0x2000000c
 800087c:	20000018 	.word	0x20000018
 8000880:	20000120 	.word	0x20000120
 8000884:	20000128 	.word	0x20000128
 8000888:	20000010 	.word	0x20000010
 800088c:	2000001c 	.word	0x2000001c
 8000890:	20000014 	.word	0x20000014
 8000894:	20000020 	.word	0x20000020

08000898 <setRed>:
 * Traffic light 2:
 *		Pin 1: D4 – PB5
 *		Pin 2: D5 – PB4
 */

void setRed(int index){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	switch(index){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <setRed+0x16>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d00c      	beq.n	80008c6 <setRed+0x2e>
 80008ac:	e016      	b.n	80008dc <setRed+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <setRed+0x78>)
 80008b6:	f001 fc6c 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <setRed+0x7c>)
 80008c0:	f001 fc67 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 80008c4:	e020      	b.n	8000908 <setRed+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2120      	movs	r1, #32
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <setRed+0x7c>)
 80008cc:	f001 fc61 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <setRed+0x7c>)
 80008d6:	f001 fc5c 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 80008da:	e015      	b.n	8000908 <setRed+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <setRed+0x78>)
 80008e4:	f001 fc55 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2108      	movs	r1, #8
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <setRed+0x7c>)
 80008ee:	f001 fc50 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <setRed+0x7c>)
 80008f8:	f001 fc4b 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <setRed+0x7c>)
 8000902:	f001 fc46 	bl	8002192 <HAL_GPIO_WritePin>

			break;
 8000906:	bf00      	nop
	}
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010800 	.word	0x40010800
 8000914:	40010c00 	.word	0x40010c00

08000918 <setYellow>:

void setYellow(int index){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	switch(index){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <setYellow+0x16>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d00c      	beq.n	8000946 <setYellow+0x2e>
 800092c:	e016      	b.n	800095c <setYellow+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <setYellow+0x78>)
 8000936:	f001 fc2c 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2108      	movs	r1, #8
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <setYellow+0x7c>)
 8000940:	f001 fc27 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 8000944:	e020      	b.n	8000988 <setYellow+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2120      	movs	r1, #32
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <setYellow+0x7c>)
 800094c:	f001 fc21 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <setYellow+0x7c>)
 8000956:	f001 fc1c 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 800095a:	e015      	b.n	8000988 <setYellow+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <setYellow+0x78>)
 8000964:	f001 fc15 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2108      	movs	r1, #8
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <setYellow+0x7c>)
 800096e:	f001 fc10 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <setYellow+0x7c>)
 8000978:	f001 fc0b 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2110      	movs	r1, #16
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <setYellow+0x7c>)
 8000982:	f001 fc06 	bl	8002192 <HAL_GPIO_WritePin>

			break;
 8000986:	bf00      	nop
	}
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00

08000998 <setGreen>:

void setGreen(int index){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	switch(index){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <setGreen+0x16>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d00c      	beq.n	80009c6 <setGreen+0x2e>
 80009ac:	e016      	b.n	80009dc <setGreen+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <setGreen+0x78>)
 80009b6:	f001 fbec 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2108      	movs	r1, #8
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <setGreen+0x7c>)
 80009c0:	f001 fbe7 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 80009c4:	e020      	b.n	8000a08 <setGreen+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <setGreen+0x7c>)
 80009cc:	f001 fbe1 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <setGreen+0x7c>)
 80009d6:	f001 fbdc 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 80009da:	e015      	b.n	8000a08 <setGreen+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <setGreen+0x78>)
 80009e4:	f001 fbd5 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2108      	movs	r1, #8
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <setGreen+0x7c>)
 80009ee:	f001 fbd0 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <setGreen+0x7c>)
 80009f8:	f001 fbcb 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <setGreen+0x7c>)
 8000a02:	f001 fbc6 	bl	8002192 <HAL_GPIO_WritePin>

			break;
 8000a06:	bf00      	nop
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <setPedestrian>:
/*
 * @param: value
 * 			0:	RED
 * 			1: 	GREEN
 */
void setPedestrian(int value){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	switch(value){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <setPedestrian+0x16>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d00d      	beq.n	8000a48 <setPedestrian+0x30>
 8000a2c:	e019      	b.n	8000a62 <setPedestrian+0x4a>
		case 0:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <setPedestrian+0x6c>)
 8000a36:	f001 fbac 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <setPedestrian+0x70>)
 8000a42:	f001 fba6 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 8000a46:	e019      	b.n	8000a7c <setPedestrian+0x64>
		case 1:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <setPedestrian+0x6c>)
 8000a50:	f001 fb9f 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <setPedestrian+0x70>)
 8000a5c:	f001 fb99 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 8000a60:	e00c      	b.n	8000a7c <setPedestrian+0x64>
		default:
			HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <setPedestrian+0x6c>)
 8000a6a:	f001 fb92 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <setPedestrian+0x70>)
 8000a76:	f001 fb8c 	bl	8002192 <HAL_GPIO_WritePin>

			break;
 8000a7a:	bf00      	nop
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	40010800 	.word	0x40010800

08000a8c <clearLED>:

void clearLED(int index){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	switch(index){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <clearLED+0x16>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d00c      	beq.n	8000aba <clearLED+0x2e>
 8000aa0:	e016      	b.n	8000ad0 <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa8:	4816      	ldr	r0, [pc, #88]	; (8000b04 <clearLED+0x78>)
 8000aaa:	f001 fb72 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <clearLED+0x7c>)
 8000ab4:	f001 fb6d 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 8000ab8:	e020      	b.n	8000afc <clearLED+0x70>
		case 1:
			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2120      	movs	r1, #32
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <clearLED+0x7c>)
 8000ac0:	f001 fb67 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <clearLED+0x7c>)
 8000aca:	f001 fb62 	bl	8002192 <HAL_GPIO_WritePin>
			break;
 8000ace:	e015      	b.n	8000afc <clearLED+0x70>
		default:

			HAL_GPIO_WritePin(D2_LED_RED1_GPIO_Port, D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <clearLED+0x78>)
 8000ad8:	f001 fb5b 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D3_LED_GREEN1_GPIO_Port, D3_LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <clearLED+0x7c>)
 8000ae2:	f001 fb56 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_LED_RED2_GPIO_Port, D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <clearLED+0x7c>)
 8000aec:	f001 fb51 	bl	8002192 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D5_LED_GREEN2_GPIO_Port, D5_LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <clearLED+0x7c>)
 8000af6:	f001 fb4c 	bl	8002192 <HAL_GPIO_WritePin>


			break;
 8000afa:	bf00      	nop
	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <sendingUART>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendingUART(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <sendingUART+0x98>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d043      	beq.n	8000ba0 <sendingUART+0x94>
		if(!timer3_flag){
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <sendingUART+0x9c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <sendingUART+0x34>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#", timer3_counter), 1000);
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <sendingUART+0xa0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <sendingUART+0xa4>)
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <sendingUART+0xa8>)
 8000b2a:	f003 fbcd 	bl	80042c8 <siprintf>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	491f      	ldr	r1, [pc, #124]	; (8000bb4 <sendingUART+0xa8>)
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <sendingUART+0xac>)
 8000b3a:	f002 ff08 	bl	800394e <HAL_UART_Transmit>
 8000b3e:	e00b      	b.n	8000b58 <sendingUART+0x4c>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#"), 1000);
 8000b40:	491e      	ldr	r1, [pc, #120]	; (8000bbc <sendingUART+0xb0>)
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <sendingUART+0xa8>)
 8000b44:	f003 fbc0 	bl	80042c8 <siprintf>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	4918      	ldr	r1, [pc, #96]	; (8000bb4 <sendingUART+0xa8>)
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <sendingUART+0xac>)
 8000b54:	f002 fefb 	bl	800394e <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <sendingUART+0xb4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10f      	bne.n	8000b80 <sendingUART+0x74>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#", timer4_counter), 1000);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <sendingUART+0xb8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4918      	ldr	r1, [pc, #96]	; (8000bc8 <sendingUART+0xbc>)
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <sendingUART+0xa8>)
 8000b6a:	f003 fbad 	bl	80042c8 <siprintf>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	490f      	ldr	r1, [pc, #60]	; (8000bb4 <sendingUART+0xa8>)
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <sendingUART+0xac>)
 8000b7a:	f002 fee8 	bl	800394e <HAL_UART_Transmit>
 8000b7e:	e00b      	b.n	8000b98 <sendingUART+0x8c>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#"), 1000);
 8000b80:	4912      	ldr	r1, [pc, #72]	; (8000bcc <sendingUART+0xc0>)
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <sendingUART+0xa8>)
 8000b84:	f003 fba0 	bl	80042c8 <siprintf>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <sendingUART+0xa8>)
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <sendingUART+0xac>)
 8000b94:	f002 fedb 	bl	800394e <HAL_UART_Transmit>
		}
		setTimer2(1000);
 8000b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9c:	f000 fce6 	bl	800156c <setTimer2>
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000120 	.word	0x20000120
 8000ba8:	20000128 	.word	0x20000128
 8000bac:	2000012c 	.word	0x2000012c
 8000bb0:	08004b54 	.word	0x08004b54
 8000bb4:	200000f0 	.word	0x200000f0
 8000bb8:	200001dc 	.word	0x200001dc
 8000bbc:	08004b68 	.word	0x08004b68
 8000bc0:	20000130 	.word	0x20000130
 8000bc4:	20000134 	.word	0x20000134
 8000bc8:	08004b7c 	.word	0x08004b7c
 8000bcc:	08004b90 	.word	0x08004b90

08000bd0 <Buzzer>:

void Buzzer(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	if(status_pedestrian != -1){
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <Buzzer+0x6c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d028      	beq.n	8000c30 <Buzzer+0x60>
		if(timer5_flag){
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <Buzzer+0x70>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d028      	beq.n	8000c38 <Buzzer+0x68>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <Buzzer+0x74>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <Buzzer+0x78>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
			buzzer_freq += 40;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <Buzzer+0x74>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3328      	adds	r3, #40	; 0x28
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <Buzzer+0x74>)
 8000bf8:	6013      	str	r3, [r2, #0]
			buzzer_time -= 40;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <Buzzer+0x7c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3b28      	subs	r3, #40	; 0x28
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <Buzzer+0x7c>)
 8000c02:	6013      	str	r3, [r2, #0]

			if(buzzer_freq >= 1000) buzzer_freq = 1000;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <Buzzer+0x74>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0c:	db03      	blt.n	8000c16 <Buzzer+0x46>
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <Buzzer+0x74>)
 8000c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c14:	601a      	str	r2, [r3, #0]
			if(buzzer_time <= 100)	buzzer_time = 100;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <Buzzer+0x7c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	dc02      	bgt.n	8000c24 <Buzzer+0x54>
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <Buzzer+0x7c>)
 8000c20:	2264      	movs	r2, #100	; 0x64
 8000c22:	601a      	str	r2, [r3, #0]
			setTimer5(buzzer_time);
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <Buzzer+0x7c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fcf3 	bl	8001614 <setTimer5>
		}
	}
	else __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
}
 8000c2e:	e003      	b.n	8000c38 <Buzzer+0x68>
	else __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <Buzzer+0x78>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000138 	.word	0x20000138
 8000c44:	20000114 	.word	0x20000114
 8000c48:	2000014c 	.word	0x2000014c
 8000c4c:	20000110 	.word	0x20000110

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fee2 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f844 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 f970 	bl	8000f40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c60:	f000 f882 	bl	8000d68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c64:	f000 f8cc 	bl	8000e00 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c68:	f000 f940 	bl	8000eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <main+0x74>)
 8000c6e:	f001 ff13 	bl	8002a98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c72:	2100      	movs	r1, #0
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <main+0x78>)
 8000c76:	f001 ffb9 	bl	8002bec <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 8000c7a:	220a      	movs	r2, #10
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <main+0x7c>)
 8000c80:	f000 f9e8 	bl	8001054 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8000c84:	220a      	movs	r2, #10
 8000c86:	2100      	movs	r1, #0
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <main+0x80>)
 8000c8a:	f000 f9e3 	bl	8001054 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000c8e:	220a      	movs	r2, #10
 8000c90:	2100      	movs	r1, #0
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <main+0x84>)
 8000c94:	f000 f9de 	bl	8001054 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000c98:	220a      	movs	r2, #10
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <main+0x88>)
 8000c9e:	f000 f9d9 	bl	8001054 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <main+0x8c>)
 8000ca8:	f000 f9d4 	bl	8001054 <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 8000cac:	220a      	movs	r2, #10
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <main+0x90>)
 8000cb2:	f000 f9cf 	bl	8001054 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000cb6:	f000 fc27 	bl	8001508 <SCH_Dispatch_Tasks>
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1000);
//	  HAL_Delay(1000);

	  sendingUART();
 8000cba:	f7ff ff27 	bl	8000b0c <sendingUART>
	  Buzzer();
 8000cbe:	f7ff ff87 	bl	8000bd0 <Buzzer>
	  SCH_Dispatch_Tasks();
 8000cc2:	e7f8      	b.n	8000cb6 <main+0x66>
 8000cc4:	20000194 	.word	0x20000194
 8000cc8:	2000014c 	.word	0x2000014c
 8000ccc:	0800164d 	.word	0x0800164d
 8000cd0:	080001f5 	.word	0x080001f5
 8000cd4:	08000389 	.word	0x08000389
 8000cd8:	080005b1 	.word	0x080005b1
 8000cdc:	08000695 	.word	0x08000695
 8000ce0:	080005e5 	.word	0x080005e5

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fae0 	bl	80042b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fa4d 	bl	80021c4 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d30:	f000 f98a 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fcb8 	bl	80026c4 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d5a:	f000 f975 	bl	8001048 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d9c:	224f      	movs	r2, #79	; 0x4f
 8000d9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000dae:	f001 fe23 	bl	80029f8 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000db8:	f000 f946 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000dca:	f002 f977 	bl	80030bc <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 f938 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000de6:	f002 fcf5 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000df0:	f000 f92a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000194 	.word	0x20000194

08000e00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <MX_TIM3_Init+0xe8>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e38:	223f      	movs	r2, #63	; 0x3f
 8000e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e58:	f001 fdce 	bl	80029f8 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e62:	f000 f8f1 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e70:	4619      	mov	r1, r3
 8000e72:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e74:	f002 f922 	bl	80030bc <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e7e:	f000 f8e3 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000e84:	f001 fe5a 	bl	8002b3c <HAL_TIM_PWM_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e8e:	f000 f8db 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000ea2:	f002 fc97 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000eac:	f000 f8cc 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb0:	2360      	movs	r3, #96	; 0x60
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000ec8:	f002 f83a 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ed2:	f000 f8b9 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM3_Init+0xe4>)
 8000ed8:	f000 fc7e 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000014c 	.word	0x2000014c
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 fcc6 	bl	80038b4 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f88b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001dc 	.word	0x200001dc
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_GPIO_Init+0xe8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <MX_GPIO_Init+0xec>)
 8000f8c:	f001 f901 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f96:	4826      	ldr	r0, [pc, #152]	; (8001030 <MX_GPIO_Init+0xf0>)
 8000f98:	f001 f8fb 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <MX_GPIO_Init+0xf0>)
 8000fb0:	f000 ff54 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_GPIO_Init+0xf0>)
 8000fc8:	f000 ff48 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_GPIO_Init+0xec>)
 8000fe0:	f000 ff3c 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 8000fe4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <MX_GPIO_Init+0xec>)
 8000ffe:	f000 ff2d 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 8001002:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_GPIO_Init+0xf0>)
 800101c:	f000 ff1e 	bl	8001e5c <HAL_GPIO_Init>

}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40010800 	.word	0x40010800

08001034 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800103c:	f000 fa2c 	bl	8001498 <SCH_Update>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8001054:	b4b0      	push	{r4, r5, r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 8001060:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <SCH_Add_Task+0x24c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b1d      	cmp	r3, #29
 8001066:	f300 81bd 	bgt.w	80013e4 <SCH_Add_Task+0x390>

        if(len == 0){
 800106a:	4b8d      	ldr	r3, [pc, #564]	; (80012a0 <SCH_Add_Task+0x24c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 8001072:	4a8c      	ldr	r2, [pc, #560]	; (80012a4 <SCH_Add_Task+0x250>)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4a8b      	ldr	r2, [pc, #556]	; (80012a8 <SCH_Add_Task+0x254>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	4a88      	ldr	r2, [pc, #544]	; (80012a4 <SCH_Add_Task+0x250>)
 8001084:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <SCH_Add_Task+0x254>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	461a      	mov	r2, r3
 8001092:	4b84      	ldr	r3, [pc, #528]	; (80012a4 <SCH_Add_Task+0x250>)
 8001094:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 8001096:	4b83      	ldr	r3, [pc, #524]	; (80012a4 <SCH_Add_Task+0x250>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 800109c:	4b83      	ldr	r3, [pc, #524]	; (80012ac <SCH_Add_Task+0x258>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e196      	b.n	80013d2 <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 80010a4:	4b81      	ldr	r3, [pc, #516]	; (80012ac <SCH_Add_Task+0x258>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	497e      	ldr	r1, [pc, #504]	; (80012a4 <SCH_Add_Task+0x250>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3304      	adds	r3, #4
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	f0c0 80ba 	bcc.w	8001234 <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 80010c0:	4b7a      	ldr	r3, [pc, #488]	; (80012ac <SCH_Add_Task+0x258>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e002      	b.n	80010ce <SCH_Add_Task+0x7a>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <SCH_Add_Task+0x25c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	da0f      	bge.n	80010f8 <SCH_Add_Task+0xa4>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4a73      	ldr	r2, [pc, #460]	; (80012a8 <SCH_Add_Task+0x254>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	08d9      	lsrs	r1, r3, #3
 80010e2:	4870      	ldr	r0, [pc, #448]	; (80012a4 <SCH_Add_Task+0x250>)
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4403      	add	r3, r0
 80010f0:	3304      	adds	r3, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d2e7      	bcs.n	80010c8 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <SCH_Add_Task+0x25c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d144      	bne.n	800118c <SCH_Add_Task+0x138>
 8001102:	4968      	ldr	r1, [pc, #416]	; (80012a4 <SCH_Add_Task+0x250>)
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3304      	adds	r3, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	429a      	cmp	r2, r3
 8001118:	d338      	bcc.n	800118c <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	4961      	ldr	r1, [pc, #388]	; (80012a4 <SCH_Add_Task+0x250>)
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	495c      	ldr	r1, [pc, #368]	; (80012a8 <SCH_Add_Task+0x254>)
 8001136:	fba1 1303 	umull	r1, r3, r1, r3
 800113a:	08d9      	lsrs	r1, r3, #3
 800113c:	4859      	ldr	r0, [pc, #356]	; (80012a4 <SCH_Add_Task+0x250>)
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4403      	add	r3, r0
 8001148:	3304      	adds	r3, #4
 800114a:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <SCH_Add_Task+0x254>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	08d9      	lsrs	r1, r3, #3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	4608      	mov	r0, r1
 800115c:	4951      	ldr	r1, [pc, #324]	; (80012a4 <SCH_Add_Task+0x250>)
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	3308      	adds	r3, #8
 800116a:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	494c      	ldr	r1, [pc, #304]	; (80012a4 <SCH_Add_Task+0x250>)
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	330c      	adds	r3, #12
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 8001182:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <SCH_Add_Task+0x25c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a49      	ldr	r2, [pc, #292]	; (80012ac <SCH_Add_Task+0x258>)
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e122      	b.n	80013d2 <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <SCH_Add_Task+0x24c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e017      	b.n	80011c4 <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	4842      	ldr	r0, [pc, #264]	; (80012a4 <SCH_Add_Task+0x250>)
 800119a:	6939      	ldr	r1, [r7, #16]
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4418      	add	r0, r3
 80011a6:	493f      	ldr	r1, [pc, #252]	; (80012a4 <SCH_Add_Task+0x250>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	4604      	mov	r4, r0
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dce3      	bgt.n	8001194 <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 80011cc:	4935      	ldr	r1, [pc, #212]	; (80012a4 <SCH_Add_Task+0x250>)
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <SCH_Add_Task+0x254>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	08d9      	lsrs	r1, r3, #3
 80011e8:	482e      	ldr	r0, [pc, #184]	; (80012a4 <SCH_Add_Task+0x250>)
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4403      	add	r3, r0
 80011f6:	3304      	adds	r3, #4
 80011f8:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <SCH_Add_Task+0x254>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	08db      	lsrs	r3, r3, #3
 8001204:	4618      	mov	r0, r3
 8001206:	4927      	ldr	r1, [pc, #156]	; (80012a4 <SCH_Add_Task+0x250>)
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	3308      	adds	r3, #8
 8001216:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001218:	4922      	ldr	r1, [pc, #136]	; (80012a4 <SCH_Add_Task+0x250>)
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 800122c:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <SCH_Add_Task+0x258>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e0ce      	b.n	80013d2 <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <SCH_Add_Task+0x258>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e002      	b.n	8001242 <SCH_Add_Task+0x1ee>
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3b01      	subs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <SCH_Add_Task+0x260>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	dd0f      	ble.n	800126c <SCH_Add_Task+0x218>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <SCH_Add_Task+0x254>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	08d9      	lsrs	r1, r3, #3
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <SCH_Add_Task+0x250>)
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4403      	add	r3, r0
 8001264:	3304      	adds	r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4299      	cmp	r1, r3
 800126a:	d3e7      	bcc.n	800123c <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <SCH_Add_Task+0x260>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	d156      	bne.n	8001324 <SCH_Add_Task+0x2d0>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <SCH_Add_Task+0x254>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	08d9      	lsrs	r1, r3, #3
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <SCH_Add_Task+0x250>)
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4403      	add	r3, r0
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4299      	cmp	r1, r3
 8001294:	d246      	bcs.n	8001324 <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 8001296:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <SCH_Add_Task+0x24c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e024      	b.n	80012e8 <SCH_Add_Task+0x294>
 800129e:	bf00      	nop
 80012a0:	20000484 	.word	0x20000484
 80012a4:	2000022c 	.word	0x2000022c
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	20000228 	.word	0x20000228
 80012b0:	20000220 	.word	0x20000220
 80012b4:	20000224 	.word	0x20000224
                        sTask[j] = sTask[j-1];
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	484c      	ldr	r0, [pc, #304]	; (80013f0 <SCH_Add_Task+0x39c>)
 80012be:	6939      	ldr	r1, [r7, #16]
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4418      	add	r0, r3
 80012ca:	4949      	ldr	r1, [pc, #292]	; (80013f0 <SCH_Add_Task+0x39c>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	4604      	mov	r4, r0
 80012d8:	461d      	mov	r5, r3
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <SCH_Add_Task+0x3a0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dce2      	bgt.n	80012b8 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 80012f2:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <SCH_Add_Task+0x39c>)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <SCH_Add_Task+0x3a4>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <SCH_Add_Task+0x39c>)
 8001304:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a3b      	ldr	r2, [pc, #236]	; (80013f8 <SCH_Add_Task+0x3a4>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	461a      	mov	r2, r3
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <SCH_Add_Task+0x39c>)
 8001314:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <SCH_Add_Task+0x39c>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <SCH_Add_Task+0x3a8>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e056      	b.n	80013d2 <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <SCH_Add_Task+0x3ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e017      	b.n	800135c <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	482f      	ldr	r0, [pc, #188]	; (80013f0 <SCH_Add_Task+0x39c>)
 8001332:	6939      	ldr	r1, [r7, #16]
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4418      	add	r0, r3
 800133e:	492c      	ldr	r1, [pc, #176]	; (80013f0 <SCH_Add_Task+0x39c>)
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	4604      	mov	r4, r0
 800134c:	461d      	mov	r5, r3
 800134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	3b01      	subs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	429a      	cmp	r2, r3
 8001364:	dce2      	bgt.n	800132c <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 800136c:	4920      	ldr	r1, [pc, #128]	; (80013f0 <SCH_Add_Task+0x39c>)
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <SCH_Add_Task+0x3a4>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	08d9      	lsrs	r1, r3, #3
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <SCH_Add_Task+0x39c>)
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4403      	add	r3, r0
 8001396:	3304      	adds	r3, #4
 8001398:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <SCH_Add_Task+0x3a4>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4912      	ldr	r1, [pc, #72]	; (80013f0 <SCH_Add_Task+0x39c>)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3308      	adds	r3, #8
 80013b6:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 80013b8:	490d      	ldr	r1, [pc, #52]	; (80013f0 <SCH_Add_Task+0x39c>)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	330c      	adds	r3, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <SCH_Add_Task+0x3a8>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <SCH_Add_Task+0x3ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <SCH_Add_Task+0x3b0>)
 80013d8:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <SCH_Add_Task+0x3ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <SCH_Add_Task+0x3ac>)
 80013e2:	6013      	str	r3, [r2, #0]

	}

}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2000022c 	.word	0x2000022c
 80013f4:	20000224 	.word	0x20000224
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	20000228 	.word	0x20000228
 8001400:	20000484 	.word	0x20000484
 8001404:	20000220 	.word	0x20000220

08001408 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <SCH_Delete_Then_Add_Task+0x84>)
 8001410:	463c      	mov	r4, r7
 8001412:	461d      	mov	r5, r3
 8001414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e017      	b.n	8001452 <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4819      	ldr	r0, [pc, #100]	; (800148c <SCH_Delete_Then_Add_Task+0x84>)
 8001428:	6979      	ldr	r1, [r7, #20]
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4418      	add	r0, r3
 8001434:	4915      	ldr	r1, [pc, #84]	; (800148c <SCH_Delete_Then_Add_Task+0x84>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	4604      	mov	r4, r0
 8001442:	461d      	mov	r5, r3
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <SCH_Delete_Then_Add_Task+0x88>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3b01      	subs	r3, #1
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	429a      	cmp	r2, r3
 800145c:	dbe1      	blt.n	8001422 <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <SCH_Delete_Then_Add_Task+0x88>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SCH_Delete_Then_Add_Task+0x88>)
 8001466:	6013      	str	r3, [r2, #0]
		tail -= 1;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <SCH_Delete_Then_Add_Task+0x8c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <SCH_Delete_Then_Add_Task+0x8c>)
 8001470:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fde9 	bl	8001054 <SCH_Add_Task>

}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop
 800148c:	2000022c 	.word	0x2000022c
 8001490:	20000484 	.word	0x20000484
 8001494:	20000220 	.word	0x20000220

08001498 <SCH_Update>:


void SCH_Update(void) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 80014a2:	e015      	b.n	80014d0 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 80014a4:	4916      	ldr	r1, [pc, #88]	; (8001500 <SCH_Update+0x68>)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	330c      	adds	r3, #12
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <SCH_Update+0x68>)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	330c      	adds	r3, #12
 80014c8:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 80014d0:	490b      	ldr	r1, [pc, #44]	; (8001500 <SCH_Update+0x68>)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <SCH_Update+0x6c>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d9dc      	bls.n	80014a4 <SCH_Update+0xc>
	}

	counter+=1;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SCH_Update+0x6c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <SCH_Update+0x6c>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000022c 	.word	0x2000022c
 8001504:	200000ec 	.word	0x200000ec

08001508 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 800150c:	e009      	b.n	8001522 <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <SCH_Dispatch_Tasks+0x28>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <SCH_Dispatch_Tasks+0x28>)
 8001516:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SCH_Dispatch_Tasks+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 800151e:	f7ff ff73 	bl	8001408 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <SCH_Dispatch_Tasks+0x28>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f1      	bne.n	800150e <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000022c 	.word	0x2000022c

08001534 <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int time){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	timer1_counter = time/10;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <setTimer1+0x2c>)
 8001540:	fb82 1203 	smull	r1, r2, r2, r3
 8001544:	1092      	asrs	r2, r2, #2
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <setTimer1+0x30>)
 800154c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <setTimer1+0x34>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	66666667 	.word	0x66666667
 8001564:	2000011c 	.word	0x2000011c
 8001568:	20000118 	.word	0x20000118

0800156c <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int time){
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	timer2_counter = time/10;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <setTimer2+0x2c>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1092      	asrs	r2, r2, #2
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <setTimer2+0x30>)
 8001584:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <setTimer2+0x34>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	66666667 	.word	0x66666667
 800159c:	20000124 	.word	0x20000124
 80015a0:	20000120 	.word	0x20000120

080015a4 <setTimer3>:
void clearTimer2(){
	timer2_counter = 0;
	timer2_flag = 0;
}

void setTimer3(int time){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	timer3_counter = time/10;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <setTimer3+0x2c>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1092      	asrs	r2, r2, #2
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <setTimer3+0x30>)
 80015bc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <setTimer3+0x34>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	66666667 	.word	0x66666667
 80015d4:	2000012c 	.word	0x2000012c
 80015d8:	20000128 	.word	0x20000128

080015dc <setTimer4>:
void clearTimer3(){
	timer3_counter = 0;
	timer3_flag = 0;
}

void setTimer4(int time){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	timer4_counter = time/10;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <setTimer4+0x2c>)
 80015e8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ec:	1092      	asrs	r2, r2, #2
 80015ee:	17db      	asrs	r3, r3, #31
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <setTimer4+0x30>)
 80015f4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <setTimer4+0x34>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	66666667 	.word	0x66666667
 800160c:	20000134 	.word	0x20000134
 8001610:	20000130 	.word	0x20000130

08001614 <setTimer5>:
void clearTimer4(){
	timer4_counter = 0;
	timer4_flag = 0;
}

void setTimer5(int time){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	timer5_counter = time/10;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <setTimer5+0x2c>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1092      	asrs	r2, r2, #2
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <setTimer5+0x30>)
 800162c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <setTimer5+0x34>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	66666667 	.word	0x66666667
 8001644:	2000013c 	.word	0x2000013c
 8001648:	20000138 	.word	0x20000138

0800164c <TimerRun>:
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 0;
}

void TimerRun(){
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <TimerRun+0x90>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd05      	ble.n	8001664 <TimerRun+0x18>
		timer1_counter -= 1;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <TimerRun+0x90>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <TimerRun+0x90>)
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e002      	b.n	800166a <TimerRun+0x1e>
	}
	else{
		timer1_flag = 1;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <TimerRun+0x94>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <TimerRun+0x98>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd05      	ble.n	800167e <TimerRun+0x32>
		timer2_counter -= 1;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <TimerRun+0x98>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <TimerRun+0x98>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e002      	b.n	8001684 <TimerRun+0x38>
	}
	else{
		timer2_flag = 1;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <TimerRun+0x9c>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <TimerRun+0xa0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd05      	ble.n	8001698 <TimerRun+0x4c>
		timer3_counter -= 1;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <TimerRun+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <TimerRun+0xa0>)
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e002      	b.n	800169e <TimerRun+0x52>
	}
	else{
		timer3_flag = 1;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <TimerRun+0xa4>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <TimerRun+0xa8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dd05      	ble.n	80016b2 <TimerRun+0x66>
		timer4_counter -= 1;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <TimerRun+0xa8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <TimerRun+0xa8>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e002      	b.n	80016b8 <TimerRun+0x6c>
	}
	else{
		timer4_flag = 1;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <TimerRun+0xac>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <TimerRun+0xb0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dd05      	ble.n	80016cc <TimerRun+0x80>
		timer5_counter -= 1;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <TimerRun+0xb0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <TimerRun+0xb0>)
 80016c8:	6013      	str	r3, [r2, #0]
	}
	else{
		timer5_flag = 1;
	}
}
 80016ca:	e002      	b.n	80016d2 <TimerRun+0x86>
		timer5_flag = 1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <TimerRun+0xb4>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000011c 	.word	0x2000011c
 80016e0:	20000118 	.word	0x20000118
 80016e4:	20000124 	.word	0x20000124
 80016e8:	20000120 	.word	0x20000120
 80016ec:	2000012c 	.word	0x2000012c
 80016f0:	20000128 	.word	0x20000128
 80016f4:	20000134 	.word	0x20000134
 80016f8:	20000130 	.word	0x20000130
 80016fc:	2000013c 	.word	0x2000013c
 8001700:	20000138 	.word	0x20000138

08001704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_MspInit+0x5c>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_MspInit+0x5c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_MspInit+0x5c>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x5c>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x5c>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x5c>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_MspInit+0x60>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_MspInit+0x60>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d114      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201c      	movs	r0, #28
 8001798:	f000 fa79 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800179c:	201c      	movs	r0, #28
 800179e:	f000 fa92 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017a2:	e010      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x6c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40000400 	.word	0x40000400

080017d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_TIM_MspPostInit+0x58>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d117      	bne.n	8001828 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_TIM_MspPostInit+0x5c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_TIM_MspPostInit+0x5c>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_TIM_MspPostInit+0x5c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2302      	movs	r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_TIM_MspPostInit+0x60>)
 8001824:	f000 fb1a 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40000400 	.word	0x40000400
 8001834:	40021000 	.word	0x40021000
 8001838:	40010800 	.word	0x40010800

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_UART_MspInit+0x98>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d137      	bne.n	80018cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	61d3      	str	r3, [r2, #28]
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_UART_MspInit+0x9c>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188c:	2304      	movs	r3, #4
 800188e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <HAL_UART_MspInit+0xa0>)
 80018a0:	f000 fadc 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a4:	2308      	movs	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_UART_MspInit+0xa0>)
 80018b8:	f000 fad0 	bl	8001e5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2026      	movs	r0, #38	; 0x26
 80018c2:	f000 f9e4 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c6:	2026      	movs	r0, #38	; 0x26
 80018c8:	f000 f9fd 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f8bf 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM2_IRQHandler+0x10>)
 8001936:	f001 f9fb 	bl	8002d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000194 	.word	0x20000194

08001944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART2_IRQHandler+0x10>)
 800194a:	f002 f893 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001dc 	.word	0x200001dc

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f002 fc6c 	bl	8004264 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20005000 	.word	0x20005000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	20000140 	.word	0x20000140
 80019c0:	200004a0 	.word	0x200004a0

080019c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	; (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019f6:	f7ff ffe5 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 fc39 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff f927 	bl	8000c50 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001a0c:	08004c08 	.word	0x08004c08
  ldr r2, =_sbss
 8001a10:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001a14:	2000049c 	.word	0x2000049c

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f923 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>
 8001a38:	f7ff fe64 	bl	8001704 <HAL_MspInit>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f93b 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f903 	bl	8001c8e <HAL_NVIC_SetPriority>
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
 8001a92:	2301      	movs	r3, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000024 	.word	0x20000024
 8001aa0:	2000002c 	.word	0x2000002c
 8001aa4:	20000028 	.word	0x20000028

08001aa8 <HAL_IncTick>:
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	2000002c 	.word	0x2000002c
 8001ac8:	20000488 	.word	0x20000488

08001acc <HAL_GetTick>:
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000488 	.word	0x20000488

08001ae0 <__NVIC_SetPriorityGrouping>:
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4906      	ldr	r1, [pc, #24]	; (8001b78 <__NVIC_EnableIRQ+0x34>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Config>:
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff90 	bl	8001b7c <__NVIC_SetPriority>
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff2d 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	f7ff ff42 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff35 	bl	8001b44 <__NVIC_EnableIRQ>
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DMA_Abort>:
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d008      	beq.n	8001d22 <HAL_DMA_Abort+0x28>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2204      	movs	r2, #4
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2020 	strb.w	r2, [r3, #32]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e020      	b.n	8001d64 <HAL_DMA_Abort+0x6a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 020e 	bic.w	r2, r2, #14
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_DMA_Abort_IT>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x22>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e051      	b.n	8001e36 <HAL_DMA_Abort_IT+0xc6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 020e 	bic.w	r2, r2, #14
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_DMA_Abort_IT+0xd0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d029      	beq.n	8001e10 <HAL_DMA_Abort_IT+0xa0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_DMA_Abort_IT+0xd4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d022      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x9c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_DMA_Abort_IT+0xd8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d01a      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x96>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_DMA_Abort_IT+0xdc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x90>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_DMA_Abort_IT+0xe0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00a      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x8a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <HAL_DMA_Abort_IT+0xe4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Abort_IT+0x84>
 8001dee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001df2:	e00e      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df8:	e00b      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfe:	e008      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	e005      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0a:	e002      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	e000      	b.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001e10:	2301      	movs	r3, #1
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_DMA_Abort_IT+0xe8>)
 8001e14:	6053      	str	r3, [r2, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_DMA_Abort_IT+0xc6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40020008 	.word	0x40020008
 8001e44:	4002001c 	.word	0x4002001c
 8001e48:	40020030 	.word	0x40020030
 8001e4c:	40020044 	.word	0x40020044
 8001e50:	40020058 	.word	0x40020058
 8001e54:	4002006c 	.word	0x4002006c
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_GPIO_Init>:
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	e169      	b.n	8002144 <HAL_GPIO_Init+0x2e8>
 8001e70:	2201      	movs	r2, #1
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8158 	bne.w	800213e <HAL_GPIO_Init+0x2e2>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a9a      	ldr	r2, [pc, #616]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d05e      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001e98:	4a98      	ldr	r2, [pc, #608]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d875      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001e9e:	4a98      	ldr	r2, [pc, #608]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d058      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a96      	ldr	r2, [pc, #600]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d86f      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eaa:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d052      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d869      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04c      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d863      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ec2:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d046      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a90      	ldr	r2, [pc, #576]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d85d      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d82a      	bhi.n	8001f28 <HAL_GPIO_Init+0xcc>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d859      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_GPIO_Init+0x80>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f57 	.word	0x08001f57
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08001f43 	.word	0x08001f43
 8001ee8:	08001f85 	.word	0x08001f85
 8001eec:	08001f8b 	.word	0x08001f8b
 8001ef0:	08001f8b 	.word	0x08001f8b
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	08001f8b 	.word	0x08001f8b
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f8b 	.word	0x08001f8b
 8001f04:	08001f8b 	.word	0x08001f8b
 8001f08:	08001f8b 	.word	0x08001f8b
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f8b 	.word	0x08001f8b
 8001f18:	08001f8b 	.word	0x08001f8b
 8001f1c:	08001f8b 	.word	0x08001f8b
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	4a79      	ldr	r2, [pc, #484]	; (8002110 <HAL_GPIO_Init+0x2b4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001f2e:	e02c      	b.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	623b      	str	r3, [r7, #32]
 8001f36:	e029      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	e024      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	3308      	adds	r3, #8
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	e01f      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	330c      	adds	r3, #12
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	e01a      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <HAL_GPIO_Init+0x108>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	623b      	str	r3, [r7, #32]
 8001f62:	e013      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_GPIO_Init+0x11c>
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	e009      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	615a      	str	r2, [r3, #20]
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x130>
 8001f8a:	bf00      	nop
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d801      	bhi.n	8001f96 <HAL_GPIO_Init+0x13a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_Init+0x13e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_GPIO_Init+0x14c>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x152>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3b08      	subs	r3, #8
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80b1 	beq.w	800213e <HAL_GPIO_Init+0x2e2>
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_GPIO_Init+0x2c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <HAL_GPIO_Init+0x2c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <HAL_GPIO_Init+0x2c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <HAL_GPIO_Init+0x2cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1e0>
 8002038:	2303      	movs	r3, #3
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 800203c:	2304      	movs	r3, #4
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002048:	2300      	movs	r3, #0
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	492f      	ldr	r1, [pc, #188]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x226>
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	492c      	ldr	r1, [pc, #176]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x234>
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4928      	ldr	r1, [pc, #160]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x24e>
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x25c>
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	491e      	ldr	r1, [pc, #120]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x276>
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4918      	ldr	r1, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x284>
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4914      	ldr	r1, [pc, #80]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <HAL_GPIO_Init+0x2d4>
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x2e2>
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40011400 	.word	0x40011400
 800212c:	40010400 	.word	0x40010400
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_GPIO_Init+0x304>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	43db      	mvns	r3, r3
 8002138:	4909      	ldr	r1, [pc, #36]	; (8002160 <HAL_GPIO_Init+0x304>)
 800213a:	4013      	ands	r3, r2
 800213c:	60cb      	str	r3, [r1, #12]
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3301      	adds	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	f47f ae8e 	bne.w	8001e70 <HAL_GPIO_Init+0x14>
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	372c      	adds	r7, #44	; 0x2c
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_ReadPin>:
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_GPIO_WritePin>:
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]
 800219e:	4613      	mov	r3, r2
 80021a0:	707b      	strb	r3, [r7, #1]
 80021a2:	787b      	ldrb	r3, [r7, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_WritePin+0x1e>
 80021a8:	887a      	ldrh	r2, [r7, #2]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_WritePin+0x26>
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_RCC_OscConfig>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e26c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x12e>
 80021e4:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x46>
 80021f0:	4b8f      	ldr	r3, [pc, #572]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
 80021fc:	4b8c      	ldr	r3, [pc, #560]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
 800220a:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x12c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x12c>
 800221e:	2301      	movs	r3, #1
 8002220:	e246      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x76>
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7f      	ldr	r2, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b7b      	ldr	r3, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7a      	ldr	r2, [pc, #488]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a77      	ldr	r2, [pc, #476]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xbc>
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a71      	ldr	r2, [pc, #452]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 8002280:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b68      	ldr	r3, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x104>
 80022a0:	f7ff fc14 	bl	8001acc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xf6>
 80022a8:	f7ff fc10 	bl	8001acc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xf6>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1fa      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80022ba:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe4>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 80022c8:	f7ff fc00 	bl	8001acc <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x11e>
 80022d0:	f7ff fbfc 	bl	8001acc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x11e>
 80022de:	2303      	movs	r3, #3
 80022e0:	e1e6      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80022e2:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x10c>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 80022f0:	bf00      	nop
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x202>
 80022fe:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x15e>
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
 8002322:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
 8002336:	2301      	movs	r3, #1
 8002338:	e1ba      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4939      	ldr	r1, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1d6>
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f7ff fbb5 	bl	8001acc <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1b4>
 8002366:	f7ff fbb1 	bl	8001acc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1b4>
 8002374:	2303      	movs	r3, #3
 8002376:	e19b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002378:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x1a2>
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4927      	ldr	r1, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f7ff fb94 	bl	8001acc <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1f6>
 80023a8:	f7ff fb90 	bl	8001acc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1f6>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e17a      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1e4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03a      	beq.n	8002448 <HAL_RCC_OscConfig+0x284>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d019      	beq.n	800240e <HAL_RCC_OscConfig+0x24a>
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f7ff fb74 	bl	8001acc <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x236>
 80023e8:	f7ff fb70 	bl	8001acc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x236>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e15a      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x224>
 8002406:	2001      	movs	r0, #1
 8002408:	f000 fad8 	bl	80029bc <RCC_Delay>
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x284>
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_OscConfig+0x274>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f7ff fb5a 	bl	8001acc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]
 800241a:	e00f      	b.n	800243c <HAL_RCC_OscConfig+0x278>
 800241c:	f7ff fb56 	bl	8001acc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d908      	bls.n	800243c <HAL_RCC_OscConfig+0x278>
 800242a:	2303      	movs	r3, #3
 800242c:	e140      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	42420000 	.word	0x42420000
 8002438:	42420480 	.word	0x42420480
 800243c:	4b9e      	ldr	r3, [pc, #632]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e9      	bne.n	800241c <HAL_RCC_OscConfig+0x258>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a6 	beq.w	80025a2 <HAL_RCC_OscConfig+0x3de>
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	4b97      	ldr	r3, [pc, #604]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_RCC_OscConfig+0x2be>
 8002466:	4b94      	ldr	r3, [pc, #592]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a93      	ldr	r2, [pc, #588]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2fc>
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a8a      	ldr	r2, [pc, #552]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	f7ff fb17 	bl	8001acc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
 80024a2:	f7ff fb13 	bl	8001acc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	; 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0fd      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80024b4:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2de>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x312>
 80024c8:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e02d      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x334>
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a72      	ldr	r2, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e01c      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x356>
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a6c      	ldr	r2, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a69      	ldr	r2, [pc, #420]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	e00b      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <HAL_RCC_OscConfig+0x3a2>
 800253a:	f7ff fac7 	bl	8001acc <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x394>
 8002542:	f7ff fac3 	bl	8001acc <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x394>
 8002554:	2303      	movs	r3, #3
 8002556:	e0ab      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ee      	beq.n	8002542 <HAL_RCC_OscConfig+0x37e>
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x3cc>
 8002566:	f7ff fab1 	bl	8001acc <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x3c0>
 800256e:	f7ff faad 	bl	8001acc <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3c0>
 8002580:	2303      	movs	r3, #3
 8002582:	e095      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ee      	bne.n	800256e <HAL_RCC_OscConfig+0x3aa>
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3de>
 8002596:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8081 	beq.w	80026ae <HAL_RCC_OscConfig+0x4ea>
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d061      	beq.n	800267c <HAL_RCC_OscConfig+0x4b8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d146      	bne.n	800264e <HAL_RCC_OscConfig+0x48a>
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f7ff fa81 	bl	8001acc <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x41c>
 80025ce:	f7ff fa7d 	bl	8001acc <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x41c>
 80025dc:	2303      	movs	r3, #3
 80025de:	e067      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80025e0:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x40a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d108      	bne.n	8002608 <HAL_RCC_OscConfig+0x444>
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	492d      	ldr	r1, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a19      	ldr	r1, [r3, #32]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	430b      	orrs	r3, r1
 800261a:	4927      	ldr	r1, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f7ff fa51 	bl	8001acc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x47c>
 800262e:	f7ff fa4d 	bl	8001acc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x47c>
 800263c:	2303      	movs	r3, #3
 800263e:	e037      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x46a>
 800264c:	e02f      	b.n	80026ae <HAL_RCC_OscConfig+0x4ea>
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f7ff fa3a 	bl	8001acc <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x4aa>
 800265c:	f7ff fa36 	bl	8001acc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x4aa>
 800266a:	2303      	movs	r3, #3
 800266c:	e020      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x498>
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x4ea>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
 8002684:	2301      	movs	r3, #1
 8002686:	e013      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4e6>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4ea>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 80026ae:	2300      	movs	r3, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42420060 	.word	0x42420060

080026c4 <HAL_RCC_ClockConfig>:
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d0      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4965      	ldr	r1, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x92>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272a:	6053      	str	r3, [r2, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x80>
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002742:	6053      	str	r3, [r2, #4]
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d040      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 800278e:	2301      	movs	r3, #1
 8002790:	e073      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 800279e:	2301      	movs	r3, #1
 80027a0:	e06b      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4936      	ldr	r1, [pc, #216]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	f7ff f98a 	bl	8001acc <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
 80027bc:	f7ff f986 	bl	8001acc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e053      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d210      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x150>
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x150>
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x16e>
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x18e>
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1cc>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f8e8 	bl	8001a48 <HAL_InitTick>
 8002878:	2300      	movs	r3, #0
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	08004bb4 	.word	0x08004bb4
 8002890:	20000024 	.word	0x20000024
 8002894:	20000028 	.word	0x20000028

08002898 <HAL_RCC_GetSysClockFreq>:
 8002898:	b490      	push	{r4, r7}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a0:	1d3c      	adds	r4, r7, #4
 80028a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028a8:	f240 2301 	movw	r3, #513	; 0x201
 80028ac:	803b      	strh	r3, [r7, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x40>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x46>
 80028d6:	e02d      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x9c>
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	e02d      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xa2>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	0c9b      	lsrs	r3, r3, #18
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ea:	4413      	add	r3, r2
 80028ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x8c>
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c5b      	lsrs	r3, r3, #17
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800290a:	4413      	add	r3, r2
 800290c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	fb02 f203 	mul.w	r2, r2, r3
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e004      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x96>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xa2>
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	bf00      	nop
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bc90      	pop	{r4, r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	08004ba4 	.word	0x08004ba4
 800294c:	40021000 	.word	0x40021000
 8002950:	007a1200 	.word	0x007a1200
 8002954:	003d0900 	.word	0x003d0900

08002958 <HAL_RCC_GetHCLKFreq>:
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <HAL_RCC_GetHCLKFreq+0x10>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000024 	.word	0x20000024

0800296c <HAL_RCC_GetPCLK1Freq>:
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
 8002970:	f7ff fff2 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08004bc4 	.word	0x08004bc4

08002994 <HAL_RCC_GetPCLK2Freq>:
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
 8002998:	f7ff ffde 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0adb      	lsrs	r3, r3, #11
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08004bc4 	.word	0x08004bc4

080029bc <RCC_Delay>:
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <RCC_Delay+0x34>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <RCC_Delay+0x38>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0a5b      	lsrs	r3, r3, #9
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	bf00      	nop
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	60fa      	str	r2, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f9      	bne.n	80029d8 <RCC_Delay+0x1c>
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	20000024 	.word	0x20000024
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_TIM_Base_Init>:
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_Base_Init+0x12>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e041      	b.n	8002a8e <HAL_TIM_Base_Init+0x96>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_TIM_Base_Init+0x2c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fea2 	bl	8001768 <HAL_TIM_Base_MspInit>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f000 fc28 	bl	800328c <TIM_Base_SetConfig>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_TIM_Base_Start_IT>:
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d001      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e03a      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0x8e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_TIM_Base_Start_IT+0x98>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_TIM_Base_Start_IT+0xa0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_TIM_Base_Start_IT+0x7c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d010      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0x8c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e007      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0x8c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800

08002b3c <HAL_TIM_PWM_Init>:
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x12>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_PWM_Init+0x96>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PWM_Init+0x2c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f839 	bl	8002bda <HAL_TIM_PWM_MspInit>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fb86 	bl	800328c <TIM_Base_SetConfig>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_PWM_MspInit>:
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_PWM_Start>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_TIM_PWM_Start+0x24>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e022      	b.n	8002c56 <HAL_TIM_PWM_Start+0x6a>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d109      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x3e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e015      	b.n	8002c56 <HAL_TIM_PWM_Start+0x6a>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d109      	bne.n	8002c44 <HAL_TIM_PWM_Start+0x58>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e008      	b.n	8002c56 <HAL_TIM_PWM_Start+0x6a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x72>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e05e      	b.n	8002d1c <HAL_TIM_PWM_Start+0x130>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x82>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	e013      	b.n	8002c96 <HAL_TIM_PWM_Start+0xaa>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0x92>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	e00b      	b.n	8002c96 <HAL_TIM_PWM_Start+0xaa>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xa2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8c:	e003      	b.n	8002c96 <HAL_TIM_PWM_Start+0xaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd74 	bl	800378c <TIM_CCxChannelCmd>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_TIM_PWM_Start+0x138>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xd2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_TIM_PWM_Start+0x138>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xfa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xfa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_TIM_PWM_Start+0x13c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xfa>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_TIM_PWM_Start+0x140>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x11e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d010      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x12e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_TIM_PWM_Start+0x12e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800

08002d30 <HAL_TIM_IRQHandler>:
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x5c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x5c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0202 	mvn.w	r2, #2
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x4a>
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fa6f 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0x56>
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa62 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa71 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0204 	mvn.w	r2, #4
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	771a      	strb	r2, [r3, #28]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x9e>
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa45 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0xaa>
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa38 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fa47 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x104>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x104>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0208 	mvn.w	r2, #8
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	771a      	strb	r2, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xf2>
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa1b 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xfe>
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa0e 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa1d 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x158>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x158>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0210 	mvn.w	r2, #16
 8002e58:	611a      	str	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	771a      	strb	r2, [r3, #28]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x146>
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9f1 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0x152>
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9e4 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9f3 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x184>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x184>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0201 	mvn.w	r2, #1
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f8c0 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b80      	cmp	r3, #128	; 0x80
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1b0>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1b0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fce1 	bl	80038a2 <HAL_TIMEx_BreakCallback>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1dc>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1dc>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9b7 	bl	800327a <HAL_TIM_TriggerCallback>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x208>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x208>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0220 	mvn.w	r2, #32
 8002f30:	611a      	str	r2, [r3, #16]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fcac 	bl	8003890 <HAL_TIMEx_CommutCallback>
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_PWM_ConfigChannel>:
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ac      	b.n	80030b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9d0 	bl	8003350 <TIM_OC1_SetConfig>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
 8002fe2:	e062      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x16a>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa16 	bl	800341c <TIM_OC2_SetConfig>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
 8003024:	e041      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa5f 	bl	80034f0 <TIM_OC3_SetConfig>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
 8003064:	e021      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 faa9 	bl	80035c4 <TIM_OC4_SetConfig>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
 80030a6:	e000      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x16a>
 80030a8:	bf00      	nop
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030b2:	2300      	movs	r3, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_ConfigClockSource>:
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIM_ConfigClockSource+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0b3      	b.n	800323c <HAL_TIM_ConfigClockSource+0x180>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310c:	d03e      	beq.n	800318c <HAL_TIM_ConfigClockSource+0xd0>
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	f200 8087 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x168>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	f000 8085 	beq.w	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d87f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d01a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0xa2>
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d87b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d050      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x116>
 8003130:	2b60      	cmp	r3, #96	; 0x60
 8003132:	d877      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d03c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003138:	2b50      	cmp	r3, #80	; 0x50
 800313a:	d873      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d058      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x136>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d86f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d064      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x156>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d86b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d060      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x156>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d867      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05c      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x156>
 8003158:	2b10      	cmp	r3, #16
 800315a:	d05a      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x156>
 800315c:	e062      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x168>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f000 faee 	bl	800374e <TIM_ETR_SetConfig>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e04e      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f000 fad7 	bl	800374e <TIM_ETR_SetConfig>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	e03b      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fa4e 	bl	8003660 <TIM_TI1_ConfigInputStage>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2150      	movs	r1, #80	; 0x50
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 faa5 	bl	800371a <TIM_ITRx_SetConfig>
 80031d0:	e02b      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fa6c 	bl	80036bc <TIM_TI2_ConfigInputStage>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2160      	movs	r1, #96	; 0x60
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa95 	bl	800371a <TIM_ITRx_SetConfig>
 80031f0:	e01b      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 fa2e 	bl	8003660 <TIM_TI1_ConfigInputStage>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa85 	bl	800371a <TIM_ITRx_SetConfig>
 8003210:	e00b      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f000 fa7c 	bl	800371a <TIM_ITRx_SetConfig>
 8003222:	e002      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_TIM_ConfigClockSource+0x16e>
 8003228:	bf00      	nop
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800323a:	2300      	movs	r3, #0
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_OC_DelayElapsedCallback>:
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_IC_CaptureCallback>:
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_TriggerCallback>:
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <TIM_Base_SetConfig>:
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x42>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x74>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xa8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <TIM_OC1_SetConfig>:
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <TIM_OC1_SetConfig+0x76>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <TIM_OC1_SetConfig+0xa2>
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	635a      	str	r2, [r3, #52]	; 0x34
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00

0800341c <TIM_OC2_SetConfig>:
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <TIM_OC2_SetConfig+0x7c>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d113      	bne.n	80034c8 <TIM_OC2_SetConfig+0xac>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC3_SetConfig>:
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x7a>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d113      	bne.n	800359a <TIM_OC3_SetConfig+0xaa>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	61da      	str	r2, [r3, #28]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00

080035c4 <TIM_OC4_SetConfig>:
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <TIM_OC4_SetConfig+0x98>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x74>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00

08003660 <TIM_TI1_ConfigInputStage>:
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 030a 	bic.w	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	619a      	str	r2, [r3, #24]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <TIM_TI2_ConfigInputStage>:
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f023 0210 	bic.w	r2, r3, #16
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	031b      	lsls	r3, r3, #12
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	619a      	str	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <TIM_ITRx_SetConfig>:
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	f043 0307 	orr.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <TIM_ETR_SetConfig>:
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e046      	b.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d009      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a12      	ldr	r2, [pc, #72]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10c      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003878:	2300      	movs	r3, #0
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800

08003890 <HAL_TIMEx_CommutCallback>:
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIMEx_BreakCallback>:
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_Init>:
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e03f      	b.n	8003946 <HAL_UART_Init+0x92>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd ffae 	bl	800183c <HAL_UART_MspInit>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fc25 	bl	8004148 <UART_SetConfig>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	2300      	movs	r3, #0
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_UART_Transmit>:
 800394e:	b580      	push	{r7, lr}
 8003950:	b08a      	sub	sp, #40	; 0x28
 8003952:	af02      	add	r7, sp, #8
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	d17c      	bne.n	8003a68 <HAL_UART_Transmit+0x11a>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit+0x2c>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit+0x30>
 800397a:	2301      	movs	r3, #1
 800397c:	e075      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x3e>
 8003988:	2302      	movs	r3, #2
 800398a:	e06e      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2221      	movs	r2, #33	; 0x21
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039a2:	f7fe f893 	bl	8001acc <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	849a      	strh	r2, [r3, #36]	; 0x24
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x8a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039e0:	e02a      	b.n	8003a38 <HAL_UART_Transmit+0xea>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fa11 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0xae>
 80039f8:	2303      	movs	r3, #3
 80039fa:	e036      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_Transmit+0xcc>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3302      	adds	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e007      	b.n	8003a2a <HAL_UART_Transmit+0xdc>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1cf      	bne.n	80039e2 <HAL_UART_Transmit+0x94>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f9e1 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0x10e>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_UART_IRQHandler>:
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x52>
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x52>
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x52>
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa99 	bl	8003ff6 <UART_Receive_IT>
 8003ac4:	e17b      	b.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80b1 	beq.w	8003c30 <HAL_UART_IRQHandler+0x1bc>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x70>
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80a6 	beq.w	8003c30 <HAL_UART_IRQHandler+0x1bc>
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_UART_IRQHandler+0x90>
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_IRQHandler+0x90>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_UART_IRQHandler+0xb0>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_UART_IRQHandler+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_UART_IRQHandler+0xd0>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_UART_IRQHandler+0xd0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <HAL_UART_IRQHandler+0xfa>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_IRQHandler+0xee>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0xfa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0208 	orr.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 811e 	beq.w	8003db4 <HAL_UART_IRQHandler+0x340>
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_UART_IRQHandler+0x11e>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_UART_IRQHandler+0x11e>
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa32 	bl	8003ff6 <UART_Receive_IT>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_UART_IRQHandler+0x146>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d031      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1aa>
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f974 	bl	8003ea8 <UART_EndRxTransfer>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1a2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	615a      	str	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x19a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	4a76      	ldr	r2, [pc, #472]	; (8003dc4 <HAL_UART_IRQHandler+0x350>)
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe f8bc 	bl	8001d70 <HAL_DMA_Abort_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_UART_IRQHandler+0x1b8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4798      	blx	r3
 8003c0c:	e00e      	b.n	8003c2c <HAL_UART_IRQHandler+0x1b8>
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8ec 	bl	8003dec <HAL_UART_ErrorCallback>
 8003c14:	e00a      	b.n	8003c2c <HAL_UART_IRQHandler+0x1b8>
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8e8 	bl	8003dec <HAL_UART_ErrorCallback>
 8003c1c:	e006      	b.n	8003c2c <HAL_UART_IRQHandler+0x1b8>
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8e4 	bl	8003dec <HAL_UART_ErrorCallback>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
 8003c2a:	e0c3      	b.n	8003db4 <HAL_UART_IRQHandler+0x340>
 8003c2c:	bf00      	nop
 8003c2e:	e0c1      	b.n	8003db4 <HAL_UART_IRQHandler+0x340>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 80a1 	bne.w	8003d7c <HAL_UART_IRQHandler+0x308>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 809b 	beq.w	8003d7c <HAL_UART_IRQHandler+0x308>
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8095 	beq.w	8003d7c <HAL_UART_IRQHandler+0x308>
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d04e      	beq.n	8003d14 <HAL_UART_IRQHandler+0x2a0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	823b      	strh	r3, [r7, #16]
 8003c80:	8a3b      	ldrh	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8098 	beq.w	8003db8 <HAL_UART_IRQHandler+0x344>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8c:	8a3a      	ldrh	r2, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	f080 8092 	bcs.w	8003db8 <HAL_UART_IRQHandler+0x344>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8a3a      	ldrh	r2, [r7, #16]
 8003c98:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d02b      	beq.n	8003cfc <HAL_UART_IRQHandler+0x288>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd2:	615a      	str	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0210 	bic.w	r2, r2, #16
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd ffff 	bl	8001cfa <HAL_DMA_Abort>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f876 	bl	8003dfe <HAL_UARTEx_RxEventCallback>
 8003d12:	e051      	b.n	8003db8 <HAL_UART_IRQHandler+0x344>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	827b      	strh	r3, [r7, #18]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d047      	beq.n	8003dbc <HAL_UART_IRQHandler+0x348>
 8003d2c:	8a7b      	ldrh	r3, [r7, #18]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_UART_IRQHandler+0x348>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	615a      	str	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0210 	bic.w	r2, r2, #16
 8003d6e:	60da      	str	r2, [r3, #12]
 8003d70:	8a7b      	ldrh	r3, [r7, #18]
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f842 	bl	8003dfe <HAL_UARTEx_RxEventCallback>
 8003d7a:	e01f      	b.n	8003dbc <HAL_UART_IRQHandler+0x348>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_UART_IRQHandler+0x324>
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_UART_IRQHandler+0x324>
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8c9 	bl	8003f28 <UART_Transmit_IT>
 8003d96:	e012      	b.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f90a 	bl	8003fc6 <UART_EndTransmit_IT>
 8003db2:	e004      	b.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_UART_IRQHandler+0x34a>
 8003dbc:	bf00      	nop
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	08003f01 	.word	0x08003f01

08003dc8 <HAL_UART_TxCpltCallback>:
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_UART_RxCpltCallback>:
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <HAL_UART_ErrorCallback>:
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_UARTEx_RxEventCallback>:
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <UART_WaitOnFlagUntilTimeout>:
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
 8003e24:	e02c      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d028      	beq.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e34:	f7fd fe4a 	bl	8001acc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d21d      	bcs.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e52:	60da      	str	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e00f      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d0c3      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x12>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_EndRxTransfer>:
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	615a      	str	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <UART_EndRxTransfer+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0210 	bic.w	r2, r2, #16
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <UART_DMAAbortOnError>:
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	84da      	strh	r2, [r3, #38]	; 0x26
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff ff66 	bl	8003dec <HAL_UART_ErrorCallback>
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_Transmit_IT>:
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b21      	cmp	r3, #33	; 0x21
 8003f3a:	d13e      	bne.n	8003fba <UART_Transmit_IT+0x92>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d114      	bne.n	8003f70 <UART_Transmit_IT+0x48>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d110      	bne.n	8003f70 <UART_Transmit_IT+0x48>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]
 8003f6e:	e008      	b.n	8003f82 <UART_Transmit_IT+0x5a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	1c59      	adds	r1, r3, #1
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6211      	str	r1, [r2, #32]
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <UART_Transmit_IT+0x8e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <UART_Transmit_IT+0x94>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <UART_EndTransmit_IT>:
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff feee 	bl	8003dc8 <HAL_UART_TxCpltCallback>
 8003fec:	2300      	movs	r3, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <UART_Receive_IT>:
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b22      	cmp	r3, #34	; 0x22
 8004008:	f040 8099 	bne.w	800413e <UART_Receive_IT+0x148>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d117      	bne.n	8004046 <UART_Receive_IT+0x50>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d113      	bne.n	8004046 <UART_Receive_IT+0x50>
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	b29a      	uxth	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
 8004044:	e026      	b.n	8004094 <UART_Receive_IT+0x9e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d007      	beq.n	800406a <UART_Receive_IT+0x74>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <UART_Receive_IT+0x82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <UART_Receive_IT+0x82>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e008      	b.n	800408a <UART_Receive_IT+0x94>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004084:	b2da      	uxtb	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29b      	uxth	r3, r3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4619      	mov	r1, r3
 80040a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d148      	bne.n	800413a <UART_Receive_IT+0x144>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0220 	bic.w	r2, r2, #32
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	615a      	str	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d123      	bne.n	8004130 <UART_Receive_IT+0x13a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0210 	bic.w	r2, r2, #16
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b10      	cmp	r3, #16
 800410a:	d10a      	bne.n	8004122 <UART_Receive_IT+0x12c>
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fe68 	bl	8003dfe <HAL_UARTEx_RxEventCallback>
 800412e:	e002      	b.n	8004136 <UART_Receive_IT+0x140>
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fe52 	bl	8003dda <HAL_UART_RxCpltCallback>
 8004136:	2300      	movs	r3, #0
 8004138:	e002      	b.n	8004140 <UART_Receive_IT+0x14a>
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <UART_Receive_IT+0x14a>
 800413e:	2302      	movs	r3, #2
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_SetConfig>:
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004182:	f023 030c 	bic.w	r3, r3, #12
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	430b      	orrs	r3, r1
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	615a      	str	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	; (800425c <UART_SetConfig+0x114>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <UART_SetConfig+0x70>
 80041b0:	f7fe fbf0 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	e002      	b.n	80041be <UART_SetConfig+0x76>
 80041b8:	f7fe fbd8 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009a      	lsls	r2, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	4a22      	ldr	r2, [pc, #136]	; (8004260 <UART_SetConfig+0x118>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	0119      	lsls	r1, r3, #4
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009a      	lsls	r2, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <UART_SetConfig+0x118>)
 80041f6:	fba3 0302 	umull	r0, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2064      	movs	r0, #100	; 0x64
 80041fe:	fb00 f303 	mul.w	r3, r0, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <UART_SetConfig+0x118>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004214:	4419      	add	r1, r3
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fbb2 f2f3 	udiv	r2, r2, r3
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <UART_SetConfig+0x118>)
 800422e:	fba3 0302 	umull	r0, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a07      	ldr	r2, [pc, #28]	; (8004260 <UART_SetConfig+0x118>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	440a      	add	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40013800 	.word	0x40013800
 8004260:	51eb851f 	.word	0x51eb851f

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000030 	.word	0x20000030

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	2600      	movs	r6, #0
 8004274:	4d0c      	ldr	r5, [pc, #48]	; (80042a8 <__libc_init_array+0x38>)
 8004276:	4c0d      	ldr	r4, [pc, #52]	; (80042ac <__libc_init_array+0x3c>)
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	42a6      	cmp	r6, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	f000 fc5c 	bl	8004b3c <_init>
 8004284:	2600      	movs	r6, #0
 8004286:	4d0a      	ldr	r5, [pc, #40]	; (80042b0 <__libc_init_array+0x40>)
 8004288:	4c0a      	ldr	r4, [pc, #40]	; (80042b4 <__libc_init_array+0x44>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	42a6      	cmp	r6, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f855 3b04 	ldr.w	r3, [r5], #4
 8004298:	4798      	blx	r3
 800429a:	3601      	adds	r6, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a2:	4798      	blx	r3
 80042a4:	3601      	adds	r6, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	08004c00 	.word	0x08004c00
 80042ac:	08004c00 	.word	0x08004c00
 80042b0:	08004c00 	.word	0x08004c00
 80042b4:	08004c04 	.word	0x08004c04

080042b8 <memset>:
 80042b8:	4603      	mov	r3, r0
 80042ba:	4402      	add	r2, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <siprintf>:
 80042c8:	b40e      	push	{r1, r2, r3}
 80042ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ce:	b500      	push	{lr}
 80042d0:	b09c      	sub	sp, #112	; 0x70
 80042d2:	ab1d      	add	r3, sp, #116	; 0x74
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9006      	str	r0, [sp, #24]
 80042d8:	9107      	str	r1, [sp, #28]
 80042da:	9104      	str	r1, [sp, #16]
 80042dc:	4808      	ldr	r0, [pc, #32]	; (8004300 <siprintf+0x38>)
 80042de:	4909      	ldr	r1, [pc, #36]	; (8004304 <siprintf+0x3c>)
 80042e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e4:	9105      	str	r1, [sp, #20]
 80042e6:	6800      	ldr	r0, [r0, #0]
 80042e8:	a902      	add	r1, sp, #8
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	f000 f868 	bl	80043c0 <_svfiprintf_r>
 80042f0:	2200      	movs	r2, #0
 80042f2:	9b02      	ldr	r3, [sp, #8]
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	b01c      	add	sp, #112	; 0x70
 80042f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042fc:	b003      	add	sp, #12
 80042fe:	4770      	bx	lr
 8004300:	20000030 	.word	0x20000030
 8004304:	ffff0208 	.word	0xffff0208

08004308 <__ssputs_r>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	688e      	ldr	r6, [r1, #8]
 800430e:	4682      	mov	sl, r0
 8004310:	429e      	cmp	r6, r3
 8004312:	460c      	mov	r4, r1
 8004314:	4690      	mov	r8, r2
 8004316:	461f      	mov	r7, r3
 8004318:	d838      	bhi.n	800438c <__ssputs_r+0x84>
 800431a:	898a      	ldrh	r2, [r1, #12]
 800431c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004320:	d032      	beq.n	8004388 <__ssputs_r+0x80>
 8004322:	6825      	ldr	r5, [r4, #0]
 8004324:	6909      	ldr	r1, [r1, #16]
 8004326:	3301      	adds	r3, #1
 8004328:	eba5 0901 	sub.w	r9, r5, r1
 800432c:	6965      	ldr	r5, [r4, #20]
 800432e:	444b      	add	r3, r9
 8004330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004338:	106d      	asrs	r5, r5, #1
 800433a:	429d      	cmp	r5, r3
 800433c:	bf38      	it	cc
 800433e:	461d      	movcc	r5, r3
 8004340:	0553      	lsls	r3, r2, #21
 8004342:	d531      	bpl.n	80043a8 <__ssputs_r+0xa0>
 8004344:	4629      	mov	r1, r5
 8004346:	f000 fb53 	bl	80049f0 <_malloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	b950      	cbnz	r0, 8004364 <__ssputs_r+0x5c>
 800434e:	230c      	movs	r3, #12
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f8ca 3000 	str.w	r3, [sl]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	464a      	mov	r2, r9
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	f000 face 	bl	8004908 <memcpy>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	6126      	str	r6, [r4, #16]
 800437a:	444e      	add	r6, r9
 800437c:	6026      	str	r6, [r4, #0]
 800437e:	463e      	mov	r6, r7
 8004380:	6165      	str	r5, [r4, #20]
 8004382:	eba5 0509 	sub.w	r5, r5, r9
 8004386:	60a5      	str	r5, [r4, #8]
 8004388:	42be      	cmp	r6, r7
 800438a:	d900      	bls.n	800438e <__ssputs_r+0x86>
 800438c:	463e      	mov	r6, r7
 800438e:	4632      	mov	r2, r6
 8004390:	4641      	mov	r1, r8
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	f000 fac6 	bl	8004924 <memmove>
 8004398:	68a3      	ldr	r3, [r4, #8]
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	4432      	add	r2, r6
 80043a0:	2000      	movs	r0, #0
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	e7db      	b.n	8004360 <__ssputs_r+0x58>
 80043a8:	462a      	mov	r2, r5
 80043aa:	f000 fb7b 	bl	8004aa4 <_realloc_r>
 80043ae:	4606      	mov	r6, r0
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d1e1      	bne.n	8004378 <__ssputs_r+0x70>
 80043b4:	4650      	mov	r0, sl
 80043b6:	6921      	ldr	r1, [r4, #16]
 80043b8:	f000 face 	bl	8004958 <_free_r>
 80043bc:	e7c7      	b.n	800434e <__ssputs_r+0x46>
	...

080043c0 <_svfiprintf_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	4698      	mov	r8, r3
 80043c6:	898b      	ldrh	r3, [r1, #12]
 80043c8:	4607      	mov	r7, r0
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	460d      	mov	r5, r1
 80043ce:	4614      	mov	r4, r2
 80043d0:	b09d      	sub	sp, #116	; 0x74
 80043d2:	d50e      	bpl.n	80043f2 <_svfiprintf_r+0x32>
 80043d4:	690b      	ldr	r3, [r1, #16]
 80043d6:	b963      	cbnz	r3, 80043f2 <_svfiprintf_r+0x32>
 80043d8:	2140      	movs	r1, #64	; 0x40
 80043da:	f000 fb09 	bl	80049f0 <_malloc_r>
 80043de:	6028      	str	r0, [r5, #0]
 80043e0:	6128      	str	r0, [r5, #16]
 80043e2:	b920      	cbnz	r0, 80043ee <_svfiprintf_r+0x2e>
 80043e4:	230c      	movs	r3, #12
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e0d1      	b.n	8004592 <_svfiprintf_r+0x1d2>
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	616b      	str	r3, [r5, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9309      	str	r3, [sp, #36]	; 0x24
 80043f6:	2320      	movs	r3, #32
 80043f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043fc:	2330      	movs	r3, #48	; 0x30
 80043fe:	f04f 0901 	mov.w	r9, #1
 8004402:	f8cd 800c 	str.w	r8, [sp, #12]
 8004406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045ac <_svfiprintf_r+0x1ec>
 800440a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800440e:	4623      	mov	r3, r4
 8004410:	469a      	mov	sl, r3
 8004412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004416:	b10a      	cbz	r2, 800441c <_svfiprintf_r+0x5c>
 8004418:	2a25      	cmp	r2, #37	; 0x25
 800441a:	d1f9      	bne.n	8004410 <_svfiprintf_r+0x50>
 800441c:	ebba 0b04 	subs.w	fp, sl, r4
 8004420:	d00b      	beq.n	800443a <_svfiprintf_r+0x7a>
 8004422:	465b      	mov	r3, fp
 8004424:	4622      	mov	r2, r4
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ff6d 	bl	8004308 <__ssputs_r>
 800442e:	3001      	adds	r0, #1
 8004430:	f000 80aa 	beq.w	8004588 <_svfiprintf_r+0x1c8>
 8004434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004436:	445a      	add	r2, fp
 8004438:	9209      	str	r2, [sp, #36]	; 0x24
 800443a:	f89a 3000 	ldrb.w	r3, [sl]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80a2 	beq.w	8004588 <_svfiprintf_r+0x1c8>
 8004444:	2300      	movs	r3, #0
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800444e:	f10a 0a01 	add.w	sl, sl, #1
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800445a:	931a      	str	r3, [sp, #104]	; 0x68
 800445c:	4654      	mov	r4, sl
 800445e:	2205      	movs	r2, #5
 8004460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004464:	4851      	ldr	r0, [pc, #324]	; (80045ac <_svfiprintf_r+0x1ec>)
 8004466:	f000 fa41 	bl	80048ec <memchr>
 800446a:	9a04      	ldr	r2, [sp, #16]
 800446c:	b9d8      	cbnz	r0, 80044a6 <_svfiprintf_r+0xe6>
 800446e:	06d0      	lsls	r0, r2, #27
 8004470:	bf44      	itt	mi
 8004472:	2320      	movmi	r3, #32
 8004474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004478:	0711      	lsls	r1, r2, #28
 800447a:	bf44      	itt	mi
 800447c:	232b      	movmi	r3, #43	; 0x2b
 800447e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004482:	f89a 3000 	ldrb.w	r3, [sl]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d015      	beq.n	80044b6 <_svfiprintf_r+0xf6>
 800448a:	4654      	mov	r4, sl
 800448c:	2000      	movs	r0, #0
 800448e:	f04f 0c0a 	mov.w	ip, #10
 8004492:	9a07      	ldr	r2, [sp, #28]
 8004494:	4621      	mov	r1, r4
 8004496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800449a:	3b30      	subs	r3, #48	; 0x30
 800449c:	2b09      	cmp	r3, #9
 800449e:	d94e      	bls.n	800453e <_svfiprintf_r+0x17e>
 80044a0:	b1b0      	cbz	r0, 80044d0 <_svfiprintf_r+0x110>
 80044a2:	9207      	str	r2, [sp, #28]
 80044a4:	e014      	b.n	80044d0 <_svfiprintf_r+0x110>
 80044a6:	eba0 0308 	sub.w	r3, r0, r8
 80044aa:	fa09 f303 	lsl.w	r3, r9, r3
 80044ae:	4313      	orrs	r3, r2
 80044b0:	46a2      	mov	sl, r4
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	e7d2      	b.n	800445c <_svfiprintf_r+0x9c>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	9103      	str	r1, [sp, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfbb      	ittet	lt
 80044c2:	425b      	neglt	r3, r3
 80044c4:	f042 0202 	orrlt.w	r2, r2, #2
 80044c8:	9307      	strge	r3, [sp, #28]
 80044ca:	9307      	strlt	r3, [sp, #28]
 80044cc:	bfb8      	it	lt
 80044ce:	9204      	strlt	r2, [sp, #16]
 80044d0:	7823      	ldrb	r3, [r4, #0]
 80044d2:	2b2e      	cmp	r3, #46	; 0x2e
 80044d4:	d10c      	bne.n	80044f0 <_svfiprintf_r+0x130>
 80044d6:	7863      	ldrb	r3, [r4, #1]
 80044d8:	2b2a      	cmp	r3, #42	; 0x2a
 80044da:	d135      	bne.n	8004548 <_svfiprintf_r+0x188>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	3402      	adds	r4, #2
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	9203      	str	r2, [sp, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfb8      	it	lt
 80044ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045bc <_svfiprintf_r+0x1fc>
 80044f4:	2203      	movs	r2, #3
 80044f6:	4650      	mov	r0, sl
 80044f8:	7821      	ldrb	r1, [r4, #0]
 80044fa:	f000 f9f7 	bl	80048ec <memchr>
 80044fe:	b140      	cbz	r0, 8004512 <_svfiprintf_r+0x152>
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	eba0 000a 	sub.w	r0, r0, sl
 8004506:	fa03 f000 	lsl.w	r0, r3, r0
 800450a:	9b04      	ldr	r3, [sp, #16]
 800450c:	3401      	adds	r4, #1
 800450e:	4303      	orrs	r3, r0
 8004510:	9304      	str	r3, [sp, #16]
 8004512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004516:	2206      	movs	r2, #6
 8004518:	4825      	ldr	r0, [pc, #148]	; (80045b0 <_svfiprintf_r+0x1f0>)
 800451a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800451e:	f000 f9e5 	bl	80048ec <memchr>
 8004522:	2800      	cmp	r0, #0
 8004524:	d038      	beq.n	8004598 <_svfiprintf_r+0x1d8>
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <_svfiprintf_r+0x1f4>)
 8004528:	bb1b      	cbnz	r3, 8004572 <_svfiprintf_r+0x1b2>
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	3307      	adds	r3, #7
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	3308      	adds	r3, #8
 8004534:	9303      	str	r3, [sp, #12]
 8004536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004538:	4433      	add	r3, r6
 800453a:	9309      	str	r3, [sp, #36]	; 0x24
 800453c:	e767      	b.n	800440e <_svfiprintf_r+0x4e>
 800453e:	460c      	mov	r4, r1
 8004540:	2001      	movs	r0, #1
 8004542:	fb0c 3202 	mla	r2, ip, r2, r3
 8004546:	e7a5      	b.n	8004494 <_svfiprintf_r+0xd4>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 0c0a 	mov.w	ip, #10
 800454e:	4619      	mov	r1, r3
 8004550:	3401      	adds	r4, #1
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	4620      	mov	r0, r4
 8004556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800455a:	3a30      	subs	r2, #48	; 0x30
 800455c:	2a09      	cmp	r2, #9
 800455e:	d903      	bls.n	8004568 <_svfiprintf_r+0x1a8>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0c5      	beq.n	80044f0 <_svfiprintf_r+0x130>
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	e7c3      	b.n	80044f0 <_svfiprintf_r+0x130>
 8004568:	4604      	mov	r4, r0
 800456a:	2301      	movs	r3, #1
 800456c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004570:	e7f0      	b.n	8004554 <_svfiprintf_r+0x194>
 8004572:	ab03      	add	r3, sp, #12
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	462a      	mov	r2, r5
 8004578:	4638      	mov	r0, r7
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <_svfiprintf_r+0x1f8>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	f3af 8000 	nop.w
 8004582:	1c42      	adds	r2, r0, #1
 8004584:	4606      	mov	r6, r0
 8004586:	d1d6      	bne.n	8004536 <_svfiprintf_r+0x176>
 8004588:	89ab      	ldrh	r3, [r5, #12]
 800458a:	065b      	lsls	r3, r3, #25
 800458c:	f53f af2c 	bmi.w	80043e8 <_svfiprintf_r+0x28>
 8004590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004592:	b01d      	add	sp, #116	; 0x74
 8004594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004598:	ab03      	add	r3, sp, #12
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	462a      	mov	r2, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <_svfiprintf_r+0x1f8>)
 80045a2:	a904      	add	r1, sp, #16
 80045a4:	f000 f87c 	bl	80046a0 <_printf_i>
 80045a8:	e7eb      	b.n	8004582 <_svfiprintf_r+0x1c2>
 80045aa:	bf00      	nop
 80045ac:	08004bcc 	.word	0x08004bcc
 80045b0:	08004bd6 	.word	0x08004bd6
 80045b4:	00000000 	.word	0x00000000
 80045b8:	08004309 	.word	0x08004309
 80045bc:	08004bd2 	.word	0x08004bd2

080045c0 <_printf_common>:
 80045c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	4616      	mov	r6, r2
 80045c6:	4699      	mov	r9, r3
 80045c8:	688a      	ldr	r2, [r1, #8]
 80045ca:	690b      	ldr	r3, [r1, #16]
 80045cc:	4607      	mov	r7, r0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	bfb8      	it	lt
 80045d2:	4613      	movlt	r3, r2
 80045d4:	6033      	str	r3, [r6, #0]
 80045d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045da:	460c      	mov	r4, r1
 80045dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e0:	b10a      	cbz	r2, 80045e6 <_printf_common+0x26>
 80045e2:	3301      	adds	r3, #1
 80045e4:	6033      	str	r3, [r6, #0]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0699      	lsls	r1, r3, #26
 80045ea:	bf42      	ittt	mi
 80045ec:	6833      	ldrmi	r3, [r6, #0]
 80045ee:	3302      	addmi	r3, #2
 80045f0:	6033      	strmi	r3, [r6, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	f015 0506 	ands.w	r5, r5, #6
 80045f8:	d106      	bne.n	8004608 <_printf_common+0x48>
 80045fa:	f104 0a19 	add.w	sl, r4, #25
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	6832      	ldr	r2, [r6, #0]
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	42ab      	cmp	r3, r5
 8004606:	dc28      	bgt.n	800465a <_printf_common+0x9a>
 8004608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800460c:	1e13      	subs	r3, r2, #0
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	bf18      	it	ne
 8004612:	2301      	movne	r3, #1
 8004614:	0692      	lsls	r2, r2, #26
 8004616:	d42d      	bmi.n	8004674 <_printf_common+0xb4>
 8004618:	4649      	mov	r1, r9
 800461a:	4638      	mov	r0, r7
 800461c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d020      	beq.n	8004668 <_printf_common+0xa8>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	68e5      	ldr	r5, [r4, #12]
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf18      	it	ne
 8004632:	2500      	movne	r5, #0
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	f04f 0600 	mov.w	r6, #0
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	bf08      	it	eq
 800463e:	1aad      	subeq	r5, r5, r2
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	bf08      	it	eq
 8004644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004648:	4293      	cmp	r3, r2
 800464a:	bfc4      	itt	gt
 800464c:	1a9b      	subgt	r3, r3, r2
 800464e:	18ed      	addgt	r5, r5, r3
 8004650:	341a      	adds	r4, #26
 8004652:	42b5      	cmp	r5, r6
 8004654:	d11a      	bne.n	800468c <_printf_common+0xcc>
 8004656:	2000      	movs	r0, #0
 8004658:	e008      	b.n	800466c <_printf_common+0xac>
 800465a:	2301      	movs	r3, #1
 800465c:	4652      	mov	r2, sl
 800465e:	4649      	mov	r1, r9
 8004660:	4638      	mov	r0, r7
 8004662:	47c0      	blx	r8
 8004664:	3001      	adds	r0, #1
 8004666:	d103      	bne.n	8004670 <_printf_common+0xb0>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	3501      	adds	r5, #1
 8004672:	e7c4      	b.n	80045fe <_printf_common+0x3e>
 8004674:	2030      	movs	r0, #48	; 0x30
 8004676:	18e1      	adds	r1, r4, r3
 8004678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004682:	4422      	add	r2, r4
 8004684:	3302      	adds	r3, #2
 8004686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800468a:	e7c5      	b.n	8004618 <_printf_common+0x58>
 800468c:	2301      	movs	r3, #1
 800468e:	4622      	mov	r2, r4
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0e6      	beq.n	8004668 <_printf_common+0xa8>
 800469a:	3601      	adds	r6, #1
 800469c:	e7d9      	b.n	8004652 <_printf_common+0x92>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	460c      	mov	r4, r1
 80046a6:	7e27      	ldrb	r7, [r4, #24]
 80046a8:	4691      	mov	r9, r2
 80046aa:	2f78      	cmp	r7, #120	; 0x78
 80046ac:	4680      	mov	r8, r0
 80046ae:	469a      	mov	sl, r3
 80046b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	; 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d9 	beq.w	8004874 <_printf_i+0x1d4>
 80046c2:	2f58      	cmp	r7, #88	; 0x58
 80046c4:	f000 80a4 	beq.w	8004810 <_printf_i+0x170>
 80046c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a001      	add	r0, pc, #4	; (adr r0, 80046e0 <_printf_i+0x40>)
 80046dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	0800485b 	.word	0x0800485b
 8004710:	0800477d 	.word	0x0800477d
 8004714:	0800483d 	.word	0x0800483d
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	0800487d 	.word	0x0800487d
 8004724:	080046c9 	.word	0x080046c9
 8004728:	0800477d 	.word	0x0800477d
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	08004845 	.word	0x08004845
 8004738:	680b      	ldr	r3, [r1, #0]
 800473a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	600a      	str	r2, [r1, #0]
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e0a4      	b.n	8004896 <_printf_i+0x1f6>
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	6808      	ldr	r0, [r1, #0]
 8004750:	062e      	lsls	r6, r5, #24
 8004752:	f100 0304 	add.w	r3, r0, #4
 8004756:	d50a      	bpl.n	800476e <_printf_i+0xce>
 8004758:	6805      	ldr	r5, [r0, #0]
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	2d00      	cmp	r5, #0
 800475e:	da03      	bge.n	8004768 <_printf_i+0xc8>
 8004760:	232d      	movs	r3, #45	; 0x2d
 8004762:	426d      	negs	r5, r5
 8004764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004768:	230a      	movs	r3, #10
 800476a:	485e      	ldr	r0, [pc, #376]	; (80048e4 <_printf_i+0x244>)
 800476c:	e019      	b.n	80047a2 <_printf_i+0x102>
 800476e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004772:	6805      	ldr	r5, [r0, #0]
 8004774:	600b      	str	r3, [r1, #0]
 8004776:	bf18      	it	ne
 8004778:	b22d      	sxthne	r5, r5
 800477a:	e7ef      	b.n	800475c <_printf_i+0xbc>
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	1d18      	adds	r0, r3, #4
 8004782:	6008      	str	r0, [r1, #0]
 8004784:	0628      	lsls	r0, r5, #24
 8004786:	d501      	bpl.n	800478c <_printf_i+0xec>
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	e002      	b.n	8004792 <_printf_i+0xf2>
 800478c:	0669      	lsls	r1, r5, #25
 800478e:	d5fb      	bpl.n	8004788 <_printf_i+0xe8>
 8004790:	881d      	ldrh	r5, [r3, #0]
 8004792:	2f6f      	cmp	r7, #111	; 0x6f
 8004794:	bf0c      	ite	eq
 8004796:	2308      	moveq	r3, #8
 8004798:	230a      	movne	r3, #10
 800479a:	4852      	ldr	r0, [pc, #328]	; (80048e4 <_printf_i+0x244>)
 800479c:	2100      	movs	r1, #0
 800479e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047a2:	6866      	ldr	r6, [r4, #4]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	bfa8      	it	ge
 80047a8:	6821      	ldrge	r1, [r4, #0]
 80047aa:	60a6      	str	r6, [r4, #8]
 80047ac:	bfa4      	itt	ge
 80047ae:	f021 0104 	bicge.w	r1, r1, #4
 80047b2:	6021      	strge	r1, [r4, #0]
 80047b4:	b90d      	cbnz	r5, 80047ba <_printf_i+0x11a>
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	d04d      	beq.n	8004856 <_printf_i+0x1b6>
 80047ba:	4616      	mov	r6, r2
 80047bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80047c0:	fb03 5711 	mls	r7, r3, r1, r5
 80047c4:	5dc7      	ldrb	r7, [r0, r7]
 80047c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047ca:	462f      	mov	r7, r5
 80047cc:	42bb      	cmp	r3, r7
 80047ce:	460d      	mov	r5, r1
 80047d0:	d9f4      	bls.n	80047bc <_printf_i+0x11c>
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d10b      	bne.n	80047ee <_printf_i+0x14e>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	07df      	lsls	r7, r3, #31
 80047da:	d508      	bpl.n	80047ee <_printf_i+0x14e>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	6861      	ldr	r1, [r4, #4]
 80047e0:	4299      	cmp	r1, r3
 80047e2:	bfde      	ittt	le
 80047e4:	2330      	movle	r3, #48	; 0x30
 80047e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047ee:	1b92      	subs	r2, r2, r6
 80047f0:	6122      	str	r2, [r4, #16]
 80047f2:	464b      	mov	r3, r9
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f8cd a000 	str.w	sl, [sp]
 80047fc:	aa03      	add	r2, sp, #12
 80047fe:	f7ff fedf 	bl	80045c0 <_printf_common>
 8004802:	3001      	adds	r0, #1
 8004804:	d14c      	bne.n	80048a0 <_printf_i+0x200>
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
 800480a:	b004      	add	sp, #16
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	4834      	ldr	r0, [pc, #208]	; (80048e4 <_printf_i+0x244>)
 8004812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004816:	680e      	ldr	r6, [r1, #0]
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f856 5b04 	ldr.w	r5, [r6], #4
 800481e:	061f      	lsls	r7, r3, #24
 8004820:	600e      	str	r6, [r1, #0]
 8004822:	d514      	bpl.n	800484e <_printf_i+0x1ae>
 8004824:	07d9      	lsls	r1, r3, #31
 8004826:	bf44      	itt	mi
 8004828:	f043 0320 	orrmi.w	r3, r3, #32
 800482c:	6023      	strmi	r3, [r4, #0]
 800482e:	b91d      	cbnz	r5, 8004838 <_printf_i+0x198>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	2310      	movs	r3, #16
 800483a:	e7af      	b.n	800479c <_printf_i+0xfc>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	2378      	movs	r3, #120	; 0x78
 8004846:	4828      	ldr	r0, [pc, #160]	; (80048e8 <_printf_i+0x248>)
 8004848:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800484c:	e7e3      	b.n	8004816 <_printf_i+0x176>
 800484e:	065e      	lsls	r6, r3, #25
 8004850:	bf48      	it	mi
 8004852:	b2ad      	uxthmi	r5, r5
 8004854:	e7e6      	b.n	8004824 <_printf_i+0x184>
 8004856:	4616      	mov	r6, r2
 8004858:	e7bb      	b.n	80047d2 <_printf_i+0x132>
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	6826      	ldr	r6, [r4, #0]
 800485e:	1d1d      	adds	r5, r3, #4
 8004860:	6960      	ldr	r0, [r4, #20]
 8004862:	600d      	str	r5, [r1, #0]
 8004864:	0635      	lsls	r5, r6, #24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	d501      	bpl.n	800486e <_printf_i+0x1ce>
 800486a:	6018      	str	r0, [r3, #0]
 800486c:	e002      	b.n	8004874 <_printf_i+0x1d4>
 800486e:	0671      	lsls	r1, r6, #25
 8004870:	d5fb      	bpl.n	800486a <_printf_i+0x1ca>
 8004872:	8018      	strh	r0, [r3, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	4616      	mov	r6, r2
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	e7ba      	b.n	80047f2 <_printf_i+0x152>
 800487c:	680b      	ldr	r3, [r1, #0]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	600a      	str	r2, [r1, #0]
 8004882:	681e      	ldr	r6, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4630      	mov	r0, r6
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	f000 f82f 	bl	80048ec <memchr>
 800488e:	b108      	cbz	r0, 8004894 <_printf_i+0x1f4>
 8004890:	1b80      	subs	r0, r0, r6
 8004892:	6060      	str	r0, [r4, #4]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	2300      	movs	r3, #0
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	e7a8      	b.n	80047f2 <_printf_i+0x152>
 80048a0:	4632      	mov	r2, r6
 80048a2:	4649      	mov	r1, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	47d0      	blx	sl
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0ab      	beq.n	8004806 <_printf_i+0x166>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	079b      	lsls	r3, r3, #30
 80048b2:	d413      	bmi.n	80048dc <_printf_i+0x23c>
 80048b4:	68e0      	ldr	r0, [r4, #12]
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	4298      	cmp	r0, r3
 80048ba:	bfb8      	it	lt
 80048bc:	4618      	movlt	r0, r3
 80048be:	e7a4      	b.n	800480a <_printf_i+0x16a>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4632      	mov	r2, r6
 80048c4:	4649      	mov	r1, r9
 80048c6:	4640      	mov	r0, r8
 80048c8:	47d0      	blx	sl
 80048ca:	3001      	adds	r0, #1
 80048cc:	d09b      	beq.n	8004806 <_printf_i+0x166>
 80048ce:	3501      	adds	r5, #1
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	9903      	ldr	r1, [sp, #12]
 80048d4:	1a5b      	subs	r3, r3, r1
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	dcf2      	bgt.n	80048c0 <_printf_i+0x220>
 80048da:	e7eb      	b.n	80048b4 <_printf_i+0x214>
 80048dc:	2500      	movs	r5, #0
 80048de:	f104 0619 	add.w	r6, r4, #25
 80048e2:	e7f5      	b.n	80048d0 <_printf_i+0x230>
 80048e4:	08004bdd 	.word	0x08004bdd
 80048e8:	08004bee 	.word	0x08004bee

080048ec <memchr>:
 80048ec:	4603      	mov	r3, r0
 80048ee:	b510      	push	{r4, lr}
 80048f0:	b2c9      	uxtb	r1, r1
 80048f2:	4402      	add	r2, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	d101      	bne.n	80048fe <memchr+0x12>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e003      	b.n	8004906 <memchr+0x1a>
 80048fe:	7804      	ldrb	r4, [r0, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	428c      	cmp	r4, r1
 8004904:	d1f6      	bne.n	80048f4 <memchr+0x8>
 8004906:	bd10      	pop	{r4, pc}

08004908 <memcpy>:
 8004908:	440a      	add	r2, r1
 800490a:	4291      	cmp	r1, r2
 800490c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004910:	d100      	bne.n	8004914 <memcpy+0xc>
 8004912:	4770      	bx	lr
 8004914:	b510      	push	{r4, lr}
 8004916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491a:	4291      	cmp	r1, r2
 800491c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004920:	d1f9      	bne.n	8004916 <memcpy+0xe>
 8004922:	bd10      	pop	{r4, pc}

08004924 <memmove>:
 8004924:	4288      	cmp	r0, r1
 8004926:	b510      	push	{r4, lr}
 8004928:	eb01 0402 	add.w	r4, r1, r2
 800492c:	d902      	bls.n	8004934 <memmove+0x10>
 800492e:	4284      	cmp	r4, r0
 8004930:	4623      	mov	r3, r4
 8004932:	d807      	bhi.n	8004944 <memmove+0x20>
 8004934:	1e43      	subs	r3, r0, #1
 8004936:	42a1      	cmp	r1, r4
 8004938:	d008      	beq.n	800494c <memmove+0x28>
 800493a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004942:	e7f8      	b.n	8004936 <memmove+0x12>
 8004944:	4601      	mov	r1, r0
 8004946:	4402      	add	r2, r0
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <memmove+0x2a>
 800494c:	bd10      	pop	{r4, pc}
 800494e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004956:	e7f7      	b.n	8004948 <memmove+0x24>

08004958 <_free_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4605      	mov	r5, r0
 800495c:	2900      	cmp	r1, #0
 800495e:	d043      	beq.n	80049e8 <_free_r+0x90>
 8004960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004964:	1f0c      	subs	r4, r1, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfb8      	it	lt
 800496a:	18e4      	addlt	r4, r4, r3
 800496c:	f000 f8d0 	bl	8004b10 <__malloc_lock>
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <_free_r+0x94>)
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	4610      	mov	r0, r2
 8004976:	b933      	cbnz	r3, 8004986 <_free_r+0x2e>
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	6014      	str	r4, [r2, #0]
 800497c:	4628      	mov	r0, r5
 800497e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004982:	f000 b8cb 	b.w	8004b1c <__malloc_unlock>
 8004986:	42a3      	cmp	r3, r4
 8004988:	d90a      	bls.n	80049a0 <_free_r+0x48>
 800498a:	6821      	ldr	r1, [r4, #0]
 800498c:	1862      	adds	r2, r4, r1
 800498e:	4293      	cmp	r3, r2
 8004990:	bf01      	itttt	eq
 8004992:	681a      	ldreq	r2, [r3, #0]
 8004994:	685b      	ldreq	r3, [r3, #4]
 8004996:	1852      	addeq	r2, r2, r1
 8004998:	6022      	streq	r2, [r4, #0]
 800499a:	6063      	str	r3, [r4, #4]
 800499c:	6004      	str	r4, [r0, #0]
 800499e:	e7ed      	b.n	800497c <_free_r+0x24>
 80049a0:	461a      	mov	r2, r3
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	b10b      	cbz	r3, 80049aa <_free_r+0x52>
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	d9fa      	bls.n	80049a0 <_free_r+0x48>
 80049aa:	6811      	ldr	r1, [r2, #0]
 80049ac:	1850      	adds	r0, r2, r1
 80049ae:	42a0      	cmp	r0, r4
 80049b0:	d10b      	bne.n	80049ca <_free_r+0x72>
 80049b2:	6820      	ldr	r0, [r4, #0]
 80049b4:	4401      	add	r1, r0
 80049b6:	1850      	adds	r0, r2, r1
 80049b8:	4283      	cmp	r3, r0
 80049ba:	6011      	str	r1, [r2, #0]
 80049bc:	d1de      	bne.n	800497c <_free_r+0x24>
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4401      	add	r1, r0
 80049c4:	6011      	str	r1, [r2, #0]
 80049c6:	6053      	str	r3, [r2, #4]
 80049c8:	e7d8      	b.n	800497c <_free_r+0x24>
 80049ca:	d902      	bls.n	80049d2 <_free_r+0x7a>
 80049cc:	230c      	movs	r3, #12
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	e7d4      	b.n	800497c <_free_r+0x24>
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1821      	adds	r1, r4, r0
 80049d6:	428b      	cmp	r3, r1
 80049d8:	bf01      	itttt	eq
 80049da:	6819      	ldreq	r1, [r3, #0]
 80049dc:	685b      	ldreq	r3, [r3, #4]
 80049de:	1809      	addeq	r1, r1, r0
 80049e0:	6021      	streq	r1, [r4, #0]
 80049e2:	6063      	str	r3, [r4, #4]
 80049e4:	6054      	str	r4, [r2, #4]
 80049e6:	e7c9      	b.n	800497c <_free_r+0x24>
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	20000144 	.word	0x20000144

080049f0 <_malloc_r>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	1ccd      	adds	r5, r1, #3
 80049f4:	f025 0503 	bic.w	r5, r5, #3
 80049f8:	3508      	adds	r5, #8
 80049fa:	2d0c      	cmp	r5, #12
 80049fc:	bf38      	it	cc
 80049fe:	250c      	movcc	r5, #12
 8004a00:	2d00      	cmp	r5, #0
 8004a02:	4606      	mov	r6, r0
 8004a04:	db01      	blt.n	8004a0a <_malloc_r+0x1a>
 8004a06:	42a9      	cmp	r1, r5
 8004a08:	d903      	bls.n	8004a12 <_malloc_r+0x22>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	2000      	movs	r0, #0
 8004a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a12:	f000 f87d 	bl	8004b10 <__malloc_lock>
 8004a16:	4921      	ldr	r1, [pc, #132]	; (8004a9c <_malloc_r+0xac>)
 8004a18:	680a      	ldr	r2, [r1, #0]
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	b99c      	cbnz	r4, 8004a46 <_malloc_r+0x56>
 8004a1e:	4f20      	ldr	r7, [pc, #128]	; (8004aa0 <_malloc_r+0xb0>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b923      	cbnz	r3, 8004a2e <_malloc_r+0x3e>
 8004a24:	4621      	mov	r1, r4
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f862 	bl	8004af0 <_sbrk_r>
 8004a2c:	6038      	str	r0, [r7, #0]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f85d 	bl	8004af0 <_sbrk_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d123      	bne.n	8004a82 <_malloc_r+0x92>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	f000 f86c 	bl	8004b1c <__malloc_unlock>
 8004a44:	e7e3      	b.n	8004a0e <_malloc_r+0x1e>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	1b5b      	subs	r3, r3, r5
 8004a4a:	d417      	bmi.n	8004a7c <_malloc_r+0x8c>
 8004a4c:	2b0b      	cmp	r3, #11
 8004a4e:	d903      	bls.n	8004a58 <_malloc_r+0x68>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	441c      	add	r4, r3
 8004a54:	6025      	str	r5, [r4, #0]
 8004a56:	e004      	b.n	8004a62 <_malloc_r+0x72>
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	42a2      	cmp	r2, r4
 8004a5c:	bf0c      	ite	eq
 8004a5e:	600b      	streq	r3, [r1, #0]
 8004a60:	6053      	strne	r3, [r2, #4]
 8004a62:	4630      	mov	r0, r6
 8004a64:	f000 f85a 	bl	8004b1c <__malloc_unlock>
 8004a68:	f104 000b 	add.w	r0, r4, #11
 8004a6c:	1d23      	adds	r3, r4, #4
 8004a6e:	f020 0007 	bic.w	r0, r0, #7
 8004a72:	1ac2      	subs	r2, r0, r3
 8004a74:	d0cc      	beq.n	8004a10 <_malloc_r+0x20>
 8004a76:	1a1b      	subs	r3, r3, r0
 8004a78:	50a3      	str	r3, [r4, r2]
 8004a7a:	e7c9      	b.n	8004a10 <_malloc_r+0x20>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	6864      	ldr	r4, [r4, #4]
 8004a80:	e7cc      	b.n	8004a1c <_malloc_r+0x2c>
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d0e3      	beq.n	8004a54 <_malloc_r+0x64>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 f82e 	bl	8004af0 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d1dd      	bne.n	8004a54 <_malloc_r+0x64>
 8004a98:	e7cf      	b.n	8004a3a <_malloc_r+0x4a>
 8004a9a:	bf00      	nop
 8004a9c:	20000144 	.word	0x20000144
 8004aa0:	20000148 	.word	0x20000148

08004aa4 <_realloc_r>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	460e      	mov	r6, r1
 8004aac:	b921      	cbnz	r1, 8004ab8 <_realloc_r+0x14>
 8004aae:	4611      	mov	r1, r2
 8004ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ab4:	f7ff bf9c 	b.w	80049f0 <_malloc_r>
 8004ab8:	b922      	cbnz	r2, 8004ac4 <_realloc_r+0x20>
 8004aba:	f7ff ff4d 	bl	8004958 <_free_r>
 8004abe:	4625      	mov	r5, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac4:	f000 f830 	bl	8004b28 <_malloc_usable_size_r>
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d20f      	bcs.n	8004aec <_realloc_r+0x48>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f7ff ff8e 	bl	80049f0 <_malloc_r>
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d0f2      	beq.n	8004ac0 <_realloc_r+0x1c>
 8004ada:	4631      	mov	r1, r6
 8004adc:	4622      	mov	r2, r4
 8004ade:	f7ff ff13 	bl	8004908 <memcpy>
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7ff ff37 	bl	8004958 <_free_r>
 8004aea:	e7e9      	b.n	8004ac0 <_realloc_r+0x1c>
 8004aec:	4635      	mov	r5, r6
 8004aee:	e7e7      	b.n	8004ac0 <_realloc_r+0x1c>

08004af0 <_sbrk_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	2300      	movs	r3, #0
 8004af4:	4d05      	ldr	r5, [pc, #20]	; (8004b0c <_sbrk_r+0x1c>)
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fc ff2c 	bl	8001958 <_sbrk>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_sbrk_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_sbrk_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	2000048c 	.word	0x2000048c

08004b10 <__malloc_lock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_lock+0x8>)
 8004b12:	f000 b811 	b.w	8004b38 <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000494 	.word	0x20000494

08004b1c <__malloc_unlock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__malloc_unlock+0x8>)
 8004b1e:	f000 b80c 	b.w	8004b3a <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000494 	.word	0x20000494

08004b28 <_malloc_usable_size_r>:
 8004b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2c:	1f18      	subs	r0, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfbc      	itt	lt
 8004b32:	580b      	ldrlt	r3, [r1, r0]
 8004b34:	18c0      	addlt	r0, r0, r3
 8004b36:	4770      	bx	lr

08004b38 <__retarget_lock_acquire_recursive>:
 8004b38:	4770      	bx	lr

08004b3a <__retarget_lock_release_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
