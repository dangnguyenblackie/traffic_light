
MCU_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005700  08005700  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005700  08005700  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000094  0800579c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800579c  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001675b  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  00036818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  0003a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198e4  00000000  00000000  0003b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ce1  00000000  00000000  00054af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b481  00000000  00000000  000667d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000f1cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08005614 	.word	0x08005614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08005614 	.word	0x08005614

0800014c <iKeyInput>:


static int counterForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonDoublePressed[NO_OF_BUTTONS]	= 	{0,0,0,0};

GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d822      	bhi.n	80001a0 <iKeyInput+0x54>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <iKeyInput+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000189 	.word	0x08000189
 800016c:	08000195 	.word	0x08000195
	switch(index){
	case 0:
		return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 8000170:	2101      	movs	r1, #1
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <iKeyInput+0x60>)
 8000174:	f002 fd62 	bl	8002c3c <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e012      	b.n	80001a2 <iKeyInput+0x56>
	case 1:
		return HAL_GPIO_ReadPin(A1_MAN_GPIO_Port,A1_MAN_Pin);
 800017c:	2102      	movs	r1, #2
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <iKeyInput+0x60>)
 8000180:	f002 fd5c 	bl	8002c3c <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e00c      	b.n	80001a2 <iKeyInput+0x56>
	case 2:
		return HAL_GPIO_ReadPin(A2_TUNING_GPIO_Port,A2_TUNING_Pin);
 8000188:	2110      	movs	r1, #16
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <iKeyInput+0x60>)
 800018c:	f002 fd56 	bl	8002c3c <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	e006      	b.n	80001a2 <iKeyInput+0x56>
	case 3:
		return HAL_GPIO_ReadPin(A3_SET_GPIO_Port, A3_SET_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <iKeyInput+0x64>)
 8000198:	f002 fd50 	bl	8002c3c <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	e000      	b.n	80001a2 <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 80001a0:	2301      	movs	r3, #1
	}
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <subKeyProcess1+0x60>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	if(counterForButtonDoublePressed[index] == 0 || counterForButtonDoublePressed[index] == DURATION_FOR_DOUBLE_CLICK){
 80001c6:	4a14      	ldr	r2, [pc, #80]	; (8000218 <subKeyProcess1+0x64>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d005      	beq.n	80001de <subKeyProcess1+0x2a>
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <subKeyProcess1+0x64>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001da:	2b32      	cmp	r3, #50	; 0x32
 80001dc:	d104      	bne.n	80001e8 <subKeyProcess1+0x34>
		flagForButtonDoublePressed[index] = 1;
 80001de:	4a0f      	ldr	r2, [pc, #60]	; (800021c <subKeyProcess1+0x68>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2101      	movs	r1, #1
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	if(counterForButtonDoublePressed[index] > 0 && counterForButtonDoublePressed[index] < DURATION_FOR_DOUBLE_CLICK){
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <subKeyProcess1+0x64>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	dd0a      	ble.n	800020a <subKeyProcess1+0x56>
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <subKeyProcess1+0x64>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fc:	2b31      	cmp	r3, #49	; 0x31
 80001fe:	dc04      	bgt.n	800020a <subKeyProcess1+0x56>
		flagForButtonDoublePressed[index]=2;
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <subKeyProcess1+0x68>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2102      	movs	r1, #2
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	200000bc 	.word	0x200000bc
 8000218:	200000fc 	.word	0x200000fc
 800021c:	200000dc 	.word	0x200000dc

08000220 <subKeyProcess2>:

void subKeyProcess2(int index){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <subKeyProcess2+0x1c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	200000cc 	.word	0x200000cc

08000240 <getKeyInput>:

void getKeyInput(){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	e095      	b.n	8000378 <getKeyInput+0x138>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800024c:	4a4f      	ldr	r2, [pc, #316]	; (800038c <getKeyInput+0x14c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	4a4e      	ldr	r2, [pc, #312]	; (8000390 <getKeyInput+0x150>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4413      	add	r3, r2
 800025a:	460a      	mov	r2, r1
 800025c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <getKeyInput+0x154>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	7819      	ldrb	r1, [r3, #0]
 8000266:	4a49      	ldr	r2, [pc, #292]	; (800038c <getKeyInput+0x14c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	460a      	mov	r2, r1
 800026e:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff6b 	bl	800014c <iKeyInput>
 8000276:	4603      	mov	r3, r0
 8000278:	4619      	mov	r1, r3
 800027a:	4a46      	ldr	r2, [pc, #280]	; (8000394 <getKeyInput+0x154>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	460a      	mov	r2, r1
 8000282:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000284:	4a42      	ldr	r2, [pc, #264]	; (8000390 <getKeyInput+0x150>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	493f      	ldr	r1, [pc, #252]	; (800038c <getKeyInput+0x14c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	440b      	add	r3, r1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d16c      	bne.n	8000372 <getKeyInput+0x132>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 8000298:	4a3e      	ldr	r2, [pc, #248]	; (8000394 <getKeyInput+0x154>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	493a      	ldr	r1, [pc, #232]	; (800038c <getKeyInput+0x14c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	440b      	add	r3, r1
 80002a6:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d162      	bne.n	8000372 <getKeyInput+0x132>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 80002ac:	4a3a      	ldr	r2, [pc, #232]	; (8000398 <getKeyInput+0x158>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	4936      	ldr	r1, [pc, #216]	; (8000390 <getKeyInput+0x150>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	440b      	add	r3, r1
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d01c      	beq.n	80002fa <getKeyInput+0xba>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80002c0:	4a33      	ldr	r2, [pc, #204]	; (8000390 <getKeyInput+0x150>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	7819      	ldrb	r1, [r3, #0]
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <getKeyInput+0x158>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	460a      	mov	r2, r1
 80002d0:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002d2:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <getKeyInput+0x150>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d149      	bne.n	8000372 <getKeyInput+0x132>
					subKeyProcess1(i);
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff68 	bl	80001b4 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 80002e4:	4a2d      	ldr	r2, [pc, #180]	; (800039c <getKeyInput+0x15c>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2164      	movs	r1, #100	; 0x64
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonDoublePressed[i] = DURATION_FOR_DOUBLE_CLICK;
 80002ee:	4a2c      	ldr	r2, [pc, #176]	; (80003a0 <getKeyInput+0x160>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2132      	movs	r1, #50	; 0x32
 80002f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f8:	e03b      	b.n	8000372 <getKeyInput+0x132>
				}
			}else{

				if(flagForButtonDoublePressed[i] == 1){
 80002fa:	4a2a      	ldr	r2, [pc, #168]	; (80003a4 <getKeyInput+0x164>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d118      	bne.n	8000338 <getKeyInput+0xf8>
					counterForButtonDoublePressed[i]--;
 8000306:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <getKeyInput+0x160>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	1e5a      	subs	r2, r3, #1
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0x160>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(counterForButtonDoublePressed[i]<=0){
 8000318:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <getKeyInput+0x160>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	2b00      	cmp	r3, #0
 8000322:	dc09      	bgt.n	8000338 <getKeyInput+0xf8>
						counterForButtonDoublePressed[i] = DURATION_FOR_DOUBLE_CLICK;
 8000324:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <getKeyInput+0x160>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2132      	movs	r1, #50	; 0x32
 800032a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForButtonDoublePressed[i] = 0;
 800032e:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <getKeyInput+0x164>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2100      	movs	r1, #0
 8000334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
				}

				counterForButtonPressed1s[i]--;
 8000338:	4a18      	ldr	r2, [pc, #96]	; (800039c <getKeyInput+0x15c>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	4916      	ldr	r1, [pc, #88]	; (800039c <getKeyInput+0x15c>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(counterForButtonPressed1s[i] <= 0){
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <getKeyInput+0x15c>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	2b00      	cmp	r3, #0
 8000354:	dc0d      	bgt.n	8000372 <getKeyInput+0x132>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000356:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <getKeyInput+0x150>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d102      	bne.n	8000368 <getKeyInput+0x128>
						subKeyProcess2(i);
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff5c 	bl	8000220 <subKeyProcess2>
					}
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <getKeyInput+0x15c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2164      	movs	r1, #100	; 0x64
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b03      	cmp	r3, #3
 800037c:	f77f af66 	ble.w	800024c <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000b0 	.word	0x200000b0
 8000390:	200000b4 	.word	0x200000b4
 8000394:	200000b8 	.word	0x200000b8
 8000398:	20000000 	.word	0x20000000
 800039c:	200000ec 	.word	0x200000ec
 80003a0:	200000fc 	.word	0x200000fc
 80003a4:	200000dc 	.word	0x200000dc

080003a8 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d901      	bls.n	80003bc <is_button_pressed+0x14>
 80003b8:	2300      	movs	r3, #0
 80003ba:	e00d      	b.n	80003d8 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <is_button_pressed+0x3c>)
 80003c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <is_button_pressed+0x3c>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <is_button_pressed+0x30>
		}
		return 0;
 80003d6:	2300      	movs	r3, #0
	}
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	200000bc 	.word	0x200000bc

080003e8 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d901      	bls.n	80003fc <is_button_pressed_1s+0x14>
 80003f8:	23ff      	movs	r3, #255	; 0xff
 80003fa:	e00d      	b.n	8000418 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a09      	ldr	r2, [pc, #36]	; (8000424 <is_button_pressed_1s+0x3c>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4a06      	ldr	r2, [pc, #24]	; (8000424 <is_button_pressed_1s+0x3c>)
 800040c:	2100      	movs	r1, #0
 800040e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000412:	2301      	movs	r3, #1
 8000414:	e000      	b.n	8000418 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000416:	2300      	movs	r3, #0
	}
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000cc 	.word	0x200000cc

08000428 <is_button_double_click>:
unsigned char is_button_double_click(unsigned char button_number){
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d901      	bls.n	800043c <is_button_double_click+0x14>
 8000438:	23ff      	movs	r3, #255	; 0xff
 800043a:	e00d      	b.n	8000458 <is_button_double_click+0x30>
		else {
			if(flagForButtonDoublePressed[button_number] == 2){
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <is_button_double_click+0x3c>)
 8000440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d106      	bne.n	8000456 <is_button_double_click+0x2e>
				flagForButtonDoublePressed[button_number] = 0;
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <is_button_double_click+0x3c>)
 800044c:	2100      	movs	r1, #0
 800044e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				return 1;
 8000452:	2301      	movs	r3, #1
 8000454:	e000      	b.n	8000458 <is_button_double_click+0x30>
			}
			return 0;
 8000456:	2300      	movs	r3, #0
		}
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000dc 	.word	0x200000dc

08000468 <fsm_automatic_run>:
 *      Author: phucd, ngocvy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	switch(status){
 800046c:	4ba5      	ldr	r3, [pc, #660]	; (8000704 <fsm_automatic_run+0x29c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b0c      	cmp	r3, #12
 8000472:	dc21      	bgt.n	80004b8 <fsm_automatic_run+0x50>
 8000474:	2b00      	cmp	r3, #0
 8000476:	f340 81c5 	ble.w	8000804 <fsm_automatic_run+0x39c>
 800047a:	3b01      	subs	r3, #1
 800047c:	2b0b      	cmp	r3, #11
 800047e:	f200 81c1 	bhi.w	8000804 <fsm_automatic_run+0x39c>
 8000482:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <fsm_automatic_run+0x20>)
 8000484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000488:	080004e7 	.word	0x080004e7
 800048c:	08000593 	.word	0x08000593
 8000490:	08000805 	.word	0x08000805
 8000494:	08000805 	.word	0x08000805
 8000498:	08000805 	.word	0x08000805
 800049c:	08000805 	.word	0x08000805
 80004a0:	08000805 	.word	0x08000805
 80004a4:	08000805 	.word	0x08000805
 80004a8:	08000805 	.word	0x08000805
 80004ac:	08000805 	.word	0x08000805
 80004b0:	08000651 	.word	0x08000651
 80004b4:	08000741 	.word	0x08000741
 80004b8:	2bff      	cmp	r3, #255	; 0xff
 80004ba:	f040 81a3 	bne.w	8000804 <fsm_automatic_run+0x39c>
		case AUTO_INIT:
			// TODO:
			clearLED(3);	// clear 2 traffic Lights
 80004be:	2003      	movs	r0, #3
 80004c0:	f000 fec4 	bl	800124c <clearLED>

			//SWITCH CASE
			setTimer3(green_time);		// set green1 time
 80004c4:	4b90      	ldr	r3, [pc, #576]	; (8000708 <fsm_automatic_run+0x2a0>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fd23 	bl	8001f14 <setTimer3>
			setTimer4(red_time_2);		// set red2 time
 80004ce:	4b8f      	ldr	r3, [pc, #572]	; (800070c <fsm_automatic_run+0x2a4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fd3a 	bl	8001f4c <setTimer4>
			setTimer2(10);
 80004d8:	200a      	movs	r0, #10
 80004da:	f001 fcff 	bl	8001edc <setTimer2>
			status = AUTO_GREEN1;
 80004de:	4b89      	ldr	r3, [pc, #548]	; (8000704 <fsm_automatic_run+0x29c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]

			break;
 80004e4:	e197      	b.n	8000816 <fsm_automatic_run+0x3ae>
		case AUTO_GREEN1:
			// TODO:
				// RED2 on, GREEN1 on
			setRed(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fdb6 	bl	8001058 <setRed>
			setGreen(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fe33 	bl	8001158 <setGreen>

				// display value by UART
			sendingUART_RUN();
 80004f2:	f001 f8e9 	bl	80016c8 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ff56 	bl	80003a8 <is_button_pressed>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00d      	beq.n	800051e <fsm_automatic_run+0xb6>
				status_pedestrian = STOP_LIGHT;
 8000502:	4b83      	ldr	r3, [pc, #524]	; (8000710 <fsm_automatic_run+0x2a8>)
 8000504:	222d      	movs	r2, #45	; 0x2d
 8000506:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 8000508:	f644 6020 	movw	r0, #20000	; 0x4e20
 800050c:	f001 fcca 	bl	8001ea4 <setTimer1>

				buzzer_freq = BUZZER_FREQ_START;
 8000510:	4b80      	ldr	r3, [pc, #512]	; (8000714 <fsm_automatic_run+0x2ac>)
 8000512:	2232      	movs	r2, #50	; 0x32
 8000514:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <fsm_automatic_run+0x2b0>)
 8000518:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800051c:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag){
 800051e:	4b7f      	ldr	r3, [pc, #508]	; (800071c <fsm_automatic_run+0x2b4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d007      	beq.n	8000536 <fsm_automatic_run+0xce>
				setTimer3(yellow_time);
 8000526:	4b7e      	ldr	r3, [pc, #504]	; (8000720 <fsm_automatic_run+0x2b8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fcf2 	bl	8001f14 <setTimer3>
				status = AUTO_YELLOW1;
 8000530:	4b74      	ldr	r3, [pc, #464]	; (8000704 <fsm_automatic_run+0x29c>)
 8000532:	2202      	movs	r2, #2
 8000534:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff ff36 	bl	80003a8 <is_button_pressed>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d009      	beq.n	8000556 <fsm_automatic_run+0xee>
				status = MAN_GREEN1;
 8000542:	4b70      	ldr	r3, [pc, #448]	; (8000704 <fsm_automatic_run+0x29c>)
 8000544:	2215      	movs	r2, #21
 8000546:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000548:	f644 6020 	movw	r0, #20000	; 0x4e20
 800054c:	f001 fd6e 	bl	800202c <setTimer8>
				setTimer2(10);
 8000550:	200a      	movs	r0, #10
 8000552:	f001 fcc3 	bl	8001edc <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000556:	2002      	movs	r0, #2
 8000558:	f7ff ff26 	bl	80003a8 <is_button_pressed>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	f000 8152 	beq.w	8000808 <fsm_automatic_run+0x3a0>
				status = TUNING_RED;
 8000564:	4b67      	ldr	r3, [pc, #412]	; (8000704 <fsm_automatic_run+0x29c>)
 8000566:	221f      	movs	r2, #31
 8000568:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 800056a:	4b6e      	ldr	r3, [pc, #440]	; (8000724 <fsm_automatic_run+0x2bc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a6e      	ldr	r2, [pc, #440]	; (8000728 <fsm_automatic_run+0x2c0>)
 8000570:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000572:	4b6b      	ldr	r3, [pc, #428]	; (8000720 <fsm_automatic_run+0x2b8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a6d      	ldr	r2, [pc, #436]	; (800072c <fsm_automatic_run+0x2c4>)
 8000578:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 800057a:	4b63      	ldr	r3, [pc, #396]	; (8000708 <fsm_automatic_run+0x2a0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a6c      	ldr	r2, [pc, #432]	; (8000730 <fsm_automatic_run+0x2c8>)
 8000580:	6013      	str	r3, [r2, #0]


				setTimer8(TUNING_TIME);
 8000582:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000586:	f001 fd51 	bl	800202c <setTimer8>
				setTimer9(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f001 fd6a 	bl	8002064 <setTimer9>
			}


			break;
 8000590:	e13a      	b.n	8000808 <fsm_automatic_run+0x3a0>
		case AUTO_YELLOW1:
			// TODO:
				// RED2 still on, YELLOW1 on
			setRed(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fd60 	bl	8001058 <setRed>
			setYellow(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fd9d 	bl	80010d8 <setYellow>

				// display value by UART
			sendingUART_RUN();
 800059e:	f001 f893 	bl	80016c8 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff00 	bl	80003a8 <is_button_pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00d      	beq.n	80005ca <fsm_automatic_run+0x162>
				status_pedestrian =	STOP_LIGHT;
 80005ae:	4b58      	ldr	r3, [pc, #352]	; (8000710 <fsm_automatic_run+0x2a8>)
 80005b0:	222d      	movs	r2, #45	; 0x2d
 80005b2:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 80005b4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80005b8:	f001 fc74 	bl	8001ea4 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 80005bc:	4b55      	ldr	r3, [pc, #340]	; (8000714 <fsm_automatic_run+0x2ac>)
 80005be:	2232      	movs	r2, #50	; 0x32
 80005c0:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 80005c2:	4b55      	ldr	r3, [pc, #340]	; (8000718 <fsm_automatic_run+0x2b0>)
 80005c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005c8:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer3_flag && timer4_flag){
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <fsm_automatic_run+0x2b4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d010      	beq.n	80005f4 <fsm_automatic_run+0x18c>
 80005d2:	4b58      	ldr	r3, [pc, #352]	; (8000734 <fsm_automatic_run+0x2cc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00c      	beq.n	80005f4 <fsm_automatic_run+0x18c>
				setTimer3(red_time);
 80005da:	4b52      	ldr	r3, [pc, #328]	; (8000724 <fsm_automatic_run+0x2bc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fc98 	bl	8001f14 <setTimer3>
				setTimer4(green_time_2);
 80005e4:	4b54      	ldr	r3, [pc, #336]	; (8000738 <fsm_automatic_run+0x2d0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fcaf 	bl	8001f4c <setTimer4>
				status = AUTO_GREEN2;
 80005ee:	4b45      	ldr	r3, [pc, #276]	; (8000704 <fsm_automatic_run+0x29c>)
 80005f0:	220b      	movs	r2, #11
 80005f2:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff fed7 	bl	80003a8 <is_button_pressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d009      	beq.n	8000614 <fsm_automatic_run+0x1ac>
				status = MAN_YELLOW1;
 8000600:	4b40      	ldr	r3, [pc, #256]	; (8000704 <fsm_automatic_run+0x29c>)
 8000602:	2216      	movs	r2, #22
 8000604:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 8000606:	f644 6020 	movw	r0, #20000	; 0x4e20
 800060a:	f001 fd0f 	bl	800202c <setTimer8>
				setTimer2(10);
 800060e:	200a      	movs	r0, #10
 8000610:	f001 fc64 	bl	8001edc <setTimer2>
			}

			if (is_button_pressed(2)) {
 8000614:	2002      	movs	r0, #2
 8000616:	f7ff fec7 	bl	80003a8 <is_button_pressed>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80f5 	beq.w	800080c <fsm_automatic_run+0x3a4>
				status = TUNING_RED;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <fsm_automatic_run+0x29c>)
 8000624:	221f      	movs	r2, #31
 8000626:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 8000628:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <fsm_automatic_run+0x2bc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a3e      	ldr	r2, [pc, #248]	; (8000728 <fsm_automatic_run+0x2c0>)
 800062e:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 8000630:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <fsm_automatic_run+0x2b8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a3d      	ldr	r2, [pc, #244]	; (800072c <fsm_automatic_run+0x2c4>)
 8000636:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <fsm_automatic_run+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a3c      	ldr	r2, [pc, #240]	; (8000730 <fsm_automatic_run+0x2c8>)
 800063e:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 8000640:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000644:	f001 fcf2 	bl	800202c <setTimer8>
				setTimer9(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f001 fd0b 	bl	8002064 <setTimer9>
			}


			break;
 800064e:	e0dd      	b.n	800080c <fsm_automatic_run+0x3a4>
		case AUTO_GREEN2:
			// TODO:
				// RED2 off, GREEN2 on, RED1 on
			setRed(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fd01 	bl	8001058 <setRed>
			setGreen(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fd7e 	bl	8001158 <setGreen>

				// display value by UART
			sendingUART_RUN();
 800065c:	f001 f834 	bl	80016c8 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fea1 	bl	80003a8 <is_button_pressed>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d011      	beq.n	8000690 <fsm_automatic_run+0x228>
				setTimer5(BUZZER_CYCLE);
 800066c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000670:	f001 fc88 	bl	8001f84 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <fsm_automatic_run+0x2a8>)
 8000676:	222e      	movs	r2, #46	; 0x2e
 8000678:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 800067a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800067e:	f001 fc11 	bl	8001ea4 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <fsm_automatic_run+0x2ac>)
 8000684:	2232      	movs	r2, #50	; 0x32
 8000686:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <fsm_automatic_run+0x2b0>)
 800068a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800068e:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag){
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <fsm_automatic_run+0x2cc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <fsm_automatic_run+0x240>
				setTimer4(yellow_time_2);
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <fsm_automatic_run+0x2d4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fc55 	bl	8001f4c <setTimer4>
				status = AUTO_YELLOW2;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <fsm_automatic_run+0x29c>)
 80006a4:	220c      	movs	r2, #12
 80006a6:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fe7d 	bl	80003a8 <is_button_pressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d009      	beq.n	80006c8 <fsm_automatic_run+0x260>
				status = MAN_GREEN2;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <fsm_automatic_run+0x29c>)
 80006b6:	2217      	movs	r2, #23
 80006b8:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 80006ba:	f644 6020 	movw	r0, #20000	; 0x4e20
 80006be:	f001 fcb5 	bl	800202c <setTimer8>
				setTimer2(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f001 fc0a 	bl	8001edc <setTimer2>
			}

			if (is_button_pressed(2)) {
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fe6d 	bl	80003a8 <is_button_pressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 809d 	beq.w	8000810 <fsm_automatic_run+0x3a8>
				status = TUNING_RED;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <fsm_automatic_run+0x29c>)
 80006d8:	221f      	movs	r2, #31
 80006da:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <fsm_automatic_run+0x2bc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <fsm_automatic_run+0x2c0>)
 80006e2:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <fsm_automatic_run+0x2b8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <fsm_automatic_run+0x2c4>)
 80006ea:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <fsm_automatic_run+0x2a0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <fsm_automatic_run+0x2c8>)
 80006f2:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 80006f4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80006f8:	f001 fc98 	bl	800202c <setTimer8>
				setTimer9(10);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 fcb1 	bl	8002064 <setTimer9>
			}



			break;
 8000702:	e085      	b.n	8000810 <fsm_automatic_run+0x3a8>
 8000704:	20000004 	.word	0x20000004
 8000708:	20000014 	.word	0x20000014
 800070c:	20000018 	.word	0x20000018
 8000710:	20000008 	.word	0x20000008
 8000714:	20000140 	.word	0x20000140
 8000718:	2000013c 	.word	0x2000013c
 800071c:	20000154 	.word	0x20000154
 8000720:	20000010 	.word	0x20000010
 8000724:	2000000c 	.word	0x2000000c
 8000728:	20000118 	.word	0x20000118
 800072c:	20000110 	.word	0x20000110
 8000730:	20000114 	.word	0x20000114
 8000734:	2000015c 	.word	0x2000015c
 8000738:	20000020 	.word	0x20000020
 800073c:	2000001c 	.word	0x2000001c
		case AUTO_YELLOW2:
			// TODO:
				// RED1 still on, YELLOW2 on
			setRed(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fc89 	bl	8001058 <setRed>
			setYellow(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fcc6 	bl	80010d8 <setYellow>

				// display value by UART
			sendingUART_RUN();
 800074c:	f000 ffbc 	bl	80016c8 <sendingUART_RUN>

				// if PEDESTRIAN PRESSED:
			if(is_button_pressed(0)){
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fe29 	bl	80003a8 <is_button_pressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d011      	beq.n	8000780 <fsm_automatic_run+0x318>
				setTimer5(BUZZER_CYCLE);
 800075c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000760:	f001 fc10 	bl	8001f84 <setTimer5>
				status_pedestrian = WALK_LIGHT;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <fsm_automatic_run+0x3b4>)
 8000766:	222e      	movs	r2, #46	; 0x2e
 8000768:	601a      	str	r2, [r3, #0]
				setTimer1(PEDESTRIAN_TIME);
 800076a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800076e:	f001 fb99 	bl	8001ea4 <setTimer1>
				buzzer_freq = BUZZER_FREQ_START;
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <fsm_automatic_run+0x3b8>)
 8000774:	2232      	movs	r2, #50	; 0x32
 8000776:	601a      	str	r2, [r3, #0]
				buzzer_time = BUZZER_CYCLE;
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <fsm_automatic_run+0x3bc>)
 800077a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800077e:	601a      	str	r2, [r3, #0]
			}

			//SWITCH CASE
			if(timer4_flag && timer3_flag){
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <fsm_automatic_run+0x3c0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d010      	beq.n	80007aa <fsm_automatic_run+0x342>
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <fsm_automatic_run+0x3c4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00c      	beq.n	80007aa <fsm_automatic_run+0x342>
				setTimer3(green_time);
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <fsm_automatic_run+0x3c8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fbbd 	bl	8001f14 <setTimer3>
				setTimer4(red_time_2);
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <fsm_automatic_run+0x3cc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fbd4 	bl	8001f4c <setTimer4>
				status = AUTO_GREEN1;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <fsm_automatic_run+0x3d0>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
			}

			if (is_button_pressed(1)) {
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fdfc 	bl	80003a8 <is_button_pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <fsm_automatic_run+0x362>
				status = MAN_YELLOW2;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <fsm_automatic_run+0x3d0>)
 80007b8:	2218      	movs	r2, #24
 80007ba:	601a      	str	r2, [r3, #0]
				setTimer8(MANUAL_TIME);
 80007bc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80007c0:	f001 fc34 	bl	800202c <setTimer8>
				setTimer2(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fb89 	bl	8001edc <setTimer2>
			}

			if (is_button_pressed(2)) {
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff fdec 	bl	80003a8 <is_button_pressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01e      	beq.n	8000814 <fsm_automatic_run+0x3ac>
				status = TUNING_RED;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <fsm_automatic_run+0x3d0>)
 80007d8:	221f      	movs	r2, #31
 80007da:	601a      	str	r2, [r3, #0]

				temp_red = red_time;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <fsm_automatic_run+0x3d4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <fsm_automatic_run+0x3d8>)
 80007e2:	6013      	str	r3, [r2, #0]
				temp_yellow = yellow_time;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <fsm_automatic_run+0x3dc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <fsm_automatic_run+0x3e0>)
 80007ea:	6013      	str	r3, [r2, #0]
				temp_green = green_time;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <fsm_automatic_run+0x3c8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <fsm_automatic_run+0x3e4>)
 80007f2:	6013      	str	r3, [r2, #0]

				setTimer8(TUNING_TIME);
 80007f4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80007f8:	f001 fc18 	bl	800202c <setTimer8>
				setTimer9(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f001 fc31 	bl	8002064 <setTimer9>
			}

			break;
 8000802:	e007      	b.n	8000814 <fsm_automatic_run+0x3ac>


		default:
			break;
 8000804:	bf00      	nop
 8000806:	e006      	b.n	8000816 <fsm_automatic_run+0x3ae>
			break;
 8000808:	bf00      	nop
 800080a:	e004      	b.n	8000816 <fsm_automatic_run+0x3ae>
			break;
 800080c:	bf00      	nop
 800080e:	e002      	b.n	8000816 <fsm_automatic_run+0x3ae>
			break;
 8000810:	bf00      	nop
 8000812:	e000      	b.n	8000816 <fsm_automatic_run+0x3ae>
			break;
 8000814:	bf00      	nop
	}
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008
 8000820:	20000140 	.word	0x20000140
 8000824:	2000013c 	.word	0x2000013c
 8000828:	2000015c 	.word	0x2000015c
 800082c:	20000154 	.word	0x20000154
 8000830:	20000014 	.word	0x20000014
 8000834:	20000018 	.word	0x20000018
 8000838:	20000004 	.word	0x20000004
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000118 	.word	0x20000118
 8000844:	20000010 	.word	0x20000010
 8000848:	20000110 	.word	0x20000110
 800084c:	20000114 	.word	0x20000114

08000850 <fsm_manual_run>:
 *      Author: phucd
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	switch(status){
 8000854:	4bb6      	ldr	r3, [pc, #728]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b15      	subs	r3, #21
 800085a:	2b03      	cmp	r3, #3
 800085c:	f200 8184 	bhi.w	8000b68 <fsm_manual_run+0x318>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <fsm_manual_run+0x18>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000879 	.word	0x08000879
 800086c:	08000921 	.word	0x08000921
 8000870:	080009d1 	.word	0x080009d1
 8000874:	08000a81 	.word	0x08000a81
	case MAN_GREEN1:
		// TODO:
			// RED2 on, GREEN1 on
		setRed(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fbed 	bl	8001058 <setRed>
		setGreen(0);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fc6a 	bl	8001158 <setGreen>

			// display value by UART
		sendingUART_MANUAL();
 8000884:	f000 ff90 	bl	80017a8 <sendingUART_MANUAL>


			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fd8d 	bl	80003a8 <is_button_pressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d009      	beq.n	80008a8 <fsm_manual_run+0x58>
			status_pedestrian = STOP_LIGHT;
 8000894:	4ba7      	ldr	r3, [pc, #668]	; (8000b34 <fsm_manual_run+0x2e4>)
 8000896:	222d      	movs	r2, #45	; 0x2d
 8000898:	601a      	str	r2, [r3, #0]
			buzzer_freq = BUZZER_FREQ_START;
 800089a:	4ba7      	ldr	r3, [pc, #668]	; (8000b38 <fsm_manual_run+0x2e8>)
 800089c:	2232      	movs	r2, #50	; 0x32
 800089e:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 80008a0:	4ba6      	ldr	r3, [pc, #664]	; (8000b3c <fsm_manual_run+0x2ec>)
 80008a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a6:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fd7d 	bl	80003a8 <is_button_pressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <fsm_manual_run+0x72>
			setTimer8(MANUAL_TIME);
 80008b4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80008b8:	f001 fbb8 	bl	800202c <setTimer8>
			status = MAN_YELLOW1;
 80008bc:	4b9c      	ldr	r3, [pc, #624]	; (8000b30 <fsm_manual_run+0x2e0>)
 80008be:	2216      	movs	r2, #22
 80008c0:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 80008c2:	4b9f      	ldr	r3, [pc, #636]	; (8000b40 <fsm_manual_run+0x2f0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00c      	beq.n	80008e4 <fsm_manual_run+0x94>
			status = AUTO_YELLOW1;
 80008ca:	4b99      	ldr	r3, [pc, #612]	; (8000b30 <fsm_manual_run+0x2e0>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	601a      	str	r2, [r3, #0]
			setTimer3(yellow_time);
 80008d0:	4b9c      	ldr	r3, [pc, #624]	; (8000b44 <fsm_manual_run+0x2f4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fb1d 	bl	8001f14 <setTimer3>
			setTimer4(yellow_time);
 80008da:	4b9a      	ldr	r3, [pc, #616]	; (8000b44 <fsm_manual_run+0x2f4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fb34 	bl	8001f4c <setTimer4>
		}

		if (is_button_pressed(2)) {
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fd5f 	bl	80003a8 <is_button_pressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f000 813d 	beq.w	8000b6c <fsm_manual_run+0x31c>
			status = TUNING_RED;
 80008f2:	4b8f      	ldr	r3, [pc, #572]	; (8000b30 <fsm_manual_run+0x2e0>)
 80008f4:	221f      	movs	r2, #31
 80008f6:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 80008f8:	4b93      	ldr	r3, [pc, #588]	; (8000b48 <fsm_manual_run+0x2f8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a93      	ldr	r2, [pc, #588]	; (8000b4c <fsm_manual_run+0x2fc>)
 80008fe:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000900:	4b90      	ldr	r3, [pc, #576]	; (8000b44 <fsm_manual_run+0x2f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a92      	ldr	r2, [pc, #584]	; (8000b50 <fsm_manual_run+0x300>)
 8000906:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000908:	4b92      	ldr	r3, [pc, #584]	; (8000b54 <fsm_manual_run+0x304>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a92      	ldr	r2, [pc, #584]	; (8000b58 <fsm_manual_run+0x308>)
 800090e:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000910:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000914:	f001 fb8a 	bl	800202c <setTimer8>
			setTimer9(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fba3 	bl	8002064 <setTimer9>
		}

		break;
 800091e:	e125      	b.n	8000b6c <fsm_manual_run+0x31c>
	case MAN_YELLOW1:
		// TODO:
			// RED2 still on, YELLOW1 on
		setRed(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 fb99 	bl	8001058 <setRed>
		setYellow(0);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fbd6 	bl	80010d8 <setYellow>

			// display value by UART
		sendingUART_MANUAL();
 800092c:	f000 ff3c 	bl	80017a8 <sendingUART_MANUAL>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fd39 	bl	80003a8 <is_button_pressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00d      	beq.n	8000958 <fsm_manual_run+0x108>
			status_pedestrian =	STOP_LIGHT;
 800093c:	4b7d      	ldr	r3, [pc, #500]	; (8000b34 <fsm_manual_run+0x2e4>)
 800093e:	222d      	movs	r2, #45	; 0x2d
 8000940:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 8000942:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000946:	f001 faad 	bl	8001ea4 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 800094a:	4b7b      	ldr	r3, [pc, #492]	; (8000b38 <fsm_manual_run+0x2e8>)
 800094c:	2232      	movs	r2, #50	; 0x32
 800094e:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000950:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <fsm_manual_run+0x2ec>)
 8000952:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000956:	601a      	str	r2, [r3, #0]
		}
		//SWITCH CASE
		if(is_button_pressed(1)){
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff fd25 	bl	80003a8 <is_button_pressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <fsm_manual_run+0x122>
			setTimer8(MANUAL_TIME);
 8000964:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000968:	f001 fb60 	bl	800202c <setTimer8>
			status = MAN_GREEN2;
 800096c:	4b70      	ldr	r3, [pc, #448]	; (8000b30 <fsm_manual_run+0x2e0>)
 800096e:	2217      	movs	r2, #23
 8000970:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000972:	4b73      	ldr	r3, [pc, #460]	; (8000b40 <fsm_manual_run+0x2f0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00c      	beq.n	8000994 <fsm_manual_run+0x144>
			status = AUTO_GREEN2;
 800097a:	4b6d      	ldr	r3, [pc, #436]	; (8000b30 <fsm_manual_run+0x2e0>)
 800097c:	220b      	movs	r2, #11
 800097e:	601a      	str	r2, [r3, #0]
			setTimer3(red_time);
 8000980:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <fsm_manual_run+0x2f8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fac5 	bl	8001f14 <setTimer3>
			setTimer4(green_time_2);
 800098a:	4b74      	ldr	r3, [pc, #464]	; (8000b5c <fsm_manual_run+0x30c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fadc 	bl	8001f4c <setTimer4>
		}

		if (is_button_pressed(2)) {
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff fd07 	bl	80003a8 <is_button_pressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80e7 	beq.w	8000b70 <fsm_manual_run+0x320>
			status = TUNING_RED;
 80009a2:	4b63      	ldr	r3, [pc, #396]	; (8000b30 <fsm_manual_run+0x2e0>)
 80009a4:	221f      	movs	r2, #31
 80009a6:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 80009a8:	4b67      	ldr	r3, [pc, #412]	; (8000b48 <fsm_manual_run+0x2f8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a67      	ldr	r2, [pc, #412]	; (8000b4c <fsm_manual_run+0x2fc>)
 80009ae:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 80009b0:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <fsm_manual_run+0x2f4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a66      	ldr	r2, [pc, #408]	; (8000b50 <fsm_manual_run+0x300>)
 80009b6:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 80009b8:	4b66      	ldr	r3, [pc, #408]	; (8000b54 <fsm_manual_run+0x304>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a66      	ldr	r2, [pc, #408]	; (8000b58 <fsm_manual_run+0x308>)
 80009be:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 80009c0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80009c4:	f001 fb32 	bl	800202c <setTimer8>
			setTimer9(10);
 80009c8:	200a      	movs	r0, #10
 80009ca:	f001 fb4b 	bl	8002064 <setTimer9>
		}

		break;
 80009ce:	e0cf      	b.n	8000b70 <fsm_manual_run+0x320>
	case MAN_GREEN2:
		// TODO:
			// RED2 off, GREEN2 on, RED1 on
		setRed(0);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fb41 	bl	8001058 <setRed>
		setGreen(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 fbbe 	bl	8001158 <setGreen>

			// display value by UART
		sendingUART_MANUAL();
 80009dc:	f000 fee4 	bl	80017a8 <sendingUART_MANUAL>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fce1 	bl	80003a8 <is_button_pressed>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00d      	beq.n	8000a08 <fsm_manual_run+0x1b8>
			status_pedestrian = WALK_LIGHT;
 80009ec:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <fsm_manual_run+0x2e4>)
 80009ee:	222e      	movs	r2, #46	; 0x2e
 80009f0:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 80009f2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80009f6:	f001 fa55 	bl	8001ea4 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <fsm_manual_run+0x2e8>)
 80009fc:	2232      	movs	r2, #50	; 0x32
 80009fe:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000a00:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <fsm_manual_run+0x2ec>)
 8000a02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a06:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fccd 	bl	80003a8 <is_button_pressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <fsm_manual_run+0x1d2>
			setTimer8(MANUAL_TIME);
 8000a14:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000a18:	f001 fb08 	bl	800202c <setTimer8>
			status = MAN_YELLOW2;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000a1e:	2218      	movs	r2, #24
 8000a20:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000a22:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <fsm_manual_run+0x2f0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00c      	beq.n	8000a44 <fsm_manual_run+0x1f4>
			status = AUTO_YELLOW2;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000a2c:	220c      	movs	r2, #12
 8000a2e:	601a      	str	r2, [r3, #0]
			setTimer3(yellow_time_2);
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <fsm_manual_run+0x310>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fa6d 	bl	8001f14 <setTimer3>
			setTimer3(yellow_time_2);
 8000a3a:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <fsm_manual_run+0x310>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fa68 	bl	8001f14 <setTimer3>
		}

		if (is_button_pressed(2)) {
 8000a44:	2002      	movs	r0, #2
 8000a46:	f7ff fcaf 	bl	80003a8 <is_button_pressed>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 8091 	beq.w	8000b74 <fsm_manual_run+0x324>
			status = TUNING_RED;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000a54:	221f      	movs	r2, #31
 8000a56:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <fsm_manual_run+0x2f8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <fsm_manual_run+0x2fc>)
 8000a5e:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000a60:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <fsm_manual_run+0x2f4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <fsm_manual_run+0x300>)
 8000a66:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <fsm_manual_run+0x304>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <fsm_manual_run+0x308>)
 8000a6e:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000a70:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000a74:	f001 fada 	bl	800202c <setTimer8>
			setTimer9(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f001 faf3 	bl	8002064 <setTimer9>
		}

		break;
 8000a7e:	e079      	b.n	8000b74 <fsm_manual_run+0x324>
	case MAN_YELLOW2:
		// TODO:
			// RED1 still on, YELLOW2 on
		setRed(0);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fae9 	bl	8001058 <setRed>
		setYellow(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb26 	bl	80010d8 <setYellow>

			// display value by UART
		sendingUART_MANUAL();
 8000a8c:	f000 fe8c 	bl	80017a8 <sendingUART_MANUAL>

			// if PEDESTRIAN PRESSED:
		if(is_button_pressed(0)){
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fc89 	bl	80003a8 <is_button_pressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00d      	beq.n	8000ab8 <fsm_manual_run+0x268>
			status_pedestrian = WALK_LIGHT;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <fsm_manual_run+0x2e4>)
 8000a9e:	222e      	movs	r2, #46	; 0x2e
 8000aa0:	601a      	str	r2, [r3, #0]
			setTimer1(PEDESTRIAN_TIME);
 8000aa2:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000aa6:	f001 f9fd 	bl	8001ea4 <setTimer1>
			buzzer_freq = BUZZER_FREQ_START;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <fsm_manual_run+0x2e8>)
 8000aac:	2232      	movs	r2, #50	; 0x32
 8000aae:	601a      	str	r2, [r3, #0]
			buzzer_time = BUZZER_CYCLE;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <fsm_manual_run+0x2ec>)
 8000ab2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ab6:	601a      	str	r2, [r3, #0]
		}

		//SWITCH CASE
		if(is_button_pressed(1)){
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fc75 	bl	80003a8 <is_button_pressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <fsm_manual_run+0x282>
			setTimer8(MANUAL_TIME);
 8000ac4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000ac8:	f001 fab0 	bl	800202c <setTimer8>
			status = MAN_GREEN1;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000ace:	2215      	movs	r2, #21
 8000ad0:	601a      	str	r2, [r3, #0]
		}

		if (timer8_flag) {
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <fsm_manual_run+0x2f0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00c      	beq.n	8000af4 <fsm_manual_run+0x2a4>
			setTimer3(green_time);
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <fsm_manual_run+0x304>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa18 	bl	8001f14 <setTimer3>
			setTimer4(red_time_2);
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <fsm_manual_run+0x314>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fa2f 	bl	8001f4c <setTimer4>
			status = AUTO_GREEN1;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
		}

		if (is_button_pressed(2)) {
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fc57 	bl	80003a8 <is_button_pressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d03b      	beq.n	8000b78 <fsm_manual_run+0x328>
			status = TUNING_RED;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <fsm_manual_run+0x2e0>)
 8000b02:	221f      	movs	r2, #31
 8000b04:	601a      	str	r2, [r3, #0]

			temp_red = red_time;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <fsm_manual_run+0x2f8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <fsm_manual_run+0x2fc>)
 8000b0c:	6013      	str	r3, [r2, #0]
			temp_yellow = yellow_time;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <fsm_manual_run+0x2f4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <fsm_manual_run+0x300>)
 8000b14:	6013      	str	r3, [r2, #0]
			temp_green = green_time;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <fsm_manual_run+0x304>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <fsm_manual_run+0x308>)
 8000b1c:	6013      	str	r3, [r2, #0]

			setTimer8(TUNING_TIME);
 8000b1e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000b22:	f001 fa83 	bl	800202c <setTimer8>
			setTimer9(10);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f001 fa9c 	bl	8002064 <setTimer9>
		}

		break;
 8000b2c:	e024      	b.n	8000b78 <fsm_manual_run+0x328>
 8000b2e:	bf00      	nop
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000140 	.word	0x20000140
 8000b3c:	2000013c 	.word	0x2000013c
 8000b40:	2000017c 	.word	0x2000017c
 8000b44:	20000010 	.word	0x20000010
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000118 	.word	0x20000118
 8000b50:	20000110 	.word	0x20000110
 8000b54:	20000014 	.word	0x20000014
 8000b58:	20000114 	.word	0x20000114
 8000b5c:	20000020 	.word	0x20000020
 8000b60:	2000001c 	.word	0x2000001c
 8000b64:	20000018 	.word	0x20000018

	default:
		break;
 8000b68:	bf00      	nop
 8000b6a:	e006      	b.n	8000b7a <fsm_manual_run+0x32a>
		break;
 8000b6c:	bf00      	nop
 8000b6e:	e004      	b.n	8000b7a <fsm_manual_run+0x32a>
		break;
 8000b70:	bf00      	nop
 8000b72:	e002      	b.n	8000b7a <fsm_manual_run+0x32a>
		break;
 8000b74:	bf00      	nop
 8000b76:	e000      	b.n	8000b7a <fsm_manual_run+0x32a>
		break;
 8000b78:	bf00      	nop
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop

08000b80 <fsm_pedestrian_run>:
 *  Created on: Dec 5, 2022
 *      Author: phucd, ngocvy
 */
#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	switch(status_pedestrian){
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <fsm_pedestrian_run+0xf0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b2d      	cmp	r3, #45	; 0x2d
 8000b8a:	d002      	beq.n	8000b92 <fsm_pedestrian_run+0x12>
 8000b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b8e:	d030      	beq.n	8000bf2 <fsm_pedestrian_run+0x72>
			}

			break;
		default:

			break;
 8000b90:	e06c      	b.n	8000c6c <fsm_pedestrian_run+0xec>
			setPedestrian(0);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 fb20 	bl	80011d8 <setPedestrian>
			if(timer1_flag){
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <fsm_pedestrian_run+0xf4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d010      	beq.n	8000bc2 <fsm_pedestrian_run+0x42>
				status_pedestrian = -1;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <fsm_pedestrian_run+0xf0>)
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba6:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 fb15 	bl	80011d8 <setPedestrian>
				buzzer_freq = 0;
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <fsm_pedestrian_run+0xf8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000bb4:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <fsm_pedestrian_run+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <fsm_pedestrian_run+0x100>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN2 || status == AUTO_YELLOW2 || status == MAN_GREEN2 || status == MAN_YELLOW2){
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b0b      	cmp	r3, #11
 8000bc8:	d00b      	beq.n	8000be2 <fsm_pedestrian_run+0x62>
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b0c      	cmp	r3, #12
 8000bd0:	d007      	beq.n	8000be2 <fsm_pedestrian_run+0x62>
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b17      	cmp	r3, #23
 8000bd8:	d003      	beq.n	8000be2 <fsm_pedestrian_run+0x62>
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b18      	cmp	r3, #24
 8000be0:	d141      	bne.n	8000c66 <fsm_pedestrian_run+0xe6>
				status_pedestrian = WALK_LIGHT;
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <fsm_pedestrian_run+0xf0>)
 8000be4:	222e      	movs	r2, #46	; 0x2e
 8000be6:	601a      	str	r2, [r3, #0]
				setTimer5(BUZZER_CYCLE);
 8000be8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bec:	f001 f9ca 	bl	8001f84 <setTimer5>
			break;
 8000bf0:	e039      	b.n	8000c66 <fsm_pedestrian_run+0xe6>
			setPedestrian(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 faf0 	bl	80011d8 <setPedestrian>
			if(status != MAN_GREEN2 || status!= MAN_YELLOW2 ){
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b17      	cmp	r3, #23
 8000bfe:	d103      	bne.n	8000c08 <fsm_pedestrian_run+0x88>
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b18      	cmp	r3, #24
 8000c06:	d001      	beq.n	8000c0c <fsm_pedestrian_run+0x8c>
				Buzzer();
 8000c08:	f000 fe72 	bl	80018f0 <Buzzer>
			if(timer1_flag){
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <fsm_pedestrian_run+0xf4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d010      	beq.n	8000c36 <fsm_pedestrian_run+0xb6>
				status_pedestrian = -1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <fsm_pedestrian_run+0xf0>)
 8000c16:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1a:	601a      	str	r2, [r3, #0]
				setPedestrian(3); // turn off light
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 fadb 	bl	80011d8 <setPedestrian>
				buzzer_freq = 0;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <fsm_pedestrian_run+0xf8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
				buzzer_time = 0;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <fsm_pedestrian_run+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <fsm_pedestrian_run+0x100>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
			if(status == AUTO_GREEN1 || status == AUTO_YELLOW1 || status == MAN_GREEN1 || status == MAN_YELLOW1){
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d00b      	beq.n	8000c56 <fsm_pedestrian_run+0xd6>
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d007      	beq.n	8000c56 <fsm_pedestrian_run+0xd6>
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b15      	cmp	r3, #21
 8000c4c:	d003      	beq.n	8000c56 <fsm_pedestrian_run+0xd6>
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <fsm_pedestrian_run+0x104>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b16      	cmp	r3, #22
 8000c54:	d109      	bne.n	8000c6a <fsm_pedestrian_run+0xea>
				status_pedestrian = STOP_LIGHT;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <fsm_pedestrian_run+0xf0>)
 8000c58:	222d      	movs	r2, #45	; 0x2d
 8000c5a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <fsm_pedestrian_run+0x100>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000c64:	e001      	b.n	8000c6a <fsm_pedestrian_run+0xea>
			break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <fsm_pedestrian_run+0xec>
			break;
 8000c6a:	bf00      	nop
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000144 	.word	0x20000144
 8000c78:	20000140 	.word	0x20000140
 8000c7c:	2000013c 	.word	0x2000013c
 8000c80:	20000198 	.word	0x20000198
 8000c84:	20000004 	.word	0x20000004

08000c88 <fsm_tuning_run>:


#include "fsm_tuning.h"


void fsm_tuning_run(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	switch(status){
 8000c8c:	4b91      	ldr	r3, [pc, #580]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b21      	cmp	r3, #33	; 0x21
 8000c92:	f000 809c 	beq.w	8000dce <fsm_tuning_run+0x146>
 8000c96:	2b21      	cmp	r3, #33	; 0x21
 8000c98:	f300 81ba 	bgt.w	8001010 <fsm_tuning_run+0x388>
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d003      	beq.n	8000ca8 <fsm_tuning_run+0x20>
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	f000 8133 	beq.w	8000f0c <fsm_tuning_run+0x284>
				status = AUTO_INIT;
			}

			break;
		default:
			break;
 8000ca6:	e1b3      	b.n	8001010 <fsm_tuning_run+0x388>
			if(is_button_pressed(3)){
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff fb7d 	bl	80003a8 <is_button_pressed>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d013      	beq.n	8000cdc <fsm_tuning_run+0x54>
				temp_red += 1000;
 8000cb4:	4b88      	ldr	r3, [pc, #544]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cbc:	4a86      	ldr	r2, [pc, #536]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cbe:	6013      	str	r3, [r2, #0]
				if(temp_red>999*1000) temp_red = 999*1000;
 8000cc0:	4b85      	ldr	r3, [pc, #532]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a85      	ldr	r2, [pc, #532]	; (8000edc <fsm_tuning_run+0x254>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	dd02      	ble.n	8000cd0 <fsm_tuning_run+0x48>
 8000cca:	4b83      	ldr	r3, [pc, #524]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000ccc:	4a83      	ldr	r2, [pc, #524]	; (8000edc <fsm_tuning_run+0x254>)
 8000cce:	601a      	str	r2, [r3, #0]
				sendingUART_SETTING();
 8000cd0:	f000 fdd2 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000cd4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000cd8:	f001 f9a8 	bl	800202c <setTimer8>
			if(is_button_pressed_1s(3)){
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fb83 	bl	80003e8 <is_button_pressed_1s>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d013      	beq.n	8000d10 <fsm_tuning_run+0x88>
				temp_red -= 1000;
 8000ce8:	4b7b      	ldr	r3, [pc, #492]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000cf0:	4a79      	ldr	r2, [pc, #484]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cf2:	6013      	str	r3, [r2, #0]
				if(temp_red <= 0) temp_red = 1000;
 8000cf4:	4b78      	ldr	r3, [pc, #480]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dc03      	bgt.n	8000d04 <fsm_tuning_run+0x7c>
 8000cfc:	4b76      	ldr	r3, [pc, #472]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	601a      	str	r2, [r3, #0]
				sendingUART_SETTING();
 8000d04:	f000 fdb8 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000d08:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d0c:	f001 f98e 	bl	800202c <setTimer8>
			if(timer9_flag){
 8000d10:	4b73      	ldr	r3, [pc, #460]	; (8000ee0 <fsm_tuning_run+0x258>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00d      	beq.n	8000d34 <fsm_tuning_run+0xac>
				setRed(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f99d 	bl	8001058 <setRed>
				setRed(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 f99a 	bl	8001058 <setRed>
				setTimer9(2000);
 8000d24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d28:	f001 f99c 	bl	8002064 <setTimer9>
				setTimer7(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f001 f960 	bl	8001ff4 <setTimer7>
			if(timer7_flag){
 8000d34:	4b6b      	ldr	r3, [pc, #428]	; (8000ee4 <fsm_tuning_run+0x25c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <fsm_tuning_run+0xba>
				setRed(2);	// Turn off
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 f98b 	bl	8001058 <setRed>
			if(is_button_pressed(1)){
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fb30 	bl	80003a8 <is_button_pressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01b      	beq.n	8000d86 <fsm_tuning_run+0xfe>
				red_time = temp_red;
 8000d4e:	4b62      	ldr	r3, [pc, #392]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a65      	ldr	r2, [pc, #404]	; (8000ee8 <fsm_tuning_run+0x260>)
 8000d54:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a64      	ldr	r2, [pc, #400]	; (8000eec <fsm_tuning_run+0x264>)
 8000d5c:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000d5e:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <fsm_tuning_run+0x26c>)
 8000d64:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000d66:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a63      	ldr	r2, [pc, #396]	; (8000ef8 <fsm_tuning_run+0x270>)
 8000d6c:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000d6e:	4b63      	ldr	r3, [pc, #396]	; (8000efc <fsm_tuning_run+0x274>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a63      	ldr	r2, [pc, #396]	; (8000f00 <fsm_tuning_run+0x278>)
 8000d74:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000d76:	4b61      	ldr	r3, [pc, #388]	; (8000efc <fsm_tuning_run+0x274>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a62      	ldr	r2, [pc, #392]	; (8000f04 <fsm_tuning_run+0x27c>)
 8000d7c:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000d7e:	4b55      	ldr	r3, [pc, #340]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	601a      	str	r2, [r3, #0]
			break;
 8000d84:	e146      	b.n	8001014 <fsm_tuning_run+0x38c>
			else if(timer8_flag){
 8000d86:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <fsm_tuning_run+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <fsm_tuning_run+0x10e>
				status = AUTO_INIT;
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000d90:	22ff      	movs	r2, #255	; 0xff
 8000d92:	601a      	str	r2, [r3, #0]
			break;
 8000d94:	e13e      	b.n	8001014 <fsm_tuning_run+0x38c>
			else if(is_button_pressed(2)){
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fb06 	bl	80003a8 <is_button_pressed>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00a      	beq.n	8000db8 <fsm_tuning_run+0x130>
				status = TUNING_YELLOW;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000da4:	2221      	movs	r2, #33	; 0x21
 8000da6:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000da8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000dac:	f001 f93e 	bl	800202c <setTimer8>
				setTimer9(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f001 f957 	bl	8002064 <setTimer9>
			break;
 8000db6:	e12d      	b.n	8001014 <fsm_tuning_run+0x38c>
			else if(is_button_double_click(3)){
 8000db8:	2003      	movs	r0, #3
 8000dba:	f7ff fb35 	bl	8000428 <is_button_double_click>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 8127 	beq.w	8001014 <fsm_tuning_run+0x38c>
				status = AUTO_INIT;
 8000dc6:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	601a      	str	r2, [r3, #0]
			break;
 8000dcc:	e122      	b.n	8001014 <fsm_tuning_run+0x38c>
			if(is_button_pressed(3)){
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f7ff faea 	bl	80003a8 <is_button_pressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <fsm_tuning_run+0x16a>
				temp_yellow += 1000;
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000de2:	4a43      	ldr	r2, [pc, #268]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000de4:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000de6:	f000 fd47 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000dea:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000dee:	f001 f91d 	bl	800202c <setTimer8>
			if(is_button_pressed_1s(3)){
 8000df2:	2003      	movs	r0, #3
 8000df4:	f7ff faf8 	bl	80003e8 <is_button_pressed_1s>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <fsm_tuning_run+0x18e>
				temp_yellow -= 1000;
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000e06:	4a3a      	ldr	r2, [pc, #232]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000e08:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000e0a:	f000 fd35 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000e0e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e12:	f001 f90b 	bl	800202c <setTimer8>
			if(timer9_flag){
 8000e16:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <fsm_tuning_run+0x258>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <fsm_tuning_run+0x1b2>
				setYellow(0);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f95a 	bl	80010d8 <setYellow>
				setYellow(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 f957 	bl	80010d8 <setYellow>
				setTimer9(2000);
 8000e2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e2e:	f001 f919 	bl	8002064 <setTimer9>
				setTimer7(1000);
 8000e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e36:	f001 f8dd 	bl	8001ff4 <setTimer7>
			if(timer7_flag){
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <fsm_tuning_run+0x25c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <fsm_tuning_run+0x1c0>
				setRed(2);	// Turn off
 8000e42:	2002      	movs	r0, #2
 8000e44:	f000 f908 	bl	8001058 <setRed>
			if(is_button_pressed(1)){
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff faad 	bl	80003a8 <is_button_pressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01b      	beq.n	8000e8c <fsm_tuning_run+0x204>
				red_time = temp_red;
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <fsm_tuning_run+0x260>)
 8000e5a:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <fsm_tuning_run+0x250>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a22      	ldr	r2, [pc, #136]	; (8000eec <fsm_tuning_run+0x264>)
 8000e62:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <fsm_tuning_run+0x26c>)
 8000e6a:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <fsm_tuning_run+0x268>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <fsm_tuning_run+0x270>)
 8000e72:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <fsm_tuning_run+0x274>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <fsm_tuning_run+0x278>)
 8000e7a:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <fsm_tuning_run+0x274>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <fsm_tuning_run+0x27c>)
 8000e82:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000e86:	22ff      	movs	r2, #255	; 0xff
 8000e88:	601a      	str	r2, [r3, #0]
			break;
 8000e8a:	e0c5      	b.n	8001018 <fsm_tuning_run+0x390>
			else if(timer8_flag){
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <fsm_tuning_run+0x280>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <fsm_tuning_run+0x214>
				status = AUTO_INIT;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	601a      	str	r2, [r3, #0]
			break;
 8000e9a:	e0bd      	b.n	8001018 <fsm_tuning_run+0x390>
			else if(is_button_pressed(2)){
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fa83 	bl	80003a8 <is_button_pressed>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00a      	beq.n	8000ebe <fsm_tuning_run+0x236>
				status = TUNING_GREEN;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000eaa:	2220      	movs	r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000eae:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000eb2:	f001 f8bb 	bl	800202c <setTimer8>
				setTimer9(10);
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f001 f8d4 	bl	8002064 <setTimer9>
			break;
 8000ebc:	e0ac      	b.n	8001018 <fsm_tuning_run+0x390>
			else if(is_button_double_click(3)){
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff fab2 	bl	8000428 <is_button_double_click>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a6 	beq.w	8001018 <fsm_tuning_run+0x390>
				status = AUTO_INIT;
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <fsm_tuning_run+0x24c>)
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	601a      	str	r2, [r3, #0]
			break;
 8000ed2:	e0a1      	b.n	8001018 <fsm_tuning_run+0x390>
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	20000118 	.word	0x20000118
 8000edc:	000f3e58 	.word	0x000f3e58
 8000ee0:	20000184 	.word	0x20000184
 8000ee4:	20000174 	.word	0x20000174
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000018 	.word	0x20000018
 8000ef0:	20000110 	.word	0x20000110
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	2000001c 	.word	0x2000001c
 8000efc:	20000114 	.word	0x20000114
 8000f00:	20000014 	.word	0x20000014
 8000f04:	20000020 	.word	0x20000020
 8000f08:	2000017c 	.word	0x2000017c
			if(is_button_pressed(3)){
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f7ff fa4b 	bl	80003a8 <is_button_pressed>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <fsm_tuning_run+0x2a8>
				temp_green += 1000;
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <fsm_tuning_run+0x39c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f20:	4a40      	ldr	r2, [pc, #256]	; (8001024 <fsm_tuning_run+0x39c>)
 8000f22:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000f24:	f000 fca8 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000f28:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000f2c:	f001 f87e 	bl	800202c <setTimer8>
			if(is_button_pressed_1s(3)){
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff fa59 	bl	80003e8 <is_button_pressed_1s>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <fsm_tuning_run+0x2cc>
				temp_green -= 1000;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <fsm_tuning_run+0x39c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000f44:	4a37      	ldr	r2, [pc, #220]	; (8001024 <fsm_tuning_run+0x39c>)
 8000f46:	6013      	str	r3, [r2, #0]
				sendingUART_SETTING();
 8000f48:	f000 fc96 	bl	8001878 <sendingUART_SETTING>
				setTimer8(TUNING_TIME);
 8000f4c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000f50:	f001 f86c 	bl	800202c <setTimer8>
			if(timer9_flag){
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <fsm_tuning_run+0x3a0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00d      	beq.n	8000f78 <fsm_tuning_run+0x2f0>
				setGreen(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f8fb 	bl	8001158 <setGreen>
				setGreen(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 f8f8 	bl	8001158 <setGreen>
				setTimer9(2000);
 8000f68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f6c:	f001 f87a 	bl	8002064 <setTimer9>
				setTimer7(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f001 f83e 	bl	8001ff4 <setTimer7>
			if(timer7_flag){
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <fsm_tuning_run+0x3a4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <fsm_tuning_run+0x2fe>
				setRed(2);	// Turn off
 8000f80:	2002      	movs	r0, #2
 8000f82:	f000 f869 	bl	8001058 <setRed>
			if(is_button_pressed(1)){
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fa0e 	bl	80003a8 <is_button_pressed>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01b      	beq.n	8000fca <fsm_tuning_run+0x342>
				red_time = temp_red;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <fsm_tuning_run+0x3a8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a27      	ldr	r2, [pc, #156]	; (8001034 <fsm_tuning_run+0x3ac>)
 8000f98:	6013      	str	r3, [r2, #0]
				red_time_2 = temp_red;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <fsm_tuning_run+0x3a8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <fsm_tuning_run+0x3b0>)
 8000fa0:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <fsm_tuning_run+0x3b4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <fsm_tuning_run+0x3b8>)
 8000fa8:	6013      	str	r3, [r2, #0]
				yellow_time_2 = temp_yellow;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <fsm_tuning_run+0x3b4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a25      	ldr	r2, [pc, #148]	; (8001044 <fsm_tuning_run+0x3bc>)
 8000fb0:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <fsm_tuning_run+0x39c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a24      	ldr	r2, [pc, #144]	; (8001048 <fsm_tuning_run+0x3c0>)
 8000fb8:	6013      	str	r3, [r2, #0]
				green_time_2 = temp_green;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <fsm_tuning_run+0x39c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <fsm_tuning_run+0x3c4>)
 8000fc0:	6013      	str	r3, [r2, #0]
				status = AUTO_INIT;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <fsm_tuning_run+0x3c8>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	601a      	str	r2, [r3, #0]
			break;
 8000fc8:	e028      	b.n	800101c <fsm_tuning_run+0x394>
			else if(timer8_flag){
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <fsm_tuning_run+0x3cc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <fsm_tuning_run+0x352>
				status = AUTO_INIT;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <fsm_tuning_run+0x3c8>)
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	601a      	str	r2, [r3, #0]
			break;
 8000fd8:	e020      	b.n	800101c <fsm_tuning_run+0x394>
			else if(is_button_pressed(2)){
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f7ff f9e4 	bl	80003a8 <is_button_pressed>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <fsm_tuning_run+0x374>
				status = TUNING_RED;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <fsm_tuning_run+0x3c8>)
 8000fe8:	221f      	movs	r2, #31
 8000fea:	601a      	str	r2, [r3, #0]
				setTimer8(TUNING_TIME);
 8000fec:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000ff0:	f001 f81c 	bl	800202c <setTimer8>
				setTimer9(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 f835 	bl	8002064 <setTimer9>
			break;
 8000ffa:	e00f      	b.n	800101c <fsm_tuning_run+0x394>
			else if(is_button_double_click(3)){
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff fa13 	bl	8000428 <is_button_double_click>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d009      	beq.n	800101c <fsm_tuning_run+0x394>
				status = AUTO_INIT;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <fsm_tuning_run+0x3c8>)
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	601a      	str	r2, [r3, #0]
			break;
 800100e:	e005      	b.n	800101c <fsm_tuning_run+0x394>
			break;
 8001010:	bf00      	nop
 8001012:	e004      	b.n	800101e <fsm_tuning_run+0x396>
			break;
 8001014:	bf00      	nop
 8001016:	e002      	b.n	800101e <fsm_tuning_run+0x396>
			break;
 8001018:	bf00      	nop
 800101a:	e000      	b.n	800101e <fsm_tuning_run+0x396>
			break;
 800101c:	bf00      	nop
	}
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000114 	.word	0x20000114
 8001028:	20000184 	.word	0x20000184
 800102c:	20000174 	.word	0x20000174
 8001030:	20000118 	.word	0x20000118
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000018 	.word	0x20000018
 800103c:	20000110 	.word	0x20000110
 8001040:	20000010 	.word	0x20000010
 8001044:	2000001c 	.word	0x2000001c
 8001048:	20000014 	.word	0x20000014
 800104c:	20000020 	.word	0x20000020
 8001050:	20000004 	.word	0x20000004
 8001054:	2000017c 	.word	0x2000017c

08001058 <setRed>:
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <setRed+0x16>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d00c      	beq.n	8001086 <setRed+0x2e>
 800106c:	e016      	b.n	800109c <setRed+0x44>
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <setRed+0x78>)
 8001076:	f001 fdf8 	bl	8002c6a <HAL_GPIO_WritePin>
 800107a:	2200      	movs	r2, #0
 800107c:	2108      	movs	r1, #8
 800107e:	4815      	ldr	r0, [pc, #84]	; (80010d4 <setRed+0x7c>)
 8001080:	f001 fdf3 	bl	8002c6a <HAL_GPIO_WritePin>
 8001084:	e020      	b.n	80010c8 <setRed+0x70>
 8001086:	2201      	movs	r2, #1
 8001088:	2120      	movs	r1, #32
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <setRed+0x7c>)
 800108c:	f001 fded 	bl	8002c6a <HAL_GPIO_WritePin>
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <setRed+0x7c>)
 8001096:	f001 fde8 	bl	8002c6a <HAL_GPIO_WritePin>
 800109a:	e015      	b.n	80010c8 <setRed+0x70>
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <setRed+0x78>)
 80010a4:	f001 fde1 	bl	8002c6a <HAL_GPIO_WritePin>
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <setRed+0x7c>)
 80010ae:	f001 fddc 	bl	8002c6a <HAL_GPIO_WritePin>
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <setRed+0x7c>)
 80010b8:	f001 fdd7 	bl	8002c6a <HAL_GPIO_WritePin>
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <setRed+0x7c>)
 80010c2:	f001 fdd2 	bl	8002c6a <HAL_GPIO_WritePin>
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <setYellow>:
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <setYellow+0x16>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d00c      	beq.n	8001106 <setYellow+0x2e>
 80010ec:	e016      	b.n	800111c <setYellow+0x44>
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <setYellow+0x78>)
 80010f6:	f001 fdb8 	bl	8002c6a <HAL_GPIO_WritePin>
 80010fa:	2201      	movs	r2, #1
 80010fc:	2108      	movs	r1, #8
 80010fe:	4815      	ldr	r0, [pc, #84]	; (8001154 <setYellow+0x7c>)
 8001100:	f001 fdb3 	bl	8002c6a <HAL_GPIO_WritePin>
 8001104:	e020      	b.n	8001148 <setYellow+0x70>
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <setYellow+0x7c>)
 800110c:	f001 fdad 	bl	8002c6a <HAL_GPIO_WritePin>
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <setYellow+0x7c>)
 8001116:	f001 fda8 	bl	8002c6a <HAL_GPIO_WritePin>
 800111a:	e015      	b.n	8001148 <setYellow+0x70>
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <setYellow+0x78>)
 8001124:	f001 fda1 	bl	8002c6a <HAL_GPIO_WritePin>
 8001128:	2200      	movs	r2, #0
 800112a:	2108      	movs	r1, #8
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <setYellow+0x7c>)
 800112e:	f001 fd9c 	bl	8002c6a <HAL_GPIO_WritePin>
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <setYellow+0x7c>)
 8001138:	f001 fd97 	bl	8002c6a <HAL_GPIO_WritePin>
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <setYellow+0x7c>)
 8001142:	f001 fd92 	bl	8002c6a <HAL_GPIO_WritePin>
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00

08001158 <setGreen>:
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <setGreen+0x16>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d00c      	beq.n	8001186 <setGreen+0x2e>
 800116c:	e016      	b.n	800119c <setGreen+0x44>
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001174:	4816      	ldr	r0, [pc, #88]	; (80011d0 <setGreen+0x78>)
 8001176:	f001 fd78 	bl	8002c6a <HAL_GPIO_WritePin>
 800117a:	2201      	movs	r2, #1
 800117c:	2108      	movs	r1, #8
 800117e:	4815      	ldr	r0, [pc, #84]	; (80011d4 <setGreen+0x7c>)
 8001180:	f001 fd73 	bl	8002c6a <HAL_GPIO_WritePin>
 8001184:	e020      	b.n	80011c8 <setGreen+0x70>
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <setGreen+0x7c>)
 800118c:	f001 fd6d 	bl	8002c6a <HAL_GPIO_WritePin>
 8001190:	2201      	movs	r2, #1
 8001192:	2110      	movs	r1, #16
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <setGreen+0x7c>)
 8001196:	f001 fd68 	bl	8002c6a <HAL_GPIO_WritePin>
 800119a:	e015      	b.n	80011c8 <setGreen+0x70>
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	480b      	ldr	r0, [pc, #44]	; (80011d0 <setGreen+0x78>)
 80011a4:	f001 fd61 	bl	8002c6a <HAL_GPIO_WritePin>
 80011a8:	2200      	movs	r2, #0
 80011aa:	2108      	movs	r1, #8
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <setGreen+0x7c>)
 80011ae:	f001 fd5c 	bl	8002c6a <HAL_GPIO_WritePin>
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <setGreen+0x7c>)
 80011b8:	f001 fd57 	bl	8002c6a <HAL_GPIO_WritePin>
 80011bc:	2200      	movs	r2, #0
 80011be:	2110      	movs	r1, #16
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <setGreen+0x7c>)
 80011c2:	f001 fd52 	bl	8002c6a <HAL_GPIO_WritePin>
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <setPedestrian>:
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <setPedestrian+0x16>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00d      	beq.n	8001208 <setPedestrian+0x30>
 80011ec:	e019      	b.n	8001222 <setPedestrian+0x4a>
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <setPedestrian+0x6c>)
 80011f6:	f001 fd38 	bl	8002c6a <HAL_GPIO_WritePin>
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <setPedestrian+0x70>)
 8001202:	f001 fd32 	bl	8002c6a <HAL_GPIO_WritePin>
 8001206:	e019      	b.n	800123c <setPedestrian+0x64>
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <setPedestrian+0x6c>)
 8001210:	f001 fd2b 	bl	8002c6a <HAL_GPIO_WritePin>
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <setPedestrian+0x70>)
 800121c:	f001 fd25 	bl	8002c6a <HAL_GPIO_WritePin>
 8001220:	e00c      	b.n	800123c <setPedestrian+0x64>
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <setPedestrian+0x6c>)
 800122a:	f001 fd1e 	bl	8002c6a <HAL_GPIO_WritePin>
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <setPedestrian+0x70>)
 8001236:	f001 fd18 	bl	8002c6a <HAL_GPIO_WritePin>
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40010800 	.word	0x40010800

0800124c <clearLED>:
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <clearLED+0x16>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d00c      	beq.n	800127a <clearLED+0x2e>
 8001260:	e016      	b.n	8001290 <clearLED+0x44>
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <clearLED+0x78>)
 800126a:	f001 fcfe 	bl	8002c6a <HAL_GPIO_WritePin>
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4815      	ldr	r0, [pc, #84]	; (80012c8 <clearLED+0x7c>)
 8001274:	f001 fcf9 	bl	8002c6a <HAL_GPIO_WritePin>
 8001278:	e020      	b.n	80012bc <clearLED+0x70>
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	4812      	ldr	r0, [pc, #72]	; (80012c8 <clearLED+0x7c>)
 8001280:	f001 fcf3 	bl	8002c6a <HAL_GPIO_WritePin>
 8001284:	2200      	movs	r2, #0
 8001286:	2110      	movs	r1, #16
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <clearLED+0x7c>)
 800128a:	f001 fcee 	bl	8002c6a <HAL_GPIO_WritePin>
 800128e:	e015      	b.n	80012bc <clearLED+0x70>
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <clearLED+0x78>)
 8001298:	f001 fce7 	bl	8002c6a <HAL_GPIO_WritePin>
 800129c:	2200      	movs	r2, #0
 800129e:	2108      	movs	r1, #8
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <clearLED+0x7c>)
 80012a2:	f001 fce2 	bl	8002c6a <HAL_GPIO_WritePin>
 80012a6:	2200      	movs	r2, #0
 80012a8:	2120      	movs	r1, #32
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <clearLED+0x7c>)
 80012ac:	f001 fcdd 	bl	8002c6a <HAL_GPIO_WritePin>
 80012b0:	2200      	movs	r2, #0
 80012b2:	2110      	movs	r1, #16
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <clearLED+0x7c>)
 80012b6:	f001 fcd8 	bl	8002c6a <HAL_GPIO_WritePin>
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f001 f910 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f840 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f000 f96c 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012dc:	f000 f87e 	bl	80013dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80012e0:	f000 f8c8 	bl	8001474 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80012e4:	f000 f93c 	bl	8001560 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <main+0x6c>)
 80012ea:	f002 f941 	bl	8003570 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012ee:	2100      	movs	r1, #0
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <main+0x70>)
 80012f2:	f002 f9e7 	bl	80036c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(TimerRun,0,10);
 80012f6:	220a      	movs	r2, #10
 80012f8:	2100      	movs	r1, #0
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <main+0x74>)
 80012fc:	f000 fb62 	bl	80019c4 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8001300:	220a      	movs	r2, #10
 8001302:	2100      	movs	r1, #0
 8001304:	480f      	ldr	r0, [pc, #60]	; (8001344 <main+0x78>)
 8001306:	f000 fb5d 	bl	80019c4 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run, 0, 10);
 800130a:	220a      	movs	r2, #10
 800130c:	2100      	movs	r1, #0
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <main+0x7c>)
 8001310:	f000 fb58 	bl	80019c4 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8001314:	220a      	movs	r2, #10
 8001316:	2100      	movs	r1, #0
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <main+0x80>)
 800131a:	f000 fb53 	bl	80019c4 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 10);
 800131e:	220a      	movs	r2, #10
 8001320:	2100      	movs	r1, #0
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <main+0x84>)
 8001324:	f000 fb4e 	bl	80019c4 <SCH_Add_Task>

  SCH_Add_Task(fsm_pedestrian_run, 0, 10);
 8001328:	220a      	movs	r2, #10
 800132a:	2100      	movs	r1, #0
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <main+0x88>)
 800132e:	f000 fb49 	bl	80019c4 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8001332:	f000 fda1 	bl	8001e78 <SCH_Dispatch_Tasks>
 8001336:	e7fc      	b.n	8001332 <main+0x66>
 8001338:	200001e0 	.word	0x200001e0
 800133c:	20000198 	.word	0x20000198
 8001340:	0800209d 	.word	0x0800209d
 8001344:	08000241 	.word	0x08000241
 8001348:	08000469 	.word	0x08000469
 800134c:	08000851 	.word	0x08000851
 8001350:	08000c89 	.word	0x08000c89
 8001354:	08000b81 	.word	0x08000b81

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	; 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fd12 	bl	8004d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	2310      	movs	r3, #16
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800138e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fc7f 	bl	8002c9c <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80013a4:	f000 f98a 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2102      	movs	r1, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 feea 	bl	800319c <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013ce:	f000 f975 	bl	80016bc <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3740      	adds	r7, #64	; 0x40
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM2_Init+0x94>)
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_TIM2_Init+0x94>)
 8001402:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM2_Init+0x94>)
 8001410:	224f      	movs	r2, #79	; 0x4f
 8001412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_TIM2_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_TIM2_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <MX_TIM2_Init+0x94>)
 8001422:	f002 f855 	bl	80034d0 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800142c:	f000 f946 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM2_Init+0x94>)
 800143e:	f002 fba9 	bl	8003b94 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001448:	f000 f938 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM2_Init+0x94>)
 800145a:	f002 ff27 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 f92a 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001e0 	.word	0x200001e0

08001474 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <MX_TIM3_Init+0xe8>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014ac:	223f      	movs	r2, #63	; 0x3f
 80014ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ca:	4823      	ldr	r0, [pc, #140]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014cc:	f002 f800 	bl	80034d0 <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014d6:	f000 f8f1 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014e8:	f002 fb54 	bl	8003b94 <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014f2:	f000 f8e3 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_TIM3_Init+0xe4>)
 80014f8:	f002 f88c 	bl	8003614 <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001502:	f000 f8db 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_TIM3_Init+0xe4>)
 8001516:	f002 fec9 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001520:	f000 f8cc 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM3_Init+0xe4>)
 800153c:	f002 fa6c 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001546:	f000 f8b9 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM3_Init+0xe4>)
 800154c:	f000 feb0 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000198 	.word	0x20000198
 800155c:	40000400 	.word	0x40000400

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f002 fef8 	bl	800438c <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f88b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000228 	.word	0x20000228
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <MX_GPIO_Init+0xe8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <MX_GPIO_Init+0xe8>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <MX_GPIO_Init+0xe8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <MX_GPIO_Init+0xe8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <MX_GPIO_Init+0xe8>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <MX_GPIO_Init+0xe8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80015fe:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001600:	f001 fb33 	bl	8002c6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800160a:	4826      	ldr	r0, [pc, #152]	; (80016a4 <MX_GPIO_Init+0xf0>)
 800160c:	f001 fb2d 	bl	8002c6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_MAN_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_MAN_Pin;
 8001610:	2303      	movs	r3, #3
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	4820      	ldr	r0, [pc, #128]	; (80016a4 <MX_GPIO_Init+0xf0>)
 8001624:	f001 f986 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_TUNING_Pin */
  GPIO_InitStruct.Pin = A2_TUNING_Pin;
 8001628:	2310      	movs	r3, #16
 800162a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_TUNING_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	481a      	ldr	r0, [pc, #104]	; (80016a4 <MX_GPIO_Init+0xf0>)
 800163c:	f001 f97a 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_SET_Pin */
  GPIO_InitStruct.Pin = A3_SET_Pin;
 8001640:	2301      	movs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_SET_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001654:	f001 f96e 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin D3_LED_GREEN1_Pin D5_LED_GREEN2_Pin D4_LED_RED2_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|D3_LED_GREEN1_Pin|D5_LED_GREEN2_Pin|D4_LED_RED2_Pin;
 8001658:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800165c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2302      	movs	r3, #2
 8001668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001672:	f001 f95f 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin D2_LED_RED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|D2_LED_RED1_Pin;
 8001676:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800167a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_GPIO_Init+0xf0>)
 8001690:	f001 f950 	bl	8002934 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40010800 	.word	0x40010800

080016a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80016b0:	f000 fbaa 	bl	8001e08 <SCH_Update>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <sendingUART_RUN>:
 *      Author: PC
 */

#include "perihersal.h"

void sendingUART_RUN(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	if(timer2_flag){
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <sendingUART_RUN+0xb0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d04f      	beq.n	8001774 <sendingUART_RUN+0xac>
		if(!timer3_flag){
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <sendingUART_RUN+0xb4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d115      	bne.n	8001708 <sendingUART_RUN+0x40>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#\r\n", timer3_counter/100), 1000);
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <sendingUART_RUN+0xb8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a28      	ldr	r2, [pc, #160]	; (8001784 <sendingUART_RUN+0xbc>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1152      	asrs	r2, r2, #5
 80016e8:	17db      	asrs	r3, r3, #31
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4926      	ldr	r1, [pc, #152]	; (8001788 <sendingUART_RUN+0xc0>)
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <sendingUART_RUN+0xc4>)
 80016f2:	f003 fb55 	bl	8004da0 <siprintf>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	4923      	ldr	r1, [pc, #140]	; (800178c <sendingUART_RUN+0xc4>)
 8001700:	4823      	ldr	r0, [pc, #140]	; (8001790 <sendingUART_RUN+0xc8>)
 8001702:	f002 fe90 	bl	8004426 <HAL_UART_Transmit>
 8001706:	e00b      	b.n	8001720 <sendingUART_RUN+0x58>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#\r\n"), 1000);
 8001708:	4922      	ldr	r1, [pc, #136]	; (8001794 <sendingUART_RUN+0xcc>)
 800170a:	4820      	ldr	r0, [pc, #128]	; (800178c <sendingUART_RUN+0xc4>)
 800170c:	f003 fb48 	bl	8004da0 <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	491c      	ldr	r1, [pc, #112]	; (800178c <sendingUART_RUN+0xc4>)
 800171a:	481d      	ldr	r0, [pc, #116]	; (8001790 <sendingUART_RUN+0xc8>)
 800171c:	f002 fe83 	bl	8004426 <HAL_UART_Transmit>
		}

		if(!timer4_flag){
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <sendingUART_RUN+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d115      	bne.n	8001754 <sendingUART_RUN+0x8c>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#\r\n", timer4_counter/100), 1000);
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <sendingUART_RUN+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a15      	ldr	r2, [pc, #84]	; (8001784 <sendingUART_RUN+0xbc>)
 800172e:	fb82 1203 	smull	r1, r2, r2, r3
 8001732:	1152      	asrs	r2, r2, #5
 8001734:	17db      	asrs	r3, r3, #31
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	461a      	mov	r2, r3
 800173a:	4919      	ldr	r1, [pc, #100]	; (80017a0 <sendingUART_RUN+0xd8>)
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <sendingUART_RUN+0xc4>)
 800173e:	f003 fb2f 	bl	8004da0 <siprintf>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	4910      	ldr	r1, [pc, #64]	; (800178c <sendingUART_RUN+0xc4>)
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <sendingUART_RUN+0xc8>)
 800174e:	f002 fe6a 	bl	8004426 <HAL_UART_Transmit>
 8001752:	e00b      	b.n	800176c <sendingUART_RUN+0xa4>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#\r\n"), 1000);
 8001754:	4913      	ldr	r1, [pc, #76]	; (80017a4 <sendingUART_RUN+0xdc>)
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <sendingUART_RUN+0xc4>)
 8001758:	f003 fb22 	bl	8004da0 <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <sendingUART_RUN+0xc4>)
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <sendingUART_RUN+0xc8>)
 8001768:	f002 fe5d 	bl	8004426 <HAL_UART_Transmit>
		}
		setTimer2(1000);
 800176c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001770:	f000 fbb4 	bl	8001edc <setTimer2>
	}
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000014c 	.word	0x2000014c
 800177c:	20000154 	.word	0x20000154
 8001780:	20000158 	.word	0x20000158
 8001784:	51eb851f 	.word	0x51eb851f
 8001788:	0800562c 	.word	0x0800562c
 800178c:	2000011c 	.word	0x2000011c
 8001790:	20000228 	.word	0x20000228
 8001794:	08005640 	.word	0x08005640
 8001798:	2000015c 	.word	0x2000015c
 800179c:	20000160 	.word	0x20000160
 80017a0:	08005658 	.word	0x08005658
 80017a4:	0800566c 	.word	0x0800566c

080017a8 <sendingUART_MANUAL>:

void sendingUART_MANUAL(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	if(timer2_flag){
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <sendingUART_MANUAL+0xa8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d04a      	beq.n	800184a <sendingUART_MANUAL+0xa2>
		if(!timer8_flag){
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <sendingUART_MANUAL+0xac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d12a      	bne.n	8001812 <sendingUART_MANUAL+0x6a>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT1#\r\n", timer8_counter/100), 1000);
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <sendingUART_MANUAL+0xb0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <sendingUART_MANUAL+0xb4>)
 80017c2:	fb82 1203 	smull	r1, r2, r2, r3
 80017c6:	1152      	asrs	r2, r2, #5
 80017c8:	17db      	asrs	r3, r3, #31
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4924      	ldr	r1, [pc, #144]	; (8001860 <sendingUART_MANUAL+0xb8>)
 80017d0:	4824      	ldr	r0, [pc, #144]	; (8001864 <sendingUART_MANUAL+0xbc>)
 80017d2:	f003 fae5 	bl	8004da0 <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	4921      	ldr	r1, [pc, #132]	; (8001864 <sendingUART_MANUAL+0xbc>)
 80017e0:	4821      	ldr	r0, [pc, #132]	; (8001868 <sendingUART_MANUAL+0xc0>)
 80017e2:	f002 fe20 	bl	8004426 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:%d:LIGHT2#\r\n", timer8_counter/100), 1000);
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <sendingUART_MANUAL+0xb0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <sendingUART_MANUAL+0xb4>)
 80017ec:	fb82 1203 	smull	r1, r2, r2, r3
 80017f0:	1152      	asrs	r2, r2, #5
 80017f2:	17db      	asrs	r3, r3, #31
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	491c      	ldr	r1, [pc, #112]	; (800186c <sendingUART_MANUAL+0xc4>)
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <sendingUART_MANUAL+0xbc>)
 80017fc:	f003 fad0 	bl	8004da0 <siprintf>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <sendingUART_MANUAL+0xbc>)
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <sendingUART_MANUAL+0xc0>)
 800180c:	f002 fe0b 	bl	8004426 <HAL_UART_Transmit>
 8001810:	e017      	b.n	8001842 <sendingUART_MANUAL+0x9a>
		}else{
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT1#\r\n"), 1000);
 8001812:	4917      	ldr	r1, [pc, #92]	; (8001870 <sendingUART_MANUAL+0xc8>)
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <sendingUART_MANUAL+0xbc>)
 8001816:	f003 fac3 	bl	8004da0 <siprintf>
 800181a:	4603      	mov	r3, r0
 800181c:	b29a      	uxth	r2, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	4910      	ldr	r1, [pc, #64]	; (8001864 <sendingUART_MANUAL+0xbc>)
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <sendingUART_MANUAL+0xc0>)
 8001826:	f002 fdfe 	bl	8004426 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!7SEG:DELAY:LIGHT2#\r\n"), 1000);
 800182a:	4912      	ldr	r1, [pc, #72]	; (8001874 <sendingUART_MANUAL+0xcc>)
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <sendingUART_MANUAL+0xbc>)
 800182e:	f003 fab7 	bl	8004da0 <siprintf>
 8001832:	4603      	mov	r3, r0
 8001834:	b29a      	uxth	r2, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <sendingUART_MANUAL+0xbc>)
 800183c:	480a      	ldr	r0, [pc, #40]	; (8001868 <sendingUART_MANUAL+0xc0>)
 800183e:	f002 fdf2 	bl	8004426 <HAL_UART_Transmit>
		}
		setTimer2(1000);
 8001842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001846:	f000 fb49 	bl	8001edc <setTimer2>
	}
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000014c 	.word	0x2000014c
 8001854:	2000017c 	.word	0x2000017c
 8001858:	20000180 	.word	0x20000180
 800185c:	51eb851f 	.word	0x51eb851f
 8001860:	0800562c 	.word	0x0800562c
 8001864:	2000011c 	.word	0x2000011c
 8001868:	20000228 	.word	0x20000228
 800186c:	08005658 	.word	0x08005658
 8001870:	08005640 	.word	0x08005640
 8001874:	0800566c 	.word	0x0800566c

08001878 <sendingUART_SETTING>:

void sendingUART_SETTING(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af02      	add	r7, sp, #8
		HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf (buffer_tx,"!RED:%d:YELLOW:%d:GREEN:%d#\r\n", temp_red/1000, temp_yellow/1000, temp_green/1000), 1000);
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <sendingUART_SETTING+0x5c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <sendingUART_SETTING+0x60>)
 8001884:	fb82 1203 	smull	r1, r2, r2, r3
 8001888:	1192      	asrs	r2, r2, #6
 800188a:	17db      	asrs	r3, r3, #31
 800188c:	1ad1      	subs	r1, r2, r3
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <sendingUART_SETTING+0x64>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <sendingUART_SETTING+0x60>)
 8001894:	fb82 0203 	smull	r0, r2, r2, r3
 8001898:	1192      	asrs	r2, r2, #6
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad0      	subs	r0, r2, r3
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <sendingUART_SETTING+0x68>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <sendingUART_SETTING+0x60>)
 80018a4:	fb82 c203 	smull	ip, r2, r2, r3
 80018a8:	1192      	asrs	r2, r2, #6
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4603      	mov	r3, r0
 80018b2:	460a      	mov	r2, r1
 80018b4:	490b      	ldr	r1, [pc, #44]	; (80018e4 <sendingUART_SETTING+0x6c>)
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <sendingUART_SETTING+0x70>)
 80018b8:	f003 fa72 	bl	8004da0 <siprintf>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c4:	4908      	ldr	r1, [pc, #32]	; (80018e8 <sendingUART_SETTING+0x70>)
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <sendingUART_SETTING+0x74>)
 80018c8:	f002 fdad 	bl	8004426 <HAL_UART_Transmit>
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000118 	.word	0x20000118
 80018d8:	10624dd3 	.word	0x10624dd3
 80018dc:	20000110 	.word	0x20000110
 80018e0:	20000114 	.word	0x20000114
 80018e4:	08005684 	.word	0x08005684
 80018e8:	2000011c 	.word	0x2000011c
 80018ec:	20000228 	.word	0x20000228

080018f0 <Buzzer>:

void Buzzer(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	if(timer5_flag){
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <Buzzer+0xb8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d04b      	beq.n	8001994 <Buzzer+0xa4>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_freq);
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <Buzzer+0xbc>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <Buzzer+0xc0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(buzzer_time/2);
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <Buzzer+0xc4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0fda      	lsrs	r2, r3, #31
 800190c:	4413      	add	r3, r2
 800190e:	105b      	asrs	r3, r3, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fb53 	bl	8001fbc <setTimer6>
		if(timer3_counter<=2000){
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <Buzzer+0xc8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800191e:	dc1a      	bgt.n	8001956 <Buzzer+0x66>
			buzzer_freq *= 2;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <Buzzer+0xbc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <Buzzer+0xbc>)
 8001928:	6013      	str	r3, [r2, #0]
			buzzer_time = (timer3_counter>0)? timer3_counter/3 : buzzer_time/3;
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <Buzzer+0xc8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dd07      	ble.n	8001942 <Buzzer+0x52>
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <Buzzer+0xc8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <Buzzer+0xcc>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	17db      	asrs	r3, r3, #31
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	e006      	b.n	8001950 <Buzzer+0x60>
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <Buzzer+0xc4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <Buzzer+0xcc>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	17db      	asrs	r3, r3, #31
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <Buzzer+0xc4>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e009      	b.n	800196a <Buzzer+0x7a>
		}else{
			buzzer_freq += 50;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <Buzzer+0xbc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3332      	adds	r3, #50	; 0x32
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <Buzzer+0xbc>)
 800195e:	6013      	str	r3, [r2, #0]
			buzzer_time -= 50;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <Buzzer+0xc4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3b32      	subs	r3, #50	; 0x32
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <Buzzer+0xc4>)
 8001968:	6013      	str	r3, [r2, #0]
		}


		if(buzzer_freq >= 1000) buzzer_freq = 1000;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <Buzzer+0xbc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	db03      	blt.n	800197c <Buzzer+0x8c>
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <Buzzer+0xbc>)
 8001976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197a:	601a      	str	r2, [r3, #0]
		if(buzzer_time <= 100)	buzzer_time = 100;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <Buzzer+0xc4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b64      	cmp	r3, #100	; 0x64
 8001982:	dc02      	bgt.n	800198a <Buzzer+0x9a>
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <Buzzer+0xc4>)
 8001986:	2264      	movs	r2, #100	; 0x64
 8001988:	601a      	str	r2, [r3, #0]
		setTimer5(buzzer_time);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <Buzzer+0xc4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 faf8 	bl	8001f84 <setTimer5>
	}
	if(timer6_flag){
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <Buzzer+0xd0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <Buzzer+0xb4>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <Buzzer+0xc0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2200      	movs	r2, #0
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000164 	.word	0x20000164
 80019ac:	20000140 	.word	0x20000140
 80019b0:	20000198 	.word	0x20000198
 80019b4:	2000013c 	.word	0x2000013c
 80019b8:	20000158 	.word	0x20000158
 80019bc:	55555556 	.word	0x55555556
 80019c0:	2000016c 	.word	0x2000016c

080019c4 <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80019c4:	b4b0      	push	{r4, r5, r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <SCH_Add_Task+0x24c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b1d      	cmp	r3, #29
 80019d6:	f300 81bd 	bgt.w	8001d54 <SCH_Add_Task+0x390>

        if(len == 0){
 80019da:	4b8d      	ldr	r3, [pc, #564]	; (8001c10 <SCH_Add_Task+0x24c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 80019e2:	4a8c      	ldr	r2, [pc, #560]	; (8001c14 <SCH_Add_Task+0x250>)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4a8b      	ldr	r2, [pc, #556]	; (8001c18 <SCH_Add_Task+0x254>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	4a88      	ldr	r2, [pc, #544]	; (8001c14 <SCH_Add_Task+0x250>)
 80019f4:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <SCH_Add_Task+0x254>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a04:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 8001a06:	4b83      	ldr	r3, [pc, #524]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 8001a0c:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <SCH_Add_Task+0x258>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e196      	b.n	8001d42 <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 8001a14:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <SCH_Add_Task+0x258>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	497e      	ldr	r1, [pc, #504]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	f0c0 80ba 	bcc.w	8001ba4 <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 8001a30:	4b7a      	ldr	r3, [pc, #488]	; (8001c1c <SCH_Add_Task+0x258>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e002      	b.n	8001a3e <SCH_Add_Task+0x7a>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <SCH_Add_Task+0x25c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	da0f      	bge.n	8001a68 <SCH_Add_Task+0xa4>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4a73      	ldr	r2, [pc, #460]	; (8001c18 <SCH_Add_Task+0x254>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	08d9      	lsrs	r1, r3, #3
 8001a52:	4870      	ldr	r0, [pc, #448]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4403      	add	r3, r0
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4299      	cmp	r1, r3
 8001a66:	d2e7      	bcs.n	8001a38 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 8001a68:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <SCH_Add_Task+0x25c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d144      	bne.n	8001afc <SCH_Add_Task+0x138>
 8001a72:	4968      	ldr	r1, [pc, #416]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d338      	bcc.n	8001afc <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4961      	ldr	r1, [pc, #388]	; (8001c14 <SCH_Add_Task+0x250>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	495c      	ldr	r1, [pc, #368]	; (8001c18 <SCH_Add_Task+0x254>)
 8001aa6:	fba1 1303 	umull	r1, r3, r1, r3
 8001aaa:	08d9      	lsrs	r1, r3, #3
 8001aac:	4859      	ldr	r0, [pc, #356]	; (8001c14 <SCH_Add_Task+0x250>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4403      	add	r3, r0
 8001ab8:	3304      	adds	r3, #4
 8001aba:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <SCH_Add_Task+0x254>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	08d9      	lsrs	r1, r3, #3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4608      	mov	r0, r1
 8001acc:	4951      	ldr	r1, [pc, #324]	; (8001c14 <SCH_Add_Task+0x250>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3308      	adds	r3, #8
 8001ada:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	494c      	ldr	r1, [pc, #304]	; (8001c14 <SCH_Add_Task+0x250>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	330c      	adds	r3, #12
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <SCH_Add_Task+0x25c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <SCH_Add_Task+0x258>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e122      	b.n	8001d42 <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 8001afc:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <SCH_Add_Task+0x24c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e017      	b.n	8001b34 <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	4842      	ldr	r0, [pc, #264]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b0a:	6939      	ldr	r1, [r7, #16]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4418      	add	r0, r3
 8001b16:	493f      	ldr	r1, [pc, #252]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	4604      	mov	r4, r0
 8001b24:	461d      	mov	r5, r3
 8001b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dce3      	bgt.n	8001b04 <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 8001b3c:	4935      	ldr	r1, [pc, #212]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <SCH_Add_Task+0x254>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	08d9      	lsrs	r1, r3, #3
 8001b58:	482e      	ldr	r0, [pc, #184]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4403      	add	r3, r0
 8001b66:	3304      	adds	r3, #4
 8001b68:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <SCH_Add_Task+0x254>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	4618      	mov	r0, r3
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3308      	adds	r3, #8
 8001b86:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001b88:	4922      	ldr	r1, [pc, #136]	; (8001c14 <SCH_Add_Task+0x250>)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	330c      	adds	r3, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <SCH_Add_Task+0x258>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e0ce      	b.n	8001d42 <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <SCH_Add_Task+0x258>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e002      	b.n	8001bb2 <SCH_Add_Task+0x1ee>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <SCH_Add_Task+0x260>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dd0f      	ble.n	8001bdc <SCH_Add_Task+0x218>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <SCH_Add_Task+0x254>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	08d9      	lsrs	r1, r3, #3
 8001bc6:	4813      	ldr	r0, [pc, #76]	; (8001c14 <SCH_Add_Task+0x250>)
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4403      	add	r3, r0
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4299      	cmp	r1, r3
 8001bda:	d3e7      	bcc.n	8001bac <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <SCH_Add_Task+0x260>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d156      	bne.n	8001c94 <SCH_Add_Task+0x2d0>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <SCH_Add_Task+0x254>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	08d9      	lsrs	r1, r3, #3
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <SCH_Add_Task+0x250>)
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4299      	cmp	r1, r3
 8001c04:	d246      	bcs.n	8001c94 <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 8001c06:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <SCH_Add_Task+0x24c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e024      	b.n	8001c58 <SCH_Add_Task+0x294>
 8001c0e:	bf00      	nop
 8001c10:	200004d0 	.word	0x200004d0
 8001c14:	20000278 	.word	0x20000278
 8001c18:	cccccccd 	.word	0xcccccccd
 8001c1c:	20000274 	.word	0x20000274
 8001c20:	2000026c 	.word	0x2000026c
 8001c24:	20000270 	.word	0x20000270
                        sTask[j] = sTask[j-1];
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	484c      	ldr	r0, [pc, #304]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c2e:	6939      	ldr	r1, [r7, #16]
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4418      	add	r0, r3
 8001c3a:	4949      	ldr	r1, [pc, #292]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	4604      	mov	r4, r0
 8001c48:	461d      	mov	r5, r3
 8001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <SCH_Add_Task+0x3a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dce2      	bgt.n	8001c28 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 8001c62:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <SCH_Add_Task+0x3a4>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c74:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a3b      	ldr	r2, [pc, #236]	; (8001d68 <SCH_Add_Task+0x3a4>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c84:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <SCH_Add_Task+0x3a8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e056      	b.n	8001d42 <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <SCH_Add_Task+0x3ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e017      	b.n	8001ccc <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1e5a      	subs	r2, r3, #1
 8001ca0:	482f      	ldr	r0, [pc, #188]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4418      	add	r0, r3
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	4604      	mov	r4, r0
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc2:	682b      	ldr	r3, [r5, #0]
 8001cc4:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dce2      	bgt.n	8001c9c <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 8001cdc:	4920      	ldr	r1, [pc, #128]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <SCH_Add_Task+0x3a4>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	08d9      	lsrs	r1, r3, #3
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4403      	add	r3, r0
 8001d06:	3304      	adds	r3, #4
 8001d08:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <SCH_Add_Task+0x3a4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	4618      	mov	r0, r3
 8001d16:	4912      	ldr	r1, [pc, #72]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3308      	adds	r3, #8
 8001d26:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001d28:	490d      	ldr	r1, [pc, #52]	; (8001d60 <SCH_Add_Task+0x39c>)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	330c      	adds	r3, #12
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <SCH_Add_Task+0x3a8>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SCH_Add_Task+0x3ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <SCH_Add_Task+0x3b0>)
 8001d48:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <SCH_Add_Task+0x3ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <SCH_Add_Task+0x3ac>)
 8001d52:	6013      	str	r3, [r2, #0]

	}

}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bcb0      	pop	{r4, r5, r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000278 	.word	0x20000278
 8001d64:	20000270 	.word	0x20000270
 8001d68:	cccccccd 	.word	0xcccccccd
 8001d6c:	20000274 	.word	0x20000274
 8001d70:	200004d0 	.word	0x200004d0
 8001d74:	2000026c 	.word	0x2000026c

08001d78 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <SCH_Delete_Then_Add_Task+0x84>)
 8001d80:	463c      	mov	r4, r7
 8001d82:	461d      	mov	r5, r3
 8001d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e017      	b.n	8001dc2 <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	4819      	ldr	r0, [pc, #100]	; (8001dfc <SCH_Delete_Then_Add_Task+0x84>)
 8001d98:	6979      	ldr	r1, [r7, #20]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4418      	add	r0, r3
 8001da4:	4915      	ldr	r1, [pc, #84]	; (8001dfc <SCH_Delete_Then_Add_Task+0x84>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	4604      	mov	r4, r0
 8001db2:	461d      	mov	r5, r3
 8001db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <SCH_Delete_Then_Add_Task+0x88>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbe1      	blt.n	8001d92 <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <SCH_Delete_Then_Add_Task+0x88>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SCH_Delete_Then_Add_Task+0x88>)
 8001dd6:	6013      	str	r3, [r2, #0]
		tail -= 1;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <SCH_Delete_Then_Add_Task+0x8c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <SCH_Delete_Then_Add_Task+0x8c>)
 8001de0:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7ff fde9 	bl	80019c4 <SCH_Add_Task>

}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000278 	.word	0x20000278
 8001e00:	200004d0 	.word	0x200004d0
 8001e04:	2000026c 	.word	0x2000026c

08001e08 <SCH_Update>:


void SCH_Update(void) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001e12:	e015      	b.n	8001e40 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 8001e14:	4916      	ldr	r1, [pc, #88]	; (8001e70 <SCH_Update+0x68>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	330c      	adds	r3, #12
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1c59      	adds	r1, r3, #1
 8001e28:	4811      	ldr	r0, [pc, #68]	; (8001e70 <SCH_Update+0x68>)
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4403      	add	r3, r0
 8001e36:	330c      	adds	r3, #12
 8001e38:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001e40:	490b      	ldr	r1, [pc, #44]	; (8001e70 <SCH_Update+0x68>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3304      	adds	r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <SCH_Update+0x6c>)
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d9dc      	bls.n	8001e14 <SCH_Update+0xc>
	}

	counter+=1;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <SCH_Update+0x6c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <SCH_Update+0x6c>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000278 	.word	0x20000278
 8001e74:	2000010c 	.word	0x2000010c

08001e78 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 8001e7c:	e009      	b.n	8001e92 <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <SCH_Dispatch_Tasks+0x28>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <SCH_Dispatch_Tasks+0x28>)
 8001e86:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SCH_Dispatch_Tasks+0x28>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 8001e8e:	f7ff ff73 	bl	8001d78 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <SCH_Dispatch_Tasks+0x28>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f1      	bne.n	8001e7e <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000278 	.word	0x20000278

08001ea4 <setTimer1>:
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <setTimer1+0x2c>)
 8001eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb4:	1092      	asrs	r2, r2, #2
 8001eb6:	17db      	asrs	r3, r3, #31
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <setTimer1+0x30>)
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <setTimer1+0x34>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	66666667 	.word	0x66666667
 8001ed4:	20000148 	.word	0x20000148
 8001ed8:	20000144 	.word	0x20000144

08001edc <setTimer2>:
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <setTimer2+0x2c>)
 8001ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eec:	1092      	asrs	r2, r2, #2
 8001eee:	17db      	asrs	r3, r3, #31
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <setTimer2+0x30>)
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <setTimer2+0x34>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	66666667 	.word	0x66666667
 8001f0c:	20000150 	.word	0x20000150
 8001f10:	2000014c 	.word	0x2000014c

08001f14 <setTimer3>:
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <setTimer3+0x2c>)
 8001f20:	fb82 1203 	smull	r1, r2, r2, r3
 8001f24:	1092      	asrs	r2, r2, #2
 8001f26:	17db      	asrs	r3, r3, #31
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <setTimer3+0x30>)
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <setTimer3+0x34>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	66666667 	.word	0x66666667
 8001f44:	20000158 	.word	0x20000158
 8001f48:	20000154 	.word	0x20000154

08001f4c <setTimer4>:
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <setTimer4+0x2c>)
 8001f58:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5c:	1092      	asrs	r2, r2, #2
 8001f5e:	17db      	asrs	r3, r3, #31
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <setTimer4+0x30>)
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <setTimer4+0x34>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	66666667 	.word	0x66666667
 8001f7c:	20000160 	.word	0x20000160
 8001f80:	2000015c 	.word	0x2000015c

08001f84 <setTimer5>:
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <setTimer5+0x2c>)
 8001f90:	fb82 1203 	smull	r1, r2, r2, r3
 8001f94:	1092      	asrs	r2, r2, #2
 8001f96:	17db      	asrs	r3, r3, #31
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <setTimer5+0x30>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <setTimer5+0x34>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	20000168 	.word	0x20000168
 8001fb8:	20000164 	.word	0x20000164

08001fbc <setTimer6>:
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <setTimer6+0x2c>)
 8001fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fcc:	1092      	asrs	r2, r2, #2
 8001fce:	17db      	asrs	r3, r3, #31
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4a06      	ldr	r2, [pc, #24]	; (8001fec <setTimer6+0x30>)
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <setTimer6+0x34>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	66666667 	.word	0x66666667
 8001fec:	20000170 	.word	0x20000170
 8001ff0:	2000016c 	.word	0x2000016c

08001ff4 <setTimer7>:
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <setTimer7+0x2c>)
 8002000:	fb82 1203 	smull	r1, r2, r2, r3
 8002004:	1092      	asrs	r2, r2, #2
 8002006:	17db      	asrs	r3, r3, #31
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <setTimer7+0x30>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <setTimer7+0x34>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	66666667 	.word	0x66666667
 8002024:	20000178 	.word	0x20000178
 8002028:	20000174 	.word	0x20000174

0800202c <setTimer8>:
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <setTimer8+0x2c>)
 8002038:	fb82 1203 	smull	r1, r2, r2, r3
 800203c:	1092      	asrs	r2, r2, #2
 800203e:	17db      	asrs	r3, r3, #31
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	4a06      	ldr	r2, [pc, #24]	; (800205c <setTimer8+0x30>)
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <setTimer8+0x34>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	66666667 	.word	0x66666667
 800205c:	20000180 	.word	0x20000180
 8002060:	2000017c 	.word	0x2000017c

08002064 <setTimer9>:
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <setTimer9+0x2c>)
 8002070:	fb82 1203 	smull	r1, r2, r2, r3
 8002074:	1092      	asrs	r2, r2, #2
 8002076:	17db      	asrs	r3, r3, #31
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <setTimer9+0x30>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <setTimer9+0x34>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	66666667 	.word	0x66666667
 8002094:	20000188 	.word	0x20000188
 8002098:	20000184 	.word	0x20000184

0800209c <TimerRun>:
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <TimerRun+0xf8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	dd05      	ble.n	80020b4 <TimerRun+0x18>
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <TimerRun+0xf8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	4a39      	ldr	r2, [pc, #228]	; (8002194 <TimerRun+0xf8>)
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e002      	b.n	80020ba <TimerRun+0x1e>
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <TimerRun+0xfc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <TimerRun+0x100>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	dd05      	ble.n	80020ce <TimerRun+0x32>
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <TimerRun+0x100>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <TimerRun+0x100>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e002      	b.n	80020d4 <TimerRun+0x38>
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <TimerRun+0x104>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <TimerRun+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	dd05      	ble.n	80020e8 <TimerRun+0x4c>
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <TimerRun+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <TimerRun+0x108>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e002      	b.n	80020ee <TimerRun+0x52>
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <TimerRun+0x10c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <TimerRun+0x110>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	dd05      	ble.n	8002102 <TimerRun+0x66>
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <TimerRun+0x110>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <TimerRun+0x110>)
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e002      	b.n	8002108 <TimerRun+0x6c>
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <TimerRun+0x114>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <TimerRun+0x118>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	dd05      	ble.n	800211c <TimerRun+0x80>
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <TimerRun+0x118>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <TimerRun+0x118>)
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e002      	b.n	8002122 <TimerRun+0x86>
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <TimerRun+0x11c>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <TimerRun+0x120>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	dd05      	ble.n	8002136 <TimerRun+0x9a>
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <TimerRun+0x120>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <TimerRun+0x120>)
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e002      	b.n	800213c <TimerRun+0xa0>
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <TimerRun+0x124>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <TimerRun+0x128>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	dd05      	ble.n	8002150 <TimerRun+0xb4>
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <TimerRun+0x128>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3b01      	subs	r3, #1
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <TimerRun+0x128>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e002      	b.n	8002156 <TimerRun+0xba>
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <TimerRun+0x12c>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <TimerRun+0x130>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	dd05      	ble.n	800216a <TimerRun+0xce>
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <TimerRun+0x130>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <TimerRun+0x130>)
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e002      	b.n	8002170 <TimerRun+0xd4>
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <TimerRun+0x134>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <TimerRun+0x138>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	dd05      	ble.n	8002184 <TimerRun+0xe8>
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <TimerRun+0x138>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3b01      	subs	r3, #1
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <TimerRun+0x138>)
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e002      	b.n	800218a <TimerRun+0xee>
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <TimerRun+0x13c>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000148 	.word	0x20000148
 8002198:	20000144 	.word	0x20000144
 800219c:	20000150 	.word	0x20000150
 80021a0:	2000014c 	.word	0x2000014c
 80021a4:	20000158 	.word	0x20000158
 80021a8:	20000154 	.word	0x20000154
 80021ac:	20000160 	.word	0x20000160
 80021b0:	2000015c 	.word	0x2000015c
 80021b4:	20000168 	.word	0x20000168
 80021b8:	20000164 	.word	0x20000164
 80021bc:	20000170 	.word	0x20000170
 80021c0:	2000016c 	.word	0x2000016c
 80021c4:	20000178 	.word	0x20000178
 80021c8:	20000174 	.word	0x20000174
 80021cc:	20000180 	.word	0x20000180
 80021d0:	2000017c 	.word	0x2000017c
 80021d4:	20000188 	.word	0x20000188
 80021d8:	20000184 	.word	0x20000184

080021dc <HAL_MspInit>:
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_MspInit+0x5c>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_MspInit+0x5c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_MspInit+0x5c>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_MspInit+0x5c>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_MspInit+0x5c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_MspInit+0x5c>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_MspInit+0x60>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_MspInit+0x60>)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6053      	str	r3, [r2, #4]
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000

08002240 <HAL_TIM_Base_MspInit>:
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d114      	bne.n	800227c <HAL_TIM_Base_MspInit+0x3c>
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	201c      	movs	r0, #28
 8002270:	f000 fa79 	bl	8002766 <HAL_NVIC_SetPriority>
 8002274:	201c      	movs	r0, #28
 8002276:	f000 fa92 	bl	800279e <HAL_NVIC_EnableIRQ>
 800227a:	e010      	b.n	800229e <HAL_TIM_Base_MspInit+0x5e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_TIM_Base_MspInit+0x6c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10b      	bne.n	800229e <HAL_TIM_Base_MspInit+0x5e>
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_TIM_Base_MspInit+0x68>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40000400 	.word	0x40000400

080022b0 <HAL_TIM_MspPostInit>:
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_TIM_MspPostInit+0x58>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d117      	bne.n	8002300 <HAL_TIM_MspPostInit+0x50>
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0x5c>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_TIM_MspPostInit+0x5c>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_TIM_MspPostInit+0x5c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	2302      	movs	r3, #2
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	2302      	movs	r3, #2
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4619      	mov	r1, r3
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0x60>)
 80022fc:	f000 fb1a 	bl	8002934 <HAL_GPIO_Init>
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40000400 	.word	0x40000400
 800230c:	40021000 	.word	0x40021000
 8002310:	40010800 	.word	0x40010800

08002314 <HAL_UART_MspInit>:
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_UART_MspInit+0x98>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d137      	bne.n	80023a4 <HAL_UART_MspInit+0x90>
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 800233a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_UART_MspInit+0x9c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2304      	movs	r3, #4
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	2302      	movs	r3, #2
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	2303      	movs	r3, #3
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	4619      	mov	r1, r3
 8002376:	480f      	ldr	r0, [pc, #60]	; (80023b4 <HAL_UART_MspInit+0xa0>)
 8002378:	f000 fadc 	bl	8002934 <HAL_GPIO_Init>
 800237c:	2308      	movs	r3, #8
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4619      	mov	r1, r3
 800238e:	4809      	ldr	r0, [pc, #36]	; (80023b4 <HAL_UART_MspInit+0xa0>)
 8002390:	f000 fad0 	bl	8002934 <HAL_GPIO_Init>
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	2026      	movs	r0, #38	; 0x26
 800239a:	f000 f9e4 	bl	8002766 <HAL_NVIC_SetPriority>
 800239e:	2026      	movs	r0, #38	; 0x26
 80023a0:	f000 f9fd 	bl	800279e <HAL_NVIC_EnableIRQ>
 80023a4:	bf00      	nop
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40004400 	.word	0x40004400
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010800 	.word	0x40010800

080023b8 <NMI_Handler>:
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <DebugMon_Handler>:
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <SysTick_Handler>:
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	f000 f8bf 	bl	8002580 <HAL_IncTick>
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <TIM2_IRQHandler>:
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM2_IRQHandler+0x10>)
 800240e:	f001 f9fb 	bl	8003808 <HAL_TIM_IRQHandler>
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200001e0 	.word	0x200001e0

0800241c <USART2_IRQHandler>:
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <USART2_IRQHandler+0x10>)
 8002422:	f002 f893 	bl	800454c <HAL_UART_IRQHandler>
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000228 	.word	0x20000228

08002430 <_sbrk>:
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
 8002460:	f002 fc6c 	bl	8004d3c <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20005000 	.word	0x20005000
 8002490:	00000400 	.word	0x00000400
 8002494:	2000018c 	.word	0x2000018c
 8002498:	200004e8 	.word	0x200004e8

0800249c <SystemInit>:
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <Reset_Handler>:
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <LoopFillZerobss+0x12>)
 80024aa:	490d      	ldr	r1, [pc, #52]	; (80024e0 <LoopFillZerobss+0x16>)
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <LoopFillZerobss+0x1a>)
 80024ae:	2300      	movs	r3, #0
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:
 80024b2:	58d4      	ldr	r4, [r2, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:
 80024b8:	18c4      	adds	r4, r0, r3
 80024ba:	428c      	cmp	r4, r1
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <LoopFillZerobss+0x1e>)
 80024c0:	4c0a      	ldr	r4, [pc, #40]	; (80024ec <LoopFillZerobss+0x22>)
 80024c2:	2300      	movs	r3, #0
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:
 80024ca:	42a2      	cmp	r2, r4
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>
 80024ce:	f7ff ffe5 	bl	800249c <SystemInit>
 80024d2:	f002 fc39 	bl	8004d48 <__libc_init_array>
 80024d6:	f7fe fef9 	bl	80012cc <main>
 80024da:	4770      	bx	lr
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000094 	.word	0x20000094
 80024e4:	08005708 	.word	0x08005708
 80024e8:	20000094 	.word	0x20000094
 80024ec:	200004e8 	.word	0x200004e8

080024f0 <ADC1_2_IRQHandler>:
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x28>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x28>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f923 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	200f      	movs	r0, #15
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fe64 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f93b 	bl	80027ba <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f903 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000024 	.word	0x20000024
 8002578:	2000002c 	.word	0x2000002c
 800257c:	20000028 	.word	0x20000028

08002580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x1c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x20>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_IncTick+0x20>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	2000002c 	.word	0x2000002c
 80025a0:	200004d4 	.word	0x200004d4

080025a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <HAL_GetTick+0x10>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	200004d4 	.word	0x200004d4

080025b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <__NVIC_EnableIRQ+0x34>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff90 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff2d 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff42 	bl	8002600 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff90 	bl	80026a8 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5f 	bl	8002654 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff35 	bl	800261c <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2204      	movs	r2, #4
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e020      	b.n	800283c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 020e 	bic.w	r2, r2, #14
 8002808:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
	...

08002848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800285a:	2b02      	cmp	r3, #2
 800285c:	d005      	beq.n	800286a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e051      	b.n	800290e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020e 	bic.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_DMA_Abort_IT+0xd0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d029      	beq.n	80028e8 <HAL_DMA_Abort_IT+0xa0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_DMA_Abort_IT+0xd4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x9c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <HAL_DMA_Abort_IT+0xd8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01a      	beq.n	80028de <HAL_DMA_Abort_IT+0x96>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_DMA_Abort_IT+0xdc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d012      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x90>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_DMA_Abort_IT+0xe0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00a      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x8a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	; (800292c <HAL_DMA_Abort_IT+0xe4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d102      	bne.n	80028cc <HAL_DMA_Abort_IT+0x84>
 80028c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028ca:	e00e      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d0:	e00b      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d6:	e008      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028dc:	e005      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e2:	e002      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028e4:	2310      	movs	r3, #16
 80028e6:	e000      	b.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 80028e8:	2301      	movs	r3, #1
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_DMA_Abort_IT+0xe8>)
 80028ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
    } 
  }
  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40020008 	.word	0x40020008
 800291c:	4002001c 	.word	0x4002001c
 8002920:	40020030 	.word	0x40020030
 8002924:	40020044 	.word	0x40020044
 8002928:	40020058 	.word	0x40020058
 800292c:	4002006c 	.word	0x4002006c
 8002930:	40020000 	.word	0x40020000

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002946:	e169      	b.n	8002c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002948:	2201      	movs	r2, #1
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 8158 	bne.w	8002c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a9a      	ldr	r2, [pc, #616]	; (8002bd4 <HAL_GPIO_Init+0x2a0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d05e      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002970:	4a98      	ldr	r2, [pc, #608]	; (8002bd4 <HAL_GPIO_Init+0x2a0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d875      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 8002976:	4a98      	ldr	r2, [pc, #608]	; (8002bd8 <HAL_GPIO_Init+0x2a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d058      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 800297c:	4a96      	ldr	r2, [pc, #600]	; (8002bd8 <HAL_GPIO_Init+0x2a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d86f      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 8002982:	4a96      	ldr	r2, [pc, #600]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d052      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002988:	4a94      	ldr	r2, [pc, #592]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d869      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 800298e:	4a94      	ldr	r2, [pc, #592]	; (8002be0 <HAL_GPIO_Init+0x2ac>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04c      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002994:	4a92      	ldr	r2, [pc, #584]	; (8002be0 <HAL_GPIO_Init+0x2ac>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d863      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 800299a:	4a92      	ldr	r2, [pc, #584]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d046      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 80029a0:	4a90      	ldr	r2, [pc, #576]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d85d      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 80029a6:	2b12      	cmp	r3, #18
 80029a8:	d82a      	bhi.n	8002a00 <HAL_GPIO_Init+0xcc>
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d859      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_GPIO_Init+0x80>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	08002a2f 	.word	0x08002a2f
 80029b8:	08002a09 	.word	0x08002a09
 80029bc:	08002a1b 	.word	0x08002a1b
 80029c0:	08002a5d 	.word	0x08002a5d
 80029c4:	08002a63 	.word	0x08002a63
 80029c8:	08002a63 	.word	0x08002a63
 80029cc:	08002a63 	.word	0x08002a63
 80029d0:	08002a63 	.word	0x08002a63
 80029d4:	08002a63 	.word	0x08002a63
 80029d8:	08002a63 	.word	0x08002a63
 80029dc:	08002a63 	.word	0x08002a63
 80029e0:	08002a63 	.word	0x08002a63
 80029e4:	08002a63 	.word	0x08002a63
 80029e8:	08002a63 	.word	0x08002a63
 80029ec:	08002a63 	.word	0x08002a63
 80029f0:	08002a63 	.word	0x08002a63
 80029f4:	08002a63 	.word	0x08002a63
 80029f8:	08002a11 	.word	0x08002a11
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_GPIO_Init+0x2b4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a06:	e02c      	b.n	8002a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	623b      	str	r3, [r7, #32]
          break;
 8002a0e:	e029      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	3304      	adds	r3, #4
 8002a16:	623b      	str	r3, [r7, #32]
          break;
 8002a18:	e024      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	623b      	str	r3, [r7, #32]
          break;
 8002a22:	e01f      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e01a      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a36:	2304      	movs	r3, #4
 8002a38:	623b      	str	r3, [r7, #32]
          break;
 8002a3a:	e013      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a44:	2308      	movs	r3, #8
 8002a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	611a      	str	r2, [r3, #16]
          break;
 8002a4e:	e009      	b.n	8002a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a50:	2308      	movs	r3, #8
 8002a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	615a      	str	r2, [r3, #20]
          break;
 8002a5a:	e003      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
          break;
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          break;
 8002a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d801      	bhi.n	8002a6e <HAL_GPIO_Init+0x13a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_Init+0x13e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d802      	bhi.n	8002a80 <HAL_GPIO_Init+0x14c>
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x152>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	3b08      	subs	r3, #8
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	6a39      	ldr	r1, [r7, #32]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80b1 	beq.w	8002c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_GPIO_Init+0x2b8>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4a4c      	ldr	r2, [pc, #304]	; (8002bec <HAL_GPIO_Init+0x2b8>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6193      	str	r3, [r2, #24]
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_GPIO_Init+0x2b8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002acc:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_GPIO_Init+0x2bc>)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <HAL_GPIO_Init+0x2c0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_Init+0x1ec>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3f      	ldr	r2, [pc, #252]	; (8002bf8 <HAL_GPIO_Init+0x2c4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1e8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1e4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <HAL_GPIO_Init+0x2cc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1e0>
 8002b10:	2303      	movs	r3, #3
 8002b12:	e006      	b.n	8002b22 <HAL_GPIO_Init+0x1ee>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e004      	b.n	8002b22 <HAL_GPIO_Init+0x1ee>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e002      	b.n	8002b22 <HAL_GPIO_Init+0x1ee>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_GPIO_Init+0x1ee>
 8002b20:	2300      	movs	r3, #0
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	f002 0203 	and.w	r2, r2, #3
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b32:	492f      	ldr	r1, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x2bc>)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3302      	adds	r3, #2
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	492c      	ldr	r1, [pc, #176]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	4928      	ldr	r1, [pc, #160]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4922      	ldr	r1, [pc, #136]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e006      	b.n	8002b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	491e      	ldr	r1, [pc, #120]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4918      	ldr	r1, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4914      	ldr	r1, [pc, #80]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d021      	beq.n	8002c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_GPIO_Init+0x2d0>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e021      	b.n	8002c16 <HAL_GPIO_Init+0x2e2>
 8002bd2:	bf00      	nop
 8002bd4:	10320000 	.word	0x10320000
 8002bd8:	10310000 	.word	0x10310000
 8002bdc:	10220000 	.word	0x10220000
 8002be0:	10210000 	.word	0x10210000
 8002be4:	10120000 	.word	0x10120000
 8002be8:	10110000 	.word	0x10110000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40010800 	.word	0x40010800
 8002bf8:	40010c00 	.word	0x40010c00
 8002bfc:	40011000 	.word	0x40011000
 8002c00:	40011400 	.word	0x40011400
 8002c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	4909      	ldr	r1, [pc, #36]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f47f ae8e 	bne.w	8002948 <HAL_GPIO_Init+0x14>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	372c      	adds	r7, #44	; 0x2c
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40010400 	.word	0x40010400

08002c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]
 8002c76:	4613      	mov	r3, r2
 8002c78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7a:	787b      	ldrb	r3, [r7, #1]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c86:	e003      	b.n	8002c90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	041a      	lsls	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e26c      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8087 	beq.w	8002dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc8:	4b8f      	ldr	r3, [pc, #572]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d112      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5e>
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d10b      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d06c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x12c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d168      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e246      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x76>
 8002d04:	4b80      	ldr	r3, [pc, #512]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a7f      	ldr	r2, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e02e      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7a      	ldr	r2, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b78      	ldr	r3, [pc, #480]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a77      	ldr	r2, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0xbc>
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a71      	ldr	r2, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d58:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff fc14 	bl	80025a4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff fc10 	bl	80025a4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1fa      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe4>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fc00 	bl	80025a4 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7ff fbfc 	bl	80025a4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1e6      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x10c>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd6:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x18c>
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1ba      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4939      	ldr	r1, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7ff fbb5 	bl	80025a4 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7ff fbb1 	bl	80025a4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e19b      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4927      	ldr	r1, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fb94 	bl	80025a4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7ff fb90 	bl	80025a4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e17a      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03a      	beq.n	8002f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7ff fb74 	bl	80025a4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fb70 	bl	80025a4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e15a      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f000 fad8 	bl	8003494 <RCC_Delay>
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7ff fb5a 	bl	80025a4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	e00f      	b.n	8002f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7ff fb56 	bl	80025a4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e140      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	42420000 	.word	0x42420000
 8002f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b9e      	ldr	r3, [pc, #632]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e9      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a6 	beq.w	800307a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f32:	4b97      	ldr	r3, [pc, #604]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b94      	ldr	r3, [pc, #592]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a93      	ldr	r2, [pc, #588]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b91      	ldr	r3, [pc, #580]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b8e      	ldr	r3, [pc, #568]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b8b      	ldr	r3, [pc, #556]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a8a      	ldr	r2, [pc, #552]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7ff fb17 	bl	80025a4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7ff fb13 	bl	80025a4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0fd      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b81      	ldr	r3, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x312>
 8002fa0:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e02d      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	e01c      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x356>
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6c      	ldr	r2, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	e00b      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a66      	ldr	r2, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7ff fac7 	bl	80025a4 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7ff fac3 	bl	80025a4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0ab      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	4b57      	ldr	r3, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ee      	beq.n	800301a <HAL_RCC_OscConfig+0x37e>
 800303c:	e014      	b.n	8003068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7ff fab1 	bl	80025a4 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7ff faad 	bl	80025a4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e095      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d105      	bne.n	800307a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306e:	4b48      	ldr	r3, [pc, #288]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a47      	ldr	r2, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8081 	beq.w	8003186 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d061      	beq.n	8003154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d146      	bne.n	8003126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7ff fa81 	bl	80025a4 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7ff fa7d 	bl	80025a4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e067      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d108      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	492d      	ldr	r1, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a19      	ldr	r1, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	430b      	orrs	r3, r1
 80030f2:	4927      	ldr	r1, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7ff fa51 	bl	80025a4 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7ff fa4d 	bl	80025a4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e037      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x46a>
 8003124:	e02f      	b.n	8003186 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7ff fa3a 	bl	80025a4 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7ff fa36 	bl	80025a4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e020      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x498>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	429a      	cmp	r2, r3
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	42420060 	.word	0x42420060

0800319c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0d0      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 0207 	bic.w	r2, r3, #7
 80031c6:	4965      	ldr	r1, [pc, #404]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b8      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a58      	ldr	r2, [pc, #352]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800321a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	494d      	ldr	r1, [pc, #308]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d040      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e07f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e073      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06b      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4936      	ldr	r1, [pc, #216]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7ff f98a 	bl	80025a4 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7ff f986 	bl	80025a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e053      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d210      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	4922      	ldr	r1, [pc, #136]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e032      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332a:	f000 f821 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490a      	ldr	r1, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1cc>)
 8003344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1d0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f8e8 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40022000 	.word	0x40022000
 8003360:	40021000 	.word	0x40021000
 8003364:	080056b4 	.word	0x080056b4
 8003368:	20000024 	.word	0x20000024
 800336c:	20000028 	.word	0x20000028

08003370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	b490      	push	{r4, r7}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003378:	1d3c      	adds	r4, r7, #4
 800337a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800337c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003380:	f240 2301 	movw	r3, #513	; 0x201
 8003384:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_RCC_GetSysClockFreq+0xb4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ae:	e02d      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	e02d      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033c2:	4413      	add	r3, r2
 80033c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0c5b      	lsrs	r3, r3, #17
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ee:	fb02 f203 	mul.w	r2, r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e004      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	; (800342c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	623b      	str	r3, [r7, #32]
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340e:	623b      	str	r3, [r7, #32]
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6a3b      	ldr	r3, [r7, #32]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc90      	pop	{r4, r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	080056a4 	.word	0x080056a4
 8003424:	40021000 	.word	0x40021000
 8003428:	007a1200 	.word	0x007a1200
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <HAL_RCC_GetHCLKFreq+0x10>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000024 	.word	0x20000024

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff2 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	080056c4 	.word	0x080056c4

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffde 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0adb      	lsrs	r3, r3, #11
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	080056c4 	.word	0x080056c4

08003494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <RCC_Delay+0x34>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <RCC_Delay+0x38>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0a5b      	lsrs	r3, r3, #9
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b0:	bf00      	nop
  }
  while (Delay --);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	60fa      	str	r2, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f9      	bne.n	80034b0 <RCC_Delay+0x1c>
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	20000024 	.word	0x20000024
 80034cc:	10624dd3 	.word	0x10624dd3

080034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fea2 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fc28 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e03a      	b.n	80035fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIM_Base_Start_IT+0x98>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_TIM_Base_Start_IT+0x9c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_TIM_Base_Start_IT+0xa0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d111      	bne.n	80035ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d010      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e007      	b.n	80035fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800

08003614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f839 	bl	80036b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fb86 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_TIM_PWM_Start+0x24>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e022      	b.n	800372e <HAL_TIM_PWM_Start+0x6a>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d109      	bne.n	8003702 <HAL_TIM_PWM_Start+0x3e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	e015      	b.n	800372e <HAL_TIM_PWM_Start+0x6a>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d109      	bne.n	800371c <HAL_TIM_PWM_Start+0x58>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e008      	b.n	800372e <HAL_TIM_PWM_Start+0x6a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e05e      	b.n	80037f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Start+0x82>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	e013      	b.n	800376e <HAL_TIM_PWM_Start+0xaa>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d104      	bne.n	8003756 <HAL_TIM_PWM_Start+0x92>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003754:	e00b      	b.n	800376e <HAL_TIM_PWM_Start+0xaa>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d104      	bne.n	8003766 <HAL_TIM_PWM_Start+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	e003      	b.n	800376e <HAL_TIM_PWM_Start+0xaa>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fd74 	bl	8004264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_TIM_PWM_Start+0x138>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d107      	bne.n	8003796 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_PWM_Start+0x138>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIM_PWM_Start+0xfa>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d009      	beq.n	80037be <HAL_TIM_PWM_Start+0xfa>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_TIM_PWM_Start+0x13c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIM_PWM_Start+0xfa>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIM_PWM_Start+0x140>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d010      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	e007      	b.n	80037f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0202 	mvn.w	r2, #2
 8003834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa6f 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa62 	bl	8003d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa71 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0204 	mvn.w	r2, #4
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa45 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa38 	bl	8003d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa47 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d122      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0208 	mvn.w	r2, #8
 80038dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa1b 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 80038f8:	e005      	b.n	8003906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fa0e 	bl	8003d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa1d 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b10      	cmp	r3, #16
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0210 	mvn.w	r2, #16
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2208      	movs	r2, #8
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9f1 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f9e4 	bl	8003d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f9f3 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fe8e 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fce1 	bl	800437a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f9b7 	bl	8003d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0220 	mvn.w	r2, #32
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fcac 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0ac      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	f200 809f 	bhi.w	8003b80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003b81 	.word	0x08003b81
 8003a50:	08003b81 	.word	0x08003b81
 8003a54:	08003b81 	.word	0x08003b81
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003b81 	.word	0x08003b81
 8003a60:	08003b81 	.word	0x08003b81
 8003a64:	08003b81 	.word	0x08003b81
 8003a68:	08003aff 	.word	0x08003aff
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	08003b81 	.word	0x08003b81
 8003a78:	08003b3f 	.word	0x08003b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f9d0 	bl	8003e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      break;
 8003aba:	e062      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fa16 	bl	8003ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]
      break;
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa5f 	bl	8003fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      break;
 8003b3c:	e021      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 faa9 	bl	800409c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0b3      	b.n	8003d14 <HAL_TIM_ConfigClockSource+0x180>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be4:	d03e      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xd0>
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	f200 8087 	bhi.w	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	f000 8085 	beq.w	8003d00 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d87f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d01a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xa2>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d87b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c04:	2b60      	cmp	r3, #96	; 0x60
 8003c06:	d050      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x116>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d877      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d03c      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xf6>
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d873      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d058      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x136>
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d86f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c1c:	2b30      	cmp	r3, #48	; 0x30
 8003c1e:	d064      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x156>
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	d86b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d060      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x156>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d867      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x156>
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d05a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c34:	e062      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f000 faee 	bl	8004226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	609a      	str	r2, [r3, #8]
      break;
 8003c62:	e04e      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f000 fad7 	bl	8004226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c86:	609a      	str	r2, [r3, #8]
      break;
 8003c88:	e03b      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fa4e 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2150      	movs	r1, #80	; 0x50
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 faa5 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e02b      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa6c 	bl	8004194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2160      	movs	r1, #96	; 0x60
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa95 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e01b      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa2e 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa85 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 fa7c 	bl	80041f2 <TIM_ITRx_SetConfig>
        break;
 8003cfa:	e002      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <TIM_Base_SetConfig+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <TIM_Base_SetConfig+0xbc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <TIM_Base_SetConfig+0xc0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <TIM_Base_SetConfig+0xb8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	615a      	str	r2, [r3, #20]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800

08003e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0201 	bic.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 0302 	bic.w	r3, r3, #2
 8003e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <TIM_OC1_SetConfig+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00

08003ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0320 	bic.w	r3, r3, #32
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <TIM_OC2_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00

08003fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10d      	bne.n	8004042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_OC3_SetConfig+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d113      	bne.n	8004072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00

0800409c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <TIM_OC4_SetConfig+0x98>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d109      	bne.n	8004110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00

08004138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 030a 	bic.w	r3, r3, #10
 8004174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 0210 	bic.w	r2, r3, #16
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	431a      	orrs	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	43db      	mvns	r3, r3
 8004286:	401a      	ands	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e046      	b.n	8004352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d009      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a10      	ldr	r2, [pc, #64]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4313      	orrs	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e03f      	b.n	800441e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd ffae 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	; 0x24
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fc25 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08a      	sub	sp, #40	; 0x28
 800442a:	af02      	add	r7, sp, #8
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	d17c      	bne.n	8004540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Transmit+0x2c>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e075      	b.n	8004542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Transmit+0x3e>
 8004460:	2302      	movs	r3, #2
 8004462:	e06e      	b.n	8004542 <HAL_UART_Transmit+0x11c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447a:	f7fe f893 	bl	80025a4 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004494:	d108      	bne.n	80044a8 <HAL_UART_Transmit+0x82>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e003      	b.n	80044b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b8:	e02a      	b.n	8004510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fa11 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e036      	b.n	8004542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3302      	adds	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e007      	b.n	8004502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1cf      	bne.n	80044ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	2140      	movs	r1, #64	; 0x40
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f9e1 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e006      	b.n	8004542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_UART_IRQHandler+0x52>
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa99 	bl	8004ace <UART_Receive_IT>
      return;
 800459c:	e17b      	b.n	8004896 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80b1 	beq.w	8004708 <HAL_UART_IRQHandler+0x1bc>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_UART_IRQHandler+0x70>
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a6 	beq.w	8004708 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_UART_IRQHandler+0x90>
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_UART_IRQHandler+0xb0>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f043 0202 	orr.w	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_UART_IRQHandler+0xd0>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00f      	beq.n	8004646 <HAL_UART_IRQHandler+0xfa>
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_UART_IRQHandler+0xee>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 811e 	beq.w	800488c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_UART_IRQHandler+0x11e>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa32 	bl	8004ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <HAL_UART_IRQHandler+0x146>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d031      	beq.n	80046f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f974 	bl	8004980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d023      	beq.n	80046ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d013      	beq.n	80046e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	4a76      	ldr	r2, [pc, #472]	; (800489c <HAL_UART_IRQHandler+0x350>)
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe f8bc 	bl	8002848 <HAL_DMA_Abort_IT>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d016      	beq.n	8004704 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e00e      	b.n	8004704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8ec 	bl	80048c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00a      	b.n	8004704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8e8 	bl	80048c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e006      	b.n	8004704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8e4 	bl	80048c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004702:	e0c3      	b.n	800488c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	bf00      	nop
    return;
 8004706:	e0c1      	b.n	800488c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	2b01      	cmp	r3, #1
 800470e:	f040 80a1 	bne.w	8004854 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 809b 	beq.w	8004854 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8095 	beq.w	8004854 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04e      	beq.n	80047ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004758:	8a3b      	ldrh	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8098 	beq.w	8004890 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004764:	8a3a      	ldrh	r2, [r7, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	f080 8092 	bcs.w	8004890 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8a3a      	ldrh	r2, [r7, #16]
 8004770:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b20      	cmp	r3, #32
 800477a:	d02b      	beq.n	80047d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0210 	bic.w	r2, r2, #16
 80047c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd ffff 	bl	80027d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f876 	bl	80048d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ea:	e051      	b.n	8004890 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d047      	beq.n	8004894 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004804:	8a7b      	ldrh	r3, [r7, #18]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004818:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0210 	bic.w	r2, r2, #16
 8004846:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004848:	8a7b      	ldrh	r3, [r7, #18]
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f842 	bl	80048d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004852:	e01f      	b.n	8004894 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_UART_IRQHandler+0x324>
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8c9 	bl	8004a00 <UART_Transmit_IT>
    return;
 800486e:	e012      	b.n	8004896 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <HAL_UART_IRQHandler+0x34a>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f90a 	bl	8004a9e <UART_EndTransmit_IT>
    return;
 800488a:	e004      	b.n	8004896 <HAL_UART_IRQHandler+0x34a>
    return;
 800488c:	bf00      	nop
 800488e:	e002      	b.n	8004896 <HAL_UART_IRQHandler+0x34a>
      return;
 8004890:	bf00      	nop
 8004892:	e000      	b.n	8004896 <HAL_UART_IRQHandler+0x34a>
      return;
 8004894:	bf00      	nop
  }
}
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	080049d9 	.word	0x080049d9

080048a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fc:	e02c      	b.n	8004958 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d028      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x30>
 800490c:	f7fd fe4a 	bl	80025a4 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	d21d      	bcs.n	8004958 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800492a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e00f      	b.n	8004978 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	429a      	cmp	r2, r3
 8004974:	d0c3      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004996:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0210 	bic.w	r2, r2, #16
 80049be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff ff66 	bl	80048c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b21      	cmp	r3, #33	; 0x21
 8004a12:	d13e      	bne.n	8004a92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1c:	d114      	bne.n	8004a48 <UART_Transmit_IT+0x48>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d110      	bne.n	8004a48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]
 8004a46:	e008      	b.n	8004a5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6211      	str	r1, [r2, #32]
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4619      	mov	r1, r3
 8004a68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff feee 	bl	80048a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b086      	sub	sp, #24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b22      	cmp	r3, #34	; 0x22
 8004ae0:	f040 8099 	bne.w	8004c16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d117      	bne.n	8004b1e <UART_Receive_IT+0x50>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d113      	bne.n	8004b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b1c:	e026      	b.n	8004b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b30:	d007      	beq.n	8004b42 <UART_Receive_IT+0x74>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <UART_Receive_IT+0x82>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e008      	b.n	8004b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d148      	bne.n	8004c12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0220 	bic.w	r2, r2, #32
 8004b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d123      	bne.n	8004c08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0210 	bic.w	r2, r2, #16
 8004bd4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d10a      	bne.n	8004bfa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fe68 	bl	80048d6 <HAL_UARTEx_RxEventCallback>
 8004c06:	e002      	b.n	8004c0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fe52 	bl	80048b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e002      	b.n	8004c18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c5a:	f023 030c 	bic.w	r3, r3, #12
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <UART_SetConfig+0x114>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe fbf0 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	e002      	b.n	8004c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c90:	f7fe fbd8 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8004c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009a      	lsls	r2, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <UART_SetConfig+0x118>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	0119      	lsls	r1, r3, #4
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <UART_SetConfig+0x118>)
 8004cce:	fba3 0302 	umull	r0, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2064      	movs	r0, #100	; 0x64
 8004cd6:	fb00 f303 	mul.w	r3, r0, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <UART_SetConfig+0x118>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	4419      	add	r1, r3
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009a      	lsls	r2, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <UART_SetConfig+0x118>)
 8004d06:	fba3 0302 	umull	r0, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2064      	movs	r0, #100	; 0x64
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	3332      	adds	r3, #50	; 0x32
 8004d18:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <UART_SetConfig+0x118>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	440a      	add	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40013800 	.word	0x40013800
 8004d38:	51eb851f 	.word	0x51eb851f

08004d3c <__errno>:
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <__errno+0x8>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000030 	.word	0x20000030

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	4d0c      	ldr	r5, [pc, #48]	; (8004d80 <__libc_init_array+0x38>)
 8004d4e:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d50:	1b64      	subs	r4, r4, r5
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	42a6      	cmp	r6, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	f000 fc5c 	bl	8005614 <_init>
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	4d0a      	ldr	r5, [pc, #40]	; (8004d88 <__libc_init_array+0x40>)
 8004d60:	4c0a      	ldr	r4, [pc, #40]	; (8004d8c <__libc_init_array+0x44>)
 8004d62:	1b64      	subs	r4, r4, r5
 8004d64:	10a4      	asrs	r4, r4, #2
 8004d66:	42a6      	cmp	r6, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d70:	4798      	blx	r3
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7a:	4798      	blx	r3
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	08005700 	.word	0x08005700
 8004d84:	08005700 	.word	0x08005700
 8004d88:	08005700 	.word	0x08005700
 8004d8c:	08005704 	.word	0x08005704

08004d90 <memset>:
 8004d90:	4603      	mov	r3, r0
 8004d92:	4402      	add	r2, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memset+0xa>
 8004d98:	4770      	bx	lr
 8004d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9e:	e7f9      	b.n	8004d94 <memset+0x4>

08004da0 <siprintf>:
 8004da0:	b40e      	push	{r1, r2, r3}
 8004da2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004da6:	b500      	push	{lr}
 8004da8:	b09c      	sub	sp, #112	; 0x70
 8004daa:	ab1d      	add	r3, sp, #116	; 0x74
 8004dac:	9002      	str	r0, [sp, #8]
 8004dae:	9006      	str	r0, [sp, #24]
 8004db0:	9107      	str	r1, [sp, #28]
 8004db2:	9104      	str	r1, [sp, #16]
 8004db4:	4808      	ldr	r0, [pc, #32]	; (8004dd8 <siprintf+0x38>)
 8004db6:	4909      	ldr	r1, [pc, #36]	; (8004ddc <siprintf+0x3c>)
 8004db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dbc:	9105      	str	r1, [sp, #20]
 8004dbe:	6800      	ldr	r0, [r0, #0]
 8004dc0:	a902      	add	r1, sp, #8
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	f000 f868 	bl	8004e98 <_svfiprintf_r>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	b01c      	add	sp, #112	; 0x70
 8004dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd4:	b003      	add	sp, #12
 8004dd6:	4770      	bx	lr
 8004dd8:	20000030 	.word	0x20000030
 8004ddc:	ffff0208 	.word	0xffff0208

08004de0 <__ssputs_r>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	688e      	ldr	r6, [r1, #8]
 8004de6:	4682      	mov	sl, r0
 8004de8:	429e      	cmp	r6, r3
 8004dea:	460c      	mov	r4, r1
 8004dec:	4690      	mov	r8, r2
 8004dee:	461f      	mov	r7, r3
 8004df0:	d838      	bhi.n	8004e64 <__ssputs_r+0x84>
 8004df2:	898a      	ldrh	r2, [r1, #12]
 8004df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004df8:	d032      	beq.n	8004e60 <__ssputs_r+0x80>
 8004dfa:	6825      	ldr	r5, [r4, #0]
 8004dfc:	6909      	ldr	r1, [r1, #16]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	eba5 0901 	sub.w	r9, r5, r1
 8004e04:	6965      	ldr	r5, [r4, #20]
 8004e06:	444b      	add	r3, r9
 8004e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e10:	106d      	asrs	r5, r5, #1
 8004e12:	429d      	cmp	r5, r3
 8004e14:	bf38      	it	cc
 8004e16:	461d      	movcc	r5, r3
 8004e18:	0553      	lsls	r3, r2, #21
 8004e1a:	d531      	bpl.n	8004e80 <__ssputs_r+0xa0>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f000 fb53 	bl	80054c8 <_malloc_r>
 8004e22:	4606      	mov	r6, r0
 8004e24:	b950      	cbnz	r0, 8004e3c <__ssputs_r+0x5c>
 8004e26:	230c      	movs	r3, #12
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	f8ca 3000 	str.w	r3, [sl]
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	6921      	ldr	r1, [r4, #16]
 8004e40:	f000 face 	bl	80053e0 <memcpy>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	6126      	str	r6, [r4, #16]
 8004e52:	444e      	add	r6, r9
 8004e54:	6026      	str	r6, [r4, #0]
 8004e56:	463e      	mov	r6, r7
 8004e58:	6165      	str	r5, [r4, #20]
 8004e5a:	eba5 0509 	sub.w	r5, r5, r9
 8004e5e:	60a5      	str	r5, [r4, #8]
 8004e60:	42be      	cmp	r6, r7
 8004e62:	d900      	bls.n	8004e66 <__ssputs_r+0x86>
 8004e64:	463e      	mov	r6, r7
 8004e66:	4632      	mov	r2, r6
 8004e68:	4641      	mov	r1, r8
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	f000 fac6 	bl	80053fc <memmove>
 8004e70:	68a3      	ldr	r3, [r4, #8]
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	1b9b      	subs	r3, r3, r6
 8004e76:	4432      	add	r2, r6
 8004e78:	2000      	movs	r0, #0
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	6022      	str	r2, [r4, #0]
 8004e7e:	e7db      	b.n	8004e38 <__ssputs_r+0x58>
 8004e80:	462a      	mov	r2, r5
 8004e82:	f000 fb7b 	bl	800557c <_realloc_r>
 8004e86:	4606      	mov	r6, r0
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d1e1      	bne.n	8004e50 <__ssputs_r+0x70>
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	6921      	ldr	r1, [r4, #16]
 8004e90:	f000 face 	bl	8005430 <_free_r>
 8004e94:	e7c7      	b.n	8004e26 <__ssputs_r+0x46>
	...

08004e98 <_svfiprintf_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4698      	mov	r8, r3
 8004e9e:	898b      	ldrh	r3, [r1, #12]
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	b09d      	sub	sp, #116	; 0x74
 8004eaa:	d50e      	bpl.n	8004eca <_svfiprintf_r+0x32>
 8004eac:	690b      	ldr	r3, [r1, #16]
 8004eae:	b963      	cbnz	r3, 8004eca <_svfiprintf_r+0x32>
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	f000 fb09 	bl	80054c8 <_malloc_r>
 8004eb6:	6028      	str	r0, [r5, #0]
 8004eb8:	6128      	str	r0, [r5, #16]
 8004eba:	b920      	cbnz	r0, 8004ec6 <_svfiprintf_r+0x2e>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e0d1      	b.n	800506a <_svfiprintf_r+0x1d2>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	616b      	str	r3, [r5, #20]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ece:	2320      	movs	r3, #32
 8004ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed4:	2330      	movs	r3, #48	; 0x30
 8004ed6:	f04f 0901 	mov.w	r9, #1
 8004eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ede:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005084 <_svfiprintf_r+0x1ec>
 8004ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	469a      	mov	sl, r3
 8004eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eee:	b10a      	cbz	r2, 8004ef4 <_svfiprintf_r+0x5c>
 8004ef0:	2a25      	cmp	r2, #37	; 0x25
 8004ef2:	d1f9      	bne.n	8004ee8 <_svfiprintf_r+0x50>
 8004ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef8:	d00b      	beq.n	8004f12 <_svfiprintf_r+0x7a>
 8004efa:	465b      	mov	r3, fp
 8004efc:	4622      	mov	r2, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	4638      	mov	r0, r7
 8004f02:	f7ff ff6d 	bl	8004de0 <__ssputs_r>
 8004f06:	3001      	adds	r0, #1
 8004f08:	f000 80aa 	beq.w	8005060 <_svfiprintf_r+0x1c8>
 8004f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0e:	445a      	add	r2, fp
 8004f10:	9209      	str	r2, [sp, #36]	; 0x24
 8004f12:	f89a 3000 	ldrb.w	r3, [sl]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80a2 	beq.w	8005060 <_svfiprintf_r+0x1c8>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f26:	f10a 0a01 	add.w	sl, sl, #1
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	9307      	str	r3, [sp, #28]
 8004f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f32:	931a      	str	r3, [sp, #104]	; 0x68
 8004f34:	4654      	mov	r4, sl
 8004f36:	2205      	movs	r2, #5
 8004f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3c:	4851      	ldr	r0, [pc, #324]	; (8005084 <_svfiprintf_r+0x1ec>)
 8004f3e:	f000 fa41 	bl	80053c4 <memchr>
 8004f42:	9a04      	ldr	r2, [sp, #16]
 8004f44:	b9d8      	cbnz	r0, 8004f7e <_svfiprintf_r+0xe6>
 8004f46:	06d0      	lsls	r0, r2, #27
 8004f48:	bf44      	itt	mi
 8004f4a:	2320      	movmi	r3, #32
 8004f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f50:	0711      	lsls	r1, r2, #28
 8004f52:	bf44      	itt	mi
 8004f54:	232b      	movmi	r3, #43	; 0x2b
 8004f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f60:	d015      	beq.n	8004f8e <_svfiprintf_r+0xf6>
 8004f62:	4654      	mov	r4, sl
 8004f64:	2000      	movs	r0, #0
 8004f66:	f04f 0c0a 	mov.w	ip, #10
 8004f6a:	9a07      	ldr	r2, [sp, #28]
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f72:	3b30      	subs	r3, #48	; 0x30
 8004f74:	2b09      	cmp	r3, #9
 8004f76:	d94e      	bls.n	8005016 <_svfiprintf_r+0x17e>
 8004f78:	b1b0      	cbz	r0, 8004fa8 <_svfiprintf_r+0x110>
 8004f7a:	9207      	str	r2, [sp, #28]
 8004f7c:	e014      	b.n	8004fa8 <_svfiprintf_r+0x110>
 8004f7e:	eba0 0308 	sub.w	r3, r0, r8
 8004f82:	fa09 f303 	lsl.w	r3, r9, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	46a2      	mov	sl, r4
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	e7d2      	b.n	8004f34 <_svfiprintf_r+0x9c>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	9103      	str	r1, [sp, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bfbb      	ittet	lt
 8004f9a:	425b      	neglt	r3, r3
 8004f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa0:	9307      	strge	r3, [sp, #28]
 8004fa2:	9307      	strlt	r3, [sp, #28]
 8004fa4:	bfb8      	it	lt
 8004fa6:	9204      	strlt	r2, [sp, #16]
 8004fa8:	7823      	ldrb	r3, [r4, #0]
 8004faa:	2b2e      	cmp	r3, #46	; 0x2e
 8004fac:	d10c      	bne.n	8004fc8 <_svfiprintf_r+0x130>
 8004fae:	7863      	ldrb	r3, [r4, #1]
 8004fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb2:	d135      	bne.n	8005020 <_svfiprintf_r+0x188>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	3402      	adds	r4, #2
 8004fb8:	1d1a      	adds	r2, r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	9203      	str	r2, [sp, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bfb8      	it	lt
 8004fc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005094 <_svfiprintf_r+0x1fc>
 8004fcc:	2203      	movs	r2, #3
 8004fce:	4650      	mov	r0, sl
 8004fd0:	7821      	ldrb	r1, [r4, #0]
 8004fd2:	f000 f9f7 	bl	80053c4 <memchr>
 8004fd6:	b140      	cbz	r0, 8004fea <_svfiprintf_r+0x152>
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	eba0 000a 	sub.w	r0, r0, sl
 8004fde:	fa03 f000 	lsl.w	r0, r3, r0
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	4303      	orrs	r3, r0
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fee:	2206      	movs	r2, #6
 8004ff0:	4825      	ldr	r0, [pc, #148]	; (8005088 <_svfiprintf_r+0x1f0>)
 8004ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff6:	f000 f9e5 	bl	80053c4 <memchr>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d038      	beq.n	8005070 <_svfiprintf_r+0x1d8>
 8004ffe:	4b23      	ldr	r3, [pc, #140]	; (800508c <_svfiprintf_r+0x1f4>)
 8005000:	bb1b      	cbnz	r3, 800504a <_svfiprintf_r+0x1b2>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	3307      	adds	r3, #7
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	3308      	adds	r3, #8
 800500c:	9303      	str	r3, [sp, #12]
 800500e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005010:	4433      	add	r3, r6
 8005012:	9309      	str	r3, [sp, #36]	; 0x24
 8005014:	e767      	b.n	8004ee6 <_svfiprintf_r+0x4e>
 8005016:	460c      	mov	r4, r1
 8005018:	2001      	movs	r0, #1
 800501a:	fb0c 3202 	mla	r2, ip, r2, r3
 800501e:	e7a5      	b.n	8004f6c <_svfiprintf_r+0xd4>
 8005020:	2300      	movs	r3, #0
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4619      	mov	r1, r3
 8005028:	3401      	adds	r4, #1
 800502a:	9305      	str	r3, [sp, #20]
 800502c:	4620      	mov	r0, r4
 800502e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005032:	3a30      	subs	r2, #48	; 0x30
 8005034:	2a09      	cmp	r2, #9
 8005036:	d903      	bls.n	8005040 <_svfiprintf_r+0x1a8>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0c5      	beq.n	8004fc8 <_svfiprintf_r+0x130>
 800503c:	9105      	str	r1, [sp, #20]
 800503e:	e7c3      	b.n	8004fc8 <_svfiprintf_r+0x130>
 8005040:	4604      	mov	r4, r0
 8005042:	2301      	movs	r3, #1
 8005044:	fb0c 2101 	mla	r1, ip, r1, r2
 8005048:	e7f0      	b.n	800502c <_svfiprintf_r+0x194>
 800504a:	ab03      	add	r3, sp, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	4638      	mov	r0, r7
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <_svfiprintf_r+0x1f8>)
 8005054:	a904      	add	r1, sp, #16
 8005056:	f3af 8000 	nop.w
 800505a:	1c42      	adds	r2, r0, #1
 800505c:	4606      	mov	r6, r0
 800505e:	d1d6      	bne.n	800500e <_svfiprintf_r+0x176>
 8005060:	89ab      	ldrh	r3, [r5, #12]
 8005062:	065b      	lsls	r3, r3, #25
 8005064:	f53f af2c 	bmi.w	8004ec0 <_svfiprintf_r+0x28>
 8005068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800506a:	b01d      	add	sp, #116	; 0x74
 800506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005070:	ab03      	add	r3, sp, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	462a      	mov	r2, r5
 8005076:	4638      	mov	r0, r7
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <_svfiprintf_r+0x1f8>)
 800507a:	a904      	add	r1, sp, #16
 800507c:	f000 f87c 	bl	8005178 <_printf_i>
 8005080:	e7eb      	b.n	800505a <_svfiprintf_r+0x1c2>
 8005082:	bf00      	nop
 8005084:	080056cc 	.word	0x080056cc
 8005088:	080056d6 	.word	0x080056d6
 800508c:	00000000 	.word	0x00000000
 8005090:	08004de1 	.word	0x08004de1
 8005094:	080056d2 	.word	0x080056d2

08005098 <_printf_common>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	4616      	mov	r6, r2
 800509e:	4699      	mov	r9, r3
 80050a0:	688a      	ldr	r2, [r1, #8]
 80050a2:	690b      	ldr	r3, [r1, #16]
 80050a4:	4607      	mov	r7, r0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bfb8      	it	lt
 80050aa:	4613      	movlt	r3, r2
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050b2:	460c      	mov	r4, r1
 80050b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b8:	b10a      	cbz	r2, 80050be <_printf_common+0x26>
 80050ba:	3301      	adds	r3, #1
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	0699      	lsls	r1, r3, #26
 80050c2:	bf42      	ittt	mi
 80050c4:	6833      	ldrmi	r3, [r6, #0]
 80050c6:	3302      	addmi	r3, #2
 80050c8:	6033      	strmi	r3, [r6, #0]
 80050ca:	6825      	ldr	r5, [r4, #0]
 80050cc:	f015 0506 	ands.w	r5, r5, #6
 80050d0:	d106      	bne.n	80050e0 <_printf_common+0x48>
 80050d2:	f104 0a19 	add.w	sl, r4, #25
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	6832      	ldr	r2, [r6, #0]
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dc28      	bgt.n	8005132 <_printf_common+0x9a>
 80050e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050e4:	1e13      	subs	r3, r2, #0
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	bf18      	it	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	0692      	lsls	r2, r2, #26
 80050ee:	d42d      	bmi.n	800514c <_printf_common+0xb4>
 80050f0:	4649      	mov	r1, r9
 80050f2:	4638      	mov	r0, r7
 80050f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f8:	47c0      	blx	r8
 80050fa:	3001      	adds	r0, #1
 80050fc:	d020      	beq.n	8005140 <_printf_common+0xa8>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	68e5      	ldr	r5, [r4, #12]
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf18      	it	ne
 800510a:	2500      	movne	r5, #0
 800510c:	6832      	ldr	r2, [r6, #0]
 800510e:	f04f 0600 	mov.w	r6, #0
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	bf08      	it	eq
 8005116:	1aad      	subeq	r5, r5, r2
 8005118:	6922      	ldr	r2, [r4, #16]
 800511a:	bf08      	it	eq
 800511c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005120:	4293      	cmp	r3, r2
 8005122:	bfc4      	itt	gt
 8005124:	1a9b      	subgt	r3, r3, r2
 8005126:	18ed      	addgt	r5, r5, r3
 8005128:	341a      	adds	r4, #26
 800512a:	42b5      	cmp	r5, r6
 800512c:	d11a      	bne.n	8005164 <_printf_common+0xcc>
 800512e:	2000      	movs	r0, #0
 8005130:	e008      	b.n	8005144 <_printf_common+0xac>
 8005132:	2301      	movs	r3, #1
 8005134:	4652      	mov	r2, sl
 8005136:	4649      	mov	r1, r9
 8005138:	4638      	mov	r0, r7
 800513a:	47c0      	blx	r8
 800513c:	3001      	adds	r0, #1
 800513e:	d103      	bne.n	8005148 <_printf_common+0xb0>
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005148:	3501      	adds	r5, #1
 800514a:	e7c4      	b.n	80050d6 <_printf_common+0x3e>
 800514c:	2030      	movs	r0, #48	; 0x30
 800514e:	18e1      	adds	r1, r4, r3
 8005150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800515a:	4422      	add	r2, r4
 800515c:	3302      	adds	r3, #2
 800515e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005162:	e7c5      	b.n	80050f0 <_printf_common+0x58>
 8005164:	2301      	movs	r3, #1
 8005166:	4622      	mov	r2, r4
 8005168:	4649      	mov	r1, r9
 800516a:	4638      	mov	r0, r7
 800516c:	47c0      	blx	r8
 800516e:	3001      	adds	r0, #1
 8005170:	d0e6      	beq.n	8005140 <_printf_common+0xa8>
 8005172:	3601      	adds	r6, #1
 8005174:	e7d9      	b.n	800512a <_printf_common+0x92>
	...

08005178 <_printf_i>:
 8005178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	460c      	mov	r4, r1
 800517e:	7e27      	ldrb	r7, [r4, #24]
 8005180:	4691      	mov	r9, r2
 8005182:	2f78      	cmp	r7, #120	; 0x78
 8005184:	4680      	mov	r8, r0
 8005186:	469a      	mov	sl, r3
 8005188:	990c      	ldr	r1, [sp, #48]	; 0x30
 800518a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800518e:	d807      	bhi.n	80051a0 <_printf_i+0x28>
 8005190:	2f62      	cmp	r7, #98	; 0x62
 8005192:	d80a      	bhi.n	80051aa <_printf_i+0x32>
 8005194:	2f00      	cmp	r7, #0
 8005196:	f000 80d9 	beq.w	800534c <_printf_i+0x1d4>
 800519a:	2f58      	cmp	r7, #88	; 0x58
 800519c:	f000 80a4 	beq.w	80052e8 <_printf_i+0x170>
 80051a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051a8:	e03a      	b.n	8005220 <_printf_i+0xa8>
 80051aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ae:	2b15      	cmp	r3, #21
 80051b0:	d8f6      	bhi.n	80051a0 <_printf_i+0x28>
 80051b2:	a001      	add	r0, pc, #4	; (adr r0, 80051b8 <_printf_i+0x40>)
 80051b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051b8:	08005211 	.word	0x08005211
 80051bc:	08005225 	.word	0x08005225
 80051c0:	080051a1 	.word	0x080051a1
 80051c4:	080051a1 	.word	0x080051a1
 80051c8:	080051a1 	.word	0x080051a1
 80051cc:	080051a1 	.word	0x080051a1
 80051d0:	08005225 	.word	0x08005225
 80051d4:	080051a1 	.word	0x080051a1
 80051d8:	080051a1 	.word	0x080051a1
 80051dc:	080051a1 	.word	0x080051a1
 80051e0:	080051a1 	.word	0x080051a1
 80051e4:	08005333 	.word	0x08005333
 80051e8:	08005255 	.word	0x08005255
 80051ec:	08005315 	.word	0x08005315
 80051f0:	080051a1 	.word	0x080051a1
 80051f4:	080051a1 	.word	0x080051a1
 80051f8:	08005355 	.word	0x08005355
 80051fc:	080051a1 	.word	0x080051a1
 8005200:	08005255 	.word	0x08005255
 8005204:	080051a1 	.word	0x080051a1
 8005208:	080051a1 	.word	0x080051a1
 800520c:	0800531d 	.word	0x0800531d
 8005210:	680b      	ldr	r3, [r1, #0]
 8005212:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	600a      	str	r2, [r1, #0]
 800521c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005220:	2301      	movs	r3, #1
 8005222:	e0a4      	b.n	800536e <_printf_i+0x1f6>
 8005224:	6825      	ldr	r5, [r4, #0]
 8005226:	6808      	ldr	r0, [r1, #0]
 8005228:	062e      	lsls	r6, r5, #24
 800522a:	f100 0304 	add.w	r3, r0, #4
 800522e:	d50a      	bpl.n	8005246 <_printf_i+0xce>
 8005230:	6805      	ldr	r5, [r0, #0]
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	2d00      	cmp	r5, #0
 8005236:	da03      	bge.n	8005240 <_printf_i+0xc8>
 8005238:	232d      	movs	r3, #45	; 0x2d
 800523a:	426d      	negs	r5, r5
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005240:	230a      	movs	r3, #10
 8005242:	485e      	ldr	r0, [pc, #376]	; (80053bc <_printf_i+0x244>)
 8005244:	e019      	b.n	800527a <_printf_i+0x102>
 8005246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800524a:	6805      	ldr	r5, [r0, #0]
 800524c:	600b      	str	r3, [r1, #0]
 800524e:	bf18      	it	ne
 8005250:	b22d      	sxthne	r5, r5
 8005252:	e7ef      	b.n	8005234 <_printf_i+0xbc>
 8005254:	680b      	ldr	r3, [r1, #0]
 8005256:	6825      	ldr	r5, [r4, #0]
 8005258:	1d18      	adds	r0, r3, #4
 800525a:	6008      	str	r0, [r1, #0]
 800525c:	0628      	lsls	r0, r5, #24
 800525e:	d501      	bpl.n	8005264 <_printf_i+0xec>
 8005260:	681d      	ldr	r5, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0xf2>
 8005264:	0669      	lsls	r1, r5, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0xe8>
 8005268:	881d      	ldrh	r5, [r3, #0]
 800526a:	2f6f      	cmp	r7, #111	; 0x6f
 800526c:	bf0c      	ite	eq
 800526e:	2308      	moveq	r3, #8
 8005270:	230a      	movne	r3, #10
 8005272:	4852      	ldr	r0, [pc, #328]	; (80053bc <_printf_i+0x244>)
 8005274:	2100      	movs	r1, #0
 8005276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800527a:	6866      	ldr	r6, [r4, #4]
 800527c:	2e00      	cmp	r6, #0
 800527e:	bfa8      	it	ge
 8005280:	6821      	ldrge	r1, [r4, #0]
 8005282:	60a6      	str	r6, [r4, #8]
 8005284:	bfa4      	itt	ge
 8005286:	f021 0104 	bicge.w	r1, r1, #4
 800528a:	6021      	strge	r1, [r4, #0]
 800528c:	b90d      	cbnz	r5, 8005292 <_printf_i+0x11a>
 800528e:	2e00      	cmp	r6, #0
 8005290:	d04d      	beq.n	800532e <_printf_i+0x1b6>
 8005292:	4616      	mov	r6, r2
 8005294:	fbb5 f1f3 	udiv	r1, r5, r3
 8005298:	fb03 5711 	mls	r7, r3, r1, r5
 800529c:	5dc7      	ldrb	r7, [r0, r7]
 800529e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052a2:	462f      	mov	r7, r5
 80052a4:	42bb      	cmp	r3, r7
 80052a6:	460d      	mov	r5, r1
 80052a8:	d9f4      	bls.n	8005294 <_printf_i+0x11c>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d10b      	bne.n	80052c6 <_printf_i+0x14e>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	07df      	lsls	r7, r3, #31
 80052b2:	d508      	bpl.n	80052c6 <_printf_i+0x14e>
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	6861      	ldr	r1, [r4, #4]
 80052b8:	4299      	cmp	r1, r3
 80052ba:	bfde      	ittt	le
 80052bc:	2330      	movle	r3, #48	; 0x30
 80052be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052c6:	1b92      	subs	r2, r2, r6
 80052c8:	6122      	str	r2, [r4, #16]
 80052ca:	464b      	mov	r3, r9
 80052cc:	4621      	mov	r1, r4
 80052ce:	4640      	mov	r0, r8
 80052d0:	f8cd a000 	str.w	sl, [sp]
 80052d4:	aa03      	add	r2, sp, #12
 80052d6:	f7ff fedf 	bl	8005098 <_printf_common>
 80052da:	3001      	adds	r0, #1
 80052dc:	d14c      	bne.n	8005378 <_printf_i+0x200>
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	b004      	add	sp, #16
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	4834      	ldr	r0, [pc, #208]	; (80053bc <_printf_i+0x244>)
 80052ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052ee:	680e      	ldr	r6, [r1, #0]
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80052f6:	061f      	lsls	r7, r3, #24
 80052f8:	600e      	str	r6, [r1, #0]
 80052fa:	d514      	bpl.n	8005326 <_printf_i+0x1ae>
 80052fc:	07d9      	lsls	r1, r3, #31
 80052fe:	bf44      	itt	mi
 8005300:	f043 0320 	orrmi.w	r3, r3, #32
 8005304:	6023      	strmi	r3, [r4, #0]
 8005306:	b91d      	cbnz	r5, 8005310 <_printf_i+0x198>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	f023 0320 	bic.w	r3, r3, #32
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	2310      	movs	r3, #16
 8005312:	e7af      	b.n	8005274 <_printf_i+0xfc>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	f043 0320 	orr.w	r3, r3, #32
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	2378      	movs	r3, #120	; 0x78
 800531e:	4828      	ldr	r0, [pc, #160]	; (80053c0 <_printf_i+0x248>)
 8005320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005324:	e7e3      	b.n	80052ee <_printf_i+0x176>
 8005326:	065e      	lsls	r6, r3, #25
 8005328:	bf48      	it	mi
 800532a:	b2ad      	uxthmi	r5, r5
 800532c:	e7e6      	b.n	80052fc <_printf_i+0x184>
 800532e:	4616      	mov	r6, r2
 8005330:	e7bb      	b.n	80052aa <_printf_i+0x132>
 8005332:	680b      	ldr	r3, [r1, #0]
 8005334:	6826      	ldr	r6, [r4, #0]
 8005336:	1d1d      	adds	r5, r3, #4
 8005338:	6960      	ldr	r0, [r4, #20]
 800533a:	600d      	str	r5, [r1, #0]
 800533c:	0635      	lsls	r5, r6, #24
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	d501      	bpl.n	8005346 <_printf_i+0x1ce>
 8005342:	6018      	str	r0, [r3, #0]
 8005344:	e002      	b.n	800534c <_printf_i+0x1d4>
 8005346:	0671      	lsls	r1, r6, #25
 8005348:	d5fb      	bpl.n	8005342 <_printf_i+0x1ca>
 800534a:	8018      	strh	r0, [r3, #0]
 800534c:	2300      	movs	r3, #0
 800534e:	4616      	mov	r6, r2
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	e7ba      	b.n	80052ca <_printf_i+0x152>
 8005354:	680b      	ldr	r3, [r1, #0]
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	600a      	str	r2, [r1, #0]
 800535a:	681e      	ldr	r6, [r3, #0]
 800535c:	2100      	movs	r1, #0
 800535e:	4630      	mov	r0, r6
 8005360:	6862      	ldr	r2, [r4, #4]
 8005362:	f000 f82f 	bl	80053c4 <memchr>
 8005366:	b108      	cbz	r0, 800536c <_printf_i+0x1f4>
 8005368:	1b80      	subs	r0, r0, r6
 800536a:	6060      	str	r0, [r4, #4]
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	2300      	movs	r3, #0
 8005372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005376:	e7a8      	b.n	80052ca <_printf_i+0x152>
 8005378:	4632      	mov	r2, r6
 800537a:	4649      	mov	r1, r9
 800537c:	4640      	mov	r0, r8
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	47d0      	blx	sl
 8005382:	3001      	adds	r0, #1
 8005384:	d0ab      	beq.n	80052de <_printf_i+0x166>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	079b      	lsls	r3, r3, #30
 800538a:	d413      	bmi.n	80053b4 <_printf_i+0x23c>
 800538c:	68e0      	ldr	r0, [r4, #12]
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	4298      	cmp	r0, r3
 8005392:	bfb8      	it	lt
 8005394:	4618      	movlt	r0, r3
 8005396:	e7a4      	b.n	80052e2 <_printf_i+0x16a>
 8005398:	2301      	movs	r3, #1
 800539a:	4632      	mov	r2, r6
 800539c:	4649      	mov	r1, r9
 800539e:	4640      	mov	r0, r8
 80053a0:	47d0      	blx	sl
 80053a2:	3001      	adds	r0, #1
 80053a4:	d09b      	beq.n	80052de <_printf_i+0x166>
 80053a6:	3501      	adds	r5, #1
 80053a8:	68e3      	ldr	r3, [r4, #12]
 80053aa:	9903      	ldr	r1, [sp, #12]
 80053ac:	1a5b      	subs	r3, r3, r1
 80053ae:	42ab      	cmp	r3, r5
 80053b0:	dcf2      	bgt.n	8005398 <_printf_i+0x220>
 80053b2:	e7eb      	b.n	800538c <_printf_i+0x214>
 80053b4:	2500      	movs	r5, #0
 80053b6:	f104 0619 	add.w	r6, r4, #25
 80053ba:	e7f5      	b.n	80053a8 <_printf_i+0x230>
 80053bc:	080056dd 	.word	0x080056dd
 80053c0:	080056ee 	.word	0x080056ee

080053c4 <memchr>:
 80053c4:	4603      	mov	r3, r0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	b2c9      	uxtb	r1, r1
 80053ca:	4402      	add	r2, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	d101      	bne.n	80053d6 <memchr+0x12>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e003      	b.n	80053de <memchr+0x1a>
 80053d6:	7804      	ldrb	r4, [r0, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	428c      	cmp	r4, r1
 80053dc:	d1f6      	bne.n	80053cc <memchr+0x8>
 80053de:	bd10      	pop	{r4, pc}

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <memmove>:
 80053fc:	4288      	cmp	r0, r1
 80053fe:	b510      	push	{r4, lr}
 8005400:	eb01 0402 	add.w	r4, r1, r2
 8005404:	d902      	bls.n	800540c <memmove+0x10>
 8005406:	4284      	cmp	r4, r0
 8005408:	4623      	mov	r3, r4
 800540a:	d807      	bhi.n	800541c <memmove+0x20>
 800540c:	1e43      	subs	r3, r0, #1
 800540e:	42a1      	cmp	r1, r4
 8005410:	d008      	beq.n	8005424 <memmove+0x28>
 8005412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800541a:	e7f8      	b.n	800540e <memmove+0x12>
 800541c:	4601      	mov	r1, r0
 800541e:	4402      	add	r2, r0
 8005420:	428a      	cmp	r2, r1
 8005422:	d100      	bne.n	8005426 <memmove+0x2a>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800542a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800542e:	e7f7      	b.n	8005420 <memmove+0x24>

08005430 <_free_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4605      	mov	r5, r0
 8005434:	2900      	cmp	r1, #0
 8005436:	d043      	beq.n	80054c0 <_free_r+0x90>
 8005438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800543c:	1f0c      	subs	r4, r1, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfb8      	it	lt
 8005442:	18e4      	addlt	r4, r4, r3
 8005444:	f000 f8d0 	bl	80055e8 <__malloc_lock>
 8005448:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <_free_r+0x94>)
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	4610      	mov	r0, r2
 800544e:	b933      	cbnz	r3, 800545e <_free_r+0x2e>
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	6014      	str	r4, [r2, #0]
 8005454:	4628      	mov	r0, r5
 8005456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800545a:	f000 b8cb 	b.w	80055f4 <__malloc_unlock>
 800545e:	42a3      	cmp	r3, r4
 8005460:	d90a      	bls.n	8005478 <_free_r+0x48>
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	1862      	adds	r2, r4, r1
 8005466:	4293      	cmp	r3, r2
 8005468:	bf01      	itttt	eq
 800546a:	681a      	ldreq	r2, [r3, #0]
 800546c:	685b      	ldreq	r3, [r3, #4]
 800546e:	1852      	addeq	r2, r2, r1
 8005470:	6022      	streq	r2, [r4, #0]
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	6004      	str	r4, [r0, #0]
 8005476:	e7ed      	b.n	8005454 <_free_r+0x24>
 8005478:	461a      	mov	r2, r3
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	b10b      	cbz	r3, 8005482 <_free_r+0x52>
 800547e:	42a3      	cmp	r3, r4
 8005480:	d9fa      	bls.n	8005478 <_free_r+0x48>
 8005482:	6811      	ldr	r1, [r2, #0]
 8005484:	1850      	adds	r0, r2, r1
 8005486:	42a0      	cmp	r0, r4
 8005488:	d10b      	bne.n	80054a2 <_free_r+0x72>
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	4401      	add	r1, r0
 800548e:	1850      	adds	r0, r2, r1
 8005490:	4283      	cmp	r3, r0
 8005492:	6011      	str	r1, [r2, #0]
 8005494:	d1de      	bne.n	8005454 <_free_r+0x24>
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4401      	add	r1, r0
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	6053      	str	r3, [r2, #4]
 80054a0:	e7d8      	b.n	8005454 <_free_r+0x24>
 80054a2:	d902      	bls.n	80054aa <_free_r+0x7a>
 80054a4:	230c      	movs	r3, #12
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	e7d4      	b.n	8005454 <_free_r+0x24>
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1821      	adds	r1, r4, r0
 80054ae:	428b      	cmp	r3, r1
 80054b0:	bf01      	itttt	eq
 80054b2:	6819      	ldreq	r1, [r3, #0]
 80054b4:	685b      	ldreq	r3, [r3, #4]
 80054b6:	1809      	addeq	r1, r1, r0
 80054b8:	6021      	streq	r1, [r4, #0]
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6054      	str	r4, [r2, #4]
 80054be:	e7c9      	b.n	8005454 <_free_r+0x24>
 80054c0:	bd38      	pop	{r3, r4, r5, pc}
 80054c2:	bf00      	nop
 80054c4:	20000190 	.word	0x20000190

080054c8 <_malloc_r>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	1ccd      	adds	r5, r1, #3
 80054cc:	f025 0503 	bic.w	r5, r5, #3
 80054d0:	3508      	adds	r5, #8
 80054d2:	2d0c      	cmp	r5, #12
 80054d4:	bf38      	it	cc
 80054d6:	250c      	movcc	r5, #12
 80054d8:	2d00      	cmp	r5, #0
 80054da:	4606      	mov	r6, r0
 80054dc:	db01      	blt.n	80054e2 <_malloc_r+0x1a>
 80054de:	42a9      	cmp	r1, r5
 80054e0:	d903      	bls.n	80054ea <_malloc_r+0x22>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6033      	str	r3, [r6, #0]
 80054e6:	2000      	movs	r0, #0
 80054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ea:	f000 f87d 	bl	80055e8 <__malloc_lock>
 80054ee:	4921      	ldr	r1, [pc, #132]	; (8005574 <_malloc_r+0xac>)
 80054f0:	680a      	ldr	r2, [r1, #0]
 80054f2:	4614      	mov	r4, r2
 80054f4:	b99c      	cbnz	r4, 800551e <_malloc_r+0x56>
 80054f6:	4f20      	ldr	r7, [pc, #128]	; (8005578 <_malloc_r+0xb0>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	b923      	cbnz	r3, 8005506 <_malloc_r+0x3e>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4630      	mov	r0, r6
 8005500:	f000 f862 	bl	80055c8 <_sbrk_r>
 8005504:	6038      	str	r0, [r7, #0]
 8005506:	4629      	mov	r1, r5
 8005508:	4630      	mov	r0, r6
 800550a:	f000 f85d 	bl	80055c8 <_sbrk_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	d123      	bne.n	800555a <_malloc_r+0x92>
 8005512:	230c      	movs	r3, #12
 8005514:	4630      	mov	r0, r6
 8005516:	6033      	str	r3, [r6, #0]
 8005518:	f000 f86c 	bl	80055f4 <__malloc_unlock>
 800551c:	e7e3      	b.n	80054e6 <_malloc_r+0x1e>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	1b5b      	subs	r3, r3, r5
 8005522:	d417      	bmi.n	8005554 <_malloc_r+0x8c>
 8005524:	2b0b      	cmp	r3, #11
 8005526:	d903      	bls.n	8005530 <_malloc_r+0x68>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	441c      	add	r4, r3
 800552c:	6025      	str	r5, [r4, #0]
 800552e:	e004      	b.n	800553a <_malloc_r+0x72>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	42a2      	cmp	r2, r4
 8005534:	bf0c      	ite	eq
 8005536:	600b      	streq	r3, [r1, #0]
 8005538:	6053      	strne	r3, [r2, #4]
 800553a:	4630      	mov	r0, r6
 800553c:	f000 f85a 	bl	80055f4 <__malloc_unlock>
 8005540:	f104 000b 	add.w	r0, r4, #11
 8005544:	1d23      	adds	r3, r4, #4
 8005546:	f020 0007 	bic.w	r0, r0, #7
 800554a:	1ac2      	subs	r2, r0, r3
 800554c:	d0cc      	beq.n	80054e8 <_malloc_r+0x20>
 800554e:	1a1b      	subs	r3, r3, r0
 8005550:	50a3      	str	r3, [r4, r2]
 8005552:	e7c9      	b.n	80054e8 <_malloc_r+0x20>
 8005554:	4622      	mov	r2, r4
 8005556:	6864      	ldr	r4, [r4, #4]
 8005558:	e7cc      	b.n	80054f4 <_malloc_r+0x2c>
 800555a:	1cc4      	adds	r4, r0, #3
 800555c:	f024 0403 	bic.w	r4, r4, #3
 8005560:	42a0      	cmp	r0, r4
 8005562:	d0e3      	beq.n	800552c <_malloc_r+0x64>
 8005564:	1a21      	subs	r1, r4, r0
 8005566:	4630      	mov	r0, r6
 8005568:	f000 f82e 	bl	80055c8 <_sbrk_r>
 800556c:	3001      	adds	r0, #1
 800556e:	d1dd      	bne.n	800552c <_malloc_r+0x64>
 8005570:	e7cf      	b.n	8005512 <_malloc_r+0x4a>
 8005572:	bf00      	nop
 8005574:	20000190 	.word	0x20000190
 8005578:	20000194 	.word	0x20000194

0800557c <_realloc_r>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	4607      	mov	r7, r0
 8005580:	4614      	mov	r4, r2
 8005582:	460e      	mov	r6, r1
 8005584:	b921      	cbnz	r1, 8005590 <_realloc_r+0x14>
 8005586:	4611      	mov	r1, r2
 8005588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800558c:	f7ff bf9c 	b.w	80054c8 <_malloc_r>
 8005590:	b922      	cbnz	r2, 800559c <_realloc_r+0x20>
 8005592:	f7ff ff4d 	bl	8005430 <_free_r>
 8005596:	4625      	mov	r5, r4
 8005598:	4628      	mov	r0, r5
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559c:	f000 f830 	bl	8005600 <_malloc_usable_size_r>
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d20f      	bcs.n	80055c4 <_realloc_r+0x48>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ff8e 	bl	80054c8 <_malloc_r>
 80055ac:	4605      	mov	r5, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0f2      	beq.n	8005598 <_realloc_r+0x1c>
 80055b2:	4631      	mov	r1, r6
 80055b4:	4622      	mov	r2, r4
 80055b6:	f7ff ff13 	bl	80053e0 <memcpy>
 80055ba:	4631      	mov	r1, r6
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ff37 	bl	8005430 <_free_r>
 80055c2:	e7e9      	b.n	8005598 <_realloc_r+0x1c>
 80055c4:	4635      	mov	r5, r6
 80055c6:	e7e7      	b.n	8005598 <_realloc_r+0x1c>

080055c8 <_sbrk_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	2300      	movs	r3, #0
 80055cc:	4d05      	ldr	r5, [pc, #20]	; (80055e4 <_sbrk_r+0x1c>)
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fc ff2c 	bl	8002430 <_sbrk>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_sbrk_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_sbrk_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	200004d8 	.word	0x200004d8

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f000 b811 	b.w	8005610 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	200004e0 	.word	0x200004e0

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f000 b80c 	b.w	8005612 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	200004e0 	.word	0x200004e0

08005600 <_malloc_usable_size_r>:
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f18      	subs	r0, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfbc      	itt	lt
 800560a:	580b      	ldrlt	r3, [r1, r0]
 800560c:	18c0      	addlt	r0, r0, r3
 800560e:	4770      	bx	lr

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
